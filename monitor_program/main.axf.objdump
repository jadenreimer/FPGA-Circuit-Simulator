
C:/Users/Joseph/Documents/2nd_Year/ECE243/243-project/monitor_program/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 d4 51 00 00 d8 51 00 00 dc 51 00 00     @....Q...Q...Q..
  30:	e0 51 00 00 d0 51 00 00 e4 51 00 00 e8 51 00 00     .Q...Q...Q...Q..

Disassembly of section .text:

00000040 <__cs3_reset>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb001424 	bl	516c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000054e8 	.word	0x000054e8

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00005928 	.word	0x00005928

00000124 <__cs3_heap_start_ptr>:
     124:	00005950 	.word	0x00005950

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00005930 	.word	0x00005930
     170:	00005933 	.word	0x00005933
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00005930 	.word	0x00005930
     1bc:	00005930 	.word	0x00005930
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00005930 	.word	0x00005930
     200:	00000000 	.word	0x00000000
     204:	00005274 	.word	0x00005274

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00005274 	.word	0x00005274
     250:	00005934 	.word	0x00005934
     254:	000054e8 	.word	0x000054e8
     258:	00000000 	.word	0x00000000

0000025c <write_char>:
    }
}

void write_char(int x, int y, char c) {
  // VGA character buffer
  volatile char * character_buffer = (char *) (0xC9000000 + (y<<7) + x);
     25c:	e28004c9 	add	r0, r0, #-922746880	; 0xc9000000
  *character_buffer = c;
     260:	e7c02381 	strb	r2, [r0, r1, lsl #7]
     264:	e12fff1e 	bx	lr

00000268 <write_string>:
}

void write_string(int x, int y, int size, char string[size]){
     268:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
     26c:	e1a06001 	mov	r6, r1
    if(y<60){
     270:	e351003b 	cmp	r1, #59	; 0x3b
     274:	c8bd80f8 	popgt	{r3, r4, r5, r6, r7, pc}
        for (int i = 0; i < size; i++) {
     278:	e3520000 	cmp	r2, #0
     27c:	d8bd80f8 	pople	{r3, r4, r5, r6, r7, pc}
  // VGA character buffer
  volatile char * character_buffer = (char *) (0xC9000000 + (y<<7) + x);
  *character_buffer = c;
}

void write_string(int x, int y, int size, char string[size]){
     280:	e0825000 	add	r5, r2, r0
     284:	e1a04000 	mov	r4, r0
     288:	e0607003 	rsb	r7, r0, r3
    if(y<60){
        for (int i = 0; i < size; i++) {
            if((x+i)<79)
     28c:	e354004e 	cmp	r4, #78	; 0x4e
     290:	ca000003 	bgt	2a4 <write_string+0x3c>
                write_char(x + i, y, string[i]);
     294:	e1a00004 	mov	r0, r4
     298:	e1a01006 	mov	r1, r6
     29c:	e7d72004 	ldrb	r2, [r7, r4]
     2a0:	ebffffed 	bl	25c <write_char>
     2a4:	e2844001 	add	r4, r4, #1
  *character_buffer = c;
}

void write_string(int x, int y, int size, char string[size]){
    if(y<60){
        for (int i = 0; i < size; i++) {
     2a8:	e1540005 	cmp	r4, r5
     2ac:	1afffff6 	bne	28c <write_string+0x24>
     2b0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}

000002b4 <clear_chars>:
                write_char(x + i, y, string[i]);
        }
    }
}

void clear_chars(){
     2b4:	e92d4070 	push	{r4, r5, r6, lr}
    for (int x = 0; x < 79; x++)
     2b8:	e3a05000 	mov	r5, #0
                write_char(x + i, y, string[i]);
        }
    }
}

void clear_chars(){
     2bc:	e1a06005 	mov	r6, r5
     2c0:	ea000009 	b	2ec <clear_chars+0x38>
    for (int x = 0; x < 79; x++)
        for(int y = 0; y < 59; y++)
            write_char(x, y, '\0');
     2c4:	e1a00005 	mov	r0, r5
     2c8:	e1a01004 	mov	r1, r4
     2cc:	e1a02006 	mov	r2, r6
     2d0:	ebffffe1 	bl	25c <write_char>
    }
}

void clear_chars(){
    for (int x = 0; x < 79; x++)
        for(int y = 0; y < 59; y++)
     2d4:	e2844001 	add	r4, r4, #1
     2d8:	e354003b 	cmp	r4, #59	; 0x3b
     2dc:	1afffff8 	bne	2c4 <clear_chars+0x10>
        }
    }
}

void clear_chars(){
    for (int x = 0; x < 79; x++)
     2e0:	e2855001 	add	r5, r5, #1
     2e4:	e355004f 	cmp	r5, #79	; 0x4f
     2e8:	08bd8070 	popeq	{r4, r5, r6, pc}
                write_char(x + i, y, string[i]);
        }
    }
}

void clear_chars(){
     2ec:	e1a04006 	mov	r4, r6
     2f0:	eafffff3 	b	2c4 <clear_chars+0x10>

000002f4 <plot_pixel>:
        }
    }
}

void plot_pixel(int x, int y, short int line_color){
    if(x<X_DIM && x>=0 && y<Y_DIM && y>=0)
     2f4:	e35100ef 	cmp	r1, #239	; 0xef
     2f8:	c3a03000 	movgt	r3, #0
     2fc:	d3a03001 	movle	r3, #1
     300:	e3500d05 	cmp	r0, #320	; 0x140
     304:	23a03000 	movcs	r3, #0
     308:	e3530000 	cmp	r3, #0
     30c:	012fff1e 	bxeq	lr
     310:	e3510000 	cmp	r1, #0
     314:	b12fff1e 	bxlt	lr
        *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     318:	e305394c 	movw	r3, #22860	; 0x594c
     31c:	e3403000 	movt	r3, #0
     320:	e5933000 	ldr	r3, [r3]
     324:	e1a00080 	lsl	r0, r0, #1
     328:	e0831501 	add	r1, r3, r1, lsl #10
     32c:	e18120b0 	strh	r2, [r1, r0]
     330:	e12fff1e 	bx	lr

00000334 <draw_line>:
    for(int deg=0; deg<360; deg++){
        draw_line(x, y, x + r*cos(deg), y + r*sin(deg), colour);
    }
}

void draw_line(int x0, int y0, int x1, int y1, short int line_colour){
     334:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     338:	e24dd00c 	sub	sp, sp, #12
     33c:	e1a08002 	mov	r8, r2
     340:	e1dd93f0 	ldrsh	r9, [sp, #48]	; 0x30
    int is_steep = abs(y1 - y0) > abs(x1 - x0);
     344:	e061a003 	rsb	r10, r1, r3
     348:	e35a0000 	cmp	r10, #0
     34c:	b26aa000 	rsblt	r10, r10, #0
     350:	e0602002 	rsb	r2, r0, r2
     354:	e3520000 	cmp	r2, #0
     358:	b2622000 	rsblt	r2, r2, #0
     35c:	e15a0002 	cmp	r10, r2
     360:	d3a0a000 	movle	r10, #0
     364:	c3a0a001 	movgt	r10, #1
    int temp = 0;
    if (is_steep){
     368:	e35a0000 	cmp	r10, #0
     36c:	0a000005 	beq	388 <draw_line+0x54>
     370:	e1a02008 	mov	r2, r8
		temp = x0;
		x0 = y0;
		y0 = temp;
		temp = x1;
		x1 = y1;
     374:	e1a08003 	mov	r8, r3
		y1 = temp;
     378:	e1a03002 	mov	r3, r2
}

void draw_line(int x0, int y0, int x1, int y1, short int line_colour){
    int is_steep = abs(y1 - y0) > abs(x1 - x0);
    int temp = 0;
    if (is_steep){
     37c:	e1a02000 	mov	r2, r0
		temp = x0;
		x0 = y0;
     380:	e1a00001 	mov	r0, r1
		y0 = temp;
     384:	e1a01002 	mov	r1, r2
		temp = x1;
		x1 = y1;
		y1 = temp;
    }
    if (x0 > x1){
     388:	e1500008 	cmp	r0, r8
     38c:	da000005 	ble	3a8 <draw_line+0x74>
     390:	e1a02001 	mov	r2, r1
    	temp = x0;
		x0 = x1;
		x1 = temp;
		temp = y0;
		y0 = y1;
     394:	e1a01003 	mov	r1, r3
		y1 = temp;
     398:	e1a03002 	mov	r3, r2
		y0 = temp;
		temp = x1;
		x1 = y1;
		y1 = temp;
    }
    if (x0 > x1){
     39c:	e1a02000 	mov	r2, r0
    	temp = x0;
		x0 = x1;
     3a0:	e1a00008 	mov	r0, r8
		x1 = temp;
     3a4:	e1a08002 	mov	r8, r2
		temp = y0;
		y0 = y1;
		y1 = temp;
    }

    int deltax = x1 - x0;
     3a8:	e060b008 	rsb	r11, r0, r8
    int deltay = abs(y1 - y0);
     3ac:	e0617003 	rsb	r7, r1, r3
     3b0:	e3570000 	cmp	r7, #0
     3b4:	b2677000 	rsblt	r7, r7, #0
    int error = -(deltax / 2);
     3b8:	e08b4fab 	add	r4, r11, r11, lsr #31
     3bc:	e1a040c4 	asr	r4, r4, #1
     3c0:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step = -1;
     3c4:	e1510003 	cmp	r1, r3
     3c8:	b3a03001 	movlt	r3, #1
     3cc:	a3e03000 	mvnge	r3, #0
     3d0:	e58d3004 	str	r3, [sp, #4]
    if (y0 < y1){
		y_step = 1;
    }
    int i;
    for (i = x0; i < x1; i++){
     3d4:	e1500008 	cmp	r0, r8
     3d8:	aa00000f 	bge	41c <draw_line+0xe8>
     3dc:	e1a05000 	mov	r5, r0
    }

    int deltax = x1 - x0;
    int deltay = abs(y1 - y0);
    int error = -(deltax / 2);
    int y = y0;
     3e0:	e1a06001 	mov	r6, r1
    if (y0 < y1){
		y_step = 1;
    }
    int i;
    for (i = x0; i < x1; i++){
        if (is_steep){
     3e4:	e35a0000 	cmp	r10, #0
            plot_pixel(y, i, line_colour);
     3e8:	11a00006 	movne	r0, r6
     3ec:	11a01005 	movne	r1, r5
        }
        else{
            plot_pixel(i, y, line_colour);
     3f0:	01a00005 	moveq	r0, r5
     3f4:	01a01006 	moveq	r1, r6
     3f8:	e1a02009 	mov	r2, r9
     3fc:	ebffffbc 	bl	2f4 <plot_pixel>
        }
        error = error + deltay;
        if (error >= 0){
     400:	e0944007 	adds	r4, r4, r7
            y = y + y_step;
     404:	559d3004 	ldrpl	r3, [sp, #4]
     408:	50866003 	addpl	r6, r6, r3
            error = error - deltax;
     40c:	506b4004 	rsbpl	r4, r11, r4
    int y_step = -1;
    if (y0 < y1){
		y_step = 1;
    }
    int i;
    for (i = x0; i < x1; i++){
     410:	e2855001 	add	r5, r5, #1
     414:	e1580005 	cmp	r8, r5
     418:	cafffff1 	bgt	3e4 <draw_line+0xb0>
        if (error >= 0){
            y = y + y_step;
            error = error - deltax;
        }
    }
}
     41c:	e28dd00c 	add	sp, sp, #12
     420:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000424 <draw_circle>:
            plot_pixel(x, y, colour);
        }
    }
}

void draw_circle(int x, int y, int r, short int colour){
     424:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     428:	e24dd024 	sub	sp, sp, #36	; 0x24
     42c:	e1a09000 	mov	r9, r0
     430:	e1a0b001 	mov	r11, r1
     434:	e58d201c 	str	r2, [sp, #28]
     438:	e1a08003 	mov	r8, r3
    for(int deg=0; deg<360; deg++){
     43c:	e3a0a000 	mov	r10, #0
        draw_line(x, y, x + r*cos(deg), y + r*sin(deg), colour);
     440:	e59d001c 	ldr	r0, [sp, #28]
     444:	eb000ec6 	bl	3f64 <__aeabi_i2d>
     448:	e1cd00f8 	strd	r0, [sp, #8]
     44c:	e1a0000a 	mov	r0, r10
     450:	eb000ec3 	bl	3f64 <__aeabi_i2d>
     454:	e1a04000 	mov	r4, r0
     458:	e1a05001 	mov	r5, r1
     45c:	eb0004fc 	bl	1854 <cos>
     460:	e1a06000 	mov	r6, r0
     464:	e1a07001 	mov	r7, r1
     468:	e1a00004 	mov	r0, r4
     46c:	e1a01005 	mov	r1, r5
     470:	eb000534 	bl	1948 <sin>
     474:	e1cd01f0 	strd	r0, [sp, #16]
     478:	e1a00009 	mov	r0, r9
     47c:	eb000eb8 	bl	3f64 <__aeabi_i2d>
     480:	e1a04000 	mov	r4, r0
     484:	e1a05001 	mov	r5, r1
     488:	e1cd00d8 	ldrd	r0, [sp, #8]
     48c:	e1a02006 	mov	r2, r6
     490:	e1a03007 	mov	r3, r7
     494:	eb000ee9 	bl	4040 <__aeabi_dmul>
     498:	e1a02000 	mov	r2, r0
     49c:	e1a03001 	mov	r3, r1
     4a0:	e1a00004 	mov	r0, r4
     4a4:	e1a01005 	mov	r1, r5
     4a8:	eb000de0 	bl	3c30 <__adddf3>
     4ac:	eb00105b 	bl	4620 <__aeabi_d2iz>
     4b0:	e1a06000 	mov	r6, r0
     4b4:	e1a0000b 	mov	r0, r11
     4b8:	eb000ea9 	bl	3f64 <__aeabi_i2d>
     4bc:	e1a04000 	mov	r4, r0
     4c0:	e1a05001 	mov	r5, r1
     4c4:	e1cd00d8 	ldrd	r0, [sp, #8]
     4c8:	e1cd21d0 	ldrd	r2, [sp, #16]
     4cc:	eb000edb 	bl	4040 <__aeabi_dmul>
     4d0:	e1a02000 	mov	r2, r0
     4d4:	e1a03001 	mov	r3, r1
     4d8:	e1a00004 	mov	r0, r4
     4dc:	e1a01005 	mov	r1, r5
     4e0:	eb000dd2 	bl	3c30 <__adddf3>
     4e4:	eb00104d 	bl	4620 <__aeabi_d2iz>
     4e8:	e1a03000 	mov	r3, r0
     4ec:	e58d8000 	str	r8, [sp]
     4f0:	e1a00009 	mov	r0, r9
     4f4:	e1a0100b 	mov	r1, r11
     4f8:	e1a02006 	mov	r2, r6
     4fc:	ebffff8c 	bl	334 <draw_line>
        }
    }
}

void draw_circle(int x, int y, int r, short int colour){
    for(int deg=0; deg<360; deg++){
     500:	e28aa001 	add	r10, r10, #1
     504:	e35a0f5a 	cmp	r10, #360	; 0x168
     508:	1affffcc 	bne	440 <draw_circle+0x1c>
        draw_line(x, y, x + r*cos(deg), y + r*sin(deg), colour);
    }
}
     50c:	e28dd024 	add	sp, sp, #36	; 0x24
     510:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000514 <draw_frame>:
    draw_circle(x1, y1, radius-width, BLACK);
    draw_circle(x1+len, y1, radius, colour);//right
    draw_circle(x1+len, y1, radius-width, BLACK);
}

void draw_frame(int x0, int y0, int x1, int y1, short int colour){
     514:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     518:	e24dd008 	sub	sp, sp, #8
     51c:	e1a07000 	mov	r7, r0
     520:	e1a06001 	mov	r6, r1
     524:	e1a04002 	mov	r4, r2
     528:	e1a08003 	mov	r8, r3
     52c:	e1dd52f0 	ldrsh	r5, [sp, #32]
    draw_line(x0, y0, x0, y1, colour);//down
     530:	e58d5000 	str	r5, [sp]
     534:	e1a02000 	mov	r2, r0
     538:	ebffff7d 	bl	334 <draw_line>
    draw_line(x0, y1, x1, y1, colour);//right
     53c:	e58d5000 	str	r5, [sp]
     540:	e1a00007 	mov	r0, r7
     544:	e1a01008 	mov	r1, r8
     548:	e1a02004 	mov	r2, r4
     54c:	e1a03008 	mov	r3, r8
     550:	ebffff77 	bl	334 <draw_line>
    draw_line(x1, y1, x1, y0, colour);//up
     554:	e58d5000 	str	r5, [sp]
     558:	e1a00004 	mov	r0, r4
     55c:	e1a01008 	mov	r1, r8
     560:	e1a02004 	mov	r2, r4
     564:	e1a03006 	mov	r3, r6
     568:	ebffff71 	bl	334 <draw_line>
    draw_line(x1, y0, x0, y0, colour);//left
     56c:	e58d5000 	str	r5, [sp]
     570:	e1a00004 	mov	r0, r4
     574:	e1a01006 	mov	r1, r6
     578:	e1a02007 	mov	r2, r7
     57c:	e1a03006 	mov	r3, r6
     580:	ebffff6b 	bl	334 <draw_line>
}
     584:	e28dd008 	add	sp, sp, #8
     588:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000058c <draw_graph>:
    }
    plot_pixel(5, 5, RED);
    return;
}

void draw_graph(int x, int y, int size, float values[size], short int colour){
     58c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     590:	e24dd024 	sub	sp, sp, #36	; 0x24
     594:	e1a07000 	mov	r7, r0
     598:	e58d1014 	str	r1, [sp, #20]
     59c:	e1a0b002 	mov	r11, r2
     5a0:	e1a06003 	mov	r6, r3
     5a4:	e1dd44f8 	ldrsh	r4, [sp, #72]	; 0x48
    //bars of the graph
    draw_line(x, y + GRAPH_LEN, x, y - GRAPH_LEN, colour);//up-down
     5a8:	e2819032 	add	r9, r1, #50	; 0x32
     5ac:	e2415032 	sub	r5, r1, #50	; 0x32
     5b0:	e58d4000 	str	r4, [sp]
     5b4:	e1a01009 	mov	r1, r9
     5b8:	e1a02000 	mov	r2, r0
     5bc:	e1a03005 	mov	r3, r5
     5c0:	ebffff5b 	bl	334 <draw_line>
    draw_line(x, y, x + 2*GRAPH_LEN, y, colour);//horizontal
     5c4:	e2878064 	add	r8, r7, #100	; 0x64
     5c8:	e58d4000 	str	r4, [sp]
     5cc:	e1a00007 	mov	r0, r7
     5d0:	e59d1014 	ldr	r1, [sp, #20]
     5d4:	e1a02008 	mov	r2, r8
     5d8:	e1a03001 	mov	r3, r1
     5dc:	ebffff54 	bl	334 <draw_line>

    //arrows of the graph
    //top arrow
    draw_line(x, y - GRAPH_LEN, x-ARROW_LEN, y-GRAPH_LEN+ARROW_LEN, colour);
     5e0:	e2472002 	sub	r2, r7, #2
     5e4:	e58d200c 	str	r2, [sp, #12]
     5e8:	e59d3014 	ldr	r3, [sp, #20]
     5ec:	e243a030 	sub	r10, r3, #48	; 0x30
     5f0:	e58d4000 	str	r4, [sp]
     5f4:	e1a00007 	mov	r0, r7
     5f8:	e1a01005 	mov	r1, r5
     5fc:	e1a0300a 	mov	r3, r10
     600:	ebffff4b 	bl	334 <draw_line>
    draw_line(x, y - GRAPH_LEN, x+ARROW_LEN, y-GRAPH_LEN+ARROW_LEN, colour);
     604:	e287c002 	add	r12, r7, #2
     608:	e58dc010 	str	r12, [sp, #16]
     60c:	e58d4000 	str	r4, [sp]
     610:	e1a00007 	mov	r0, r7
     614:	e1a01005 	mov	r1, r5
     618:	e1a0200c 	mov	r2, r12
     61c:	e1a0300a 	mov	r3, r10
     620:	ebffff43 	bl	334 <draw_line>
    //right arrow
    draw_line(x + 2*GRAPH_LEN, y, x+2*GRAPH_LEN-ARROW_LEN, y-ARROW_LEN, colour);
     624:	e2875062 	add	r5, r7, #98	; 0x62
     628:	e58d4000 	str	r4, [sp]
     62c:	e1a00008 	mov	r0, r8
     630:	e59d1014 	ldr	r1, [sp, #20]
     634:	e1a02005 	mov	r2, r5
     638:	e2413002 	sub	r3, r1, #2
     63c:	ebffff3c 	bl	334 <draw_line>
    draw_line(x + 2*GRAPH_LEN, y, x+2*GRAPH_LEN-ARROW_LEN, y+ARROW_LEN, colour);
     640:	e58d4000 	str	r4, [sp]
     644:	e1a00008 	mov	r0, r8
     648:	e59d1014 	ldr	r1, [sp, #20]
     64c:	e1a02005 	mov	r2, r5
     650:	e2813002 	add	r3, r1, #2
     654:	ebffff36 	bl	334 <draw_line>
    //bottom arrow
    draw_line(x, y + GRAPH_LEN, x-ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);
     658:	e59d2014 	ldr	r2, [sp, #20]
     65c:	e2825030 	add	r5, r2, #48	; 0x30
     660:	e58d4000 	str	r4, [sp]
     664:	e1a00007 	mov	r0, r7
     668:	e1a01009 	mov	r1, r9
     66c:	e59d200c 	ldr	r2, [sp, #12]
     670:	e1a03005 	mov	r3, r5
     674:	ebffff2e 	bl	334 <draw_line>
    draw_line(x, y + GRAPH_LEN, x+ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);
     678:	e58d4000 	str	r4, [sp]
     67c:	e1a00007 	mov	r0, r7
     680:	e1a01009 	mov	r1, r9
     684:	e59d2010 	ldr	r2, [sp, #16]
     688:	e1a03005 	mov	r3, r5
     68c:	ebffff28 	bl	334 <draw_line>

    float max = 0.000001;
    //find the max in the array
    for(int i = 0; i < size-1; i++){
     690:	e24b3001 	sub	r3, r11, #1
     694:	e3530000 	cmp	r3, #0
     698:	da000013 	ble	6ec <draw_graph+0x160>
    }
    plot_pixel(5, 5, RED);
    return;
}

void draw_graph(int x, int y, int size, float values[size], short int colour){
     69c:	e1a09103 	lsl	r9, r3, #2
     6a0:	e3a04000 	mov	r4, #0
    draw_line(x + 2*GRAPH_LEN, y, x+2*GRAPH_LEN-ARROW_LEN, y+ARROW_LEN, colour);
    //bottom arrow
    draw_line(x, y + GRAPH_LEN, x-ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);
    draw_line(x, y + GRAPH_LEN, x+ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);

    float max = 0.000001;
     6a4:	e30357bd 	movw	r5, #14269	; 0x37bd
     6a8:	e3435586 	movt	r5, #13702	; 0x3586
    //find the max in the array
    for(int i = 0; i < size-1; i++){
        float check = values[i];
        if(check < 0) check = -check;
     6ac:	e3a0a000 	mov	r10, #0
    draw_line(x, y + GRAPH_LEN, x+ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);

    float max = 0.000001;
    //find the max in the array
    for(int i = 0; i < size-1; i++){
        float check = values[i];
     6b0:	e7968004 	ldr	r8, [r6, r4]
        if(check < 0) check = -check;
     6b4:	e1a00008 	mov	r0, r8
     6b8:	e1a0100a 	mov	r1, r10
     6bc:	eb0011ac 	bl	4d74 <__aeabi_fcmplt>
     6c0:	e3500000 	cmp	r0, #0
     6c4:	12888102 	addne	r8, r8, #-2147483648	; 0x80000000
        if(max < check) max = check;
     6c8:	e1a00008 	mov	r0, r8
     6cc:	e1a01005 	mov	r1, r5
     6d0:	eb0011b9 	bl	4dbc <__aeabi_fcmpgt>
     6d4:	e3500000 	cmp	r0, #0
     6d8:	11a05008 	movne	r5, r8
     6dc:	e2844004 	add	r4, r4, #4
    draw_line(x, y + GRAPH_LEN, x-ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);
    draw_line(x, y + GRAPH_LEN, x+ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);

    float max = 0.000001;
    //find the max in the array
    for(int i = 0; i < size-1; i++){
     6e0:	e1540009 	cmp	r4, r9
     6e4:	1afffff1 	bne	6b0 <draw_graph+0x124>
     6e8:	ea000001 	b	6f4 <draw_graph+0x168>
    draw_line(x + 2*GRAPH_LEN, y, x+2*GRAPH_LEN-ARROW_LEN, y+ARROW_LEN, colour);
    //bottom arrow
    draw_line(x, y + GRAPH_LEN, x-ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);
    draw_line(x, y + GRAPH_LEN, x+ARROW_LEN, y+GRAPH_LEN-ARROW_LEN, colour);

    float max = 0.000001;
     6ec:	e30357bd 	movw	r5, #14269	; 0x37bd
     6f0:	e3435586 	movt	r5, #13702	; 0x3586
        if(check < 0) check = -check;
        if(max < check) max = check;
    }

    //graph the values
    for(int i = 0; i < size-2; i++){
     6f4:	e24b3002 	sub	r3, r11, #2
     6f8:	e3530000 	cmp	r3, #0
     6fc:	da000036 	ble	7dc <draw_graph+0x250>
    }
    plot_pixel(5, 5, RED);
    return;
}

void draw_graph(int x, int y, int size, float values[size], short int colour){
     700:	e2466004 	sub	r6, r6, #4
     704:	e3a03062 	mov	r3, #98	; 0x62
     708:	e0030b93 	mul	r3, r3, r11
     70c:	e24330c4 	sub	r3, r3, #196	; 0xc4
     710:	e58d301c 	str	r3, [sp, #28]
     714:	e3a04000 	mov	r4, #0
        if(max < check) max = check;
    }

    //graph the values
    for(int i = 0; i < size-2; i++){
        draw_line((int)(x+i*(2*GRAPH_LEN-ARROW_LEN)/size), (int)(y-(GRAPH_LEN-ARROW_LEN)*(values[i]/max)),
     718:	e3a0a000 	mov	r10, #0
     71c:	e344a240 	movt	r10, #16960	; 0x4240
     720:	e3a03b3e 	mov	r3, #63488	; 0xf800
     724:	e34f3fff 	movt	r3, #65535	; 0xffff
     728:	e58d3018 	str	r3, [sp, #24]
     72c:	e1a08007 	mov	r8, r7
     730:	e1a07005 	mov	r7, r5
     734:	e1a00004 	mov	r0, r4
     738:	e1a0100b 	mov	r1, r11
     73c:	eb000ce5 	bl	3ad8 <__aeabi_idiv>
     740:	e0809008 	add	r9, r0, r8
     744:	e59d0014 	ldr	r0, [sp, #20]
     748:	eb001067 	bl	48ec <__aeabi_i2f>
     74c:	e1a05000 	mov	r5, r0
    }
    plot_pixel(5, 5, RED);
    return;
}

void draw_graph(int x, int y, int size, float values[size], short int colour){
     750:	e2844062 	add	r4, r4, #98	; 0x62
        if(max < check) max = check;
    }

    //graph the values
    for(int i = 0; i < size-2; i++){
        draw_line((int)(x+i*(2*GRAPH_LEN-ARROW_LEN)/size), (int)(y-(GRAPH_LEN-ARROW_LEN)*(values[i]/max)),
     754:	e5b60004 	ldr	r0, [r6, #4]!
     758:	e1a01007 	mov	r1, r7
     75c:	eb0010ff 	bl	4b60 <__aeabi_fdiv>
     760:	e1a0100a 	mov	r1, r10
     764:	eb001097 	bl	49c8 <__aeabi_fmul>
     768:	e1a01000 	mov	r1, r0
     76c:	e1a00005 	mov	r0, r5
     770:	eb000feb 	bl	4724 <__aeabi_fsub>
     774:	eb001196 	bl	4dd4 <__aeabi_f2iz>
     778:	e58d000c 	str	r0, [sp, #12]
                (int)(x+(i+1)*(2*GRAPH_LEN-ARROW_LEN)/size), (int)(y-(GRAPH_LEN-ARROW_LEN)*(values[i+1]/max)), RED);
     77c:	e1a00004 	mov	r0, r4
     780:	e1a0100b 	mov	r1, r11
     784:	eb000cd3 	bl	3ad8 <__aeabi_idiv>
        if(max < check) max = check;
    }

    //graph the values
    for(int i = 0; i < size-2; i++){
        draw_line((int)(x+i*(2*GRAPH_LEN-ARROW_LEN)/size), (int)(y-(GRAPH_LEN-ARROW_LEN)*(values[i]/max)),
     788:	e0800008 	add	r0, r0, r8
     78c:	e58d0010 	str	r0, [sp, #16]
                (int)(x+(i+1)*(2*GRAPH_LEN-ARROW_LEN)/size), (int)(y-(GRAPH_LEN-ARROW_LEN)*(values[i+1]/max)), RED);
     790:	e5960004 	ldr	r0, [r6, #4]
     794:	e1a01007 	mov	r1, r7
     798:	eb0010f0 	bl	4b60 <__aeabi_fdiv>
     79c:	e1a0100a 	mov	r1, r10
     7a0:	eb001088 	bl	49c8 <__aeabi_fmul>
     7a4:	e1a01000 	mov	r1, r0
     7a8:	e1a00005 	mov	r0, r5
     7ac:	eb000fdc 	bl	4724 <__aeabi_fsub>
        if(max < check) max = check;
    }

    //graph the values
    for(int i = 0; i < size-2; i++){
        draw_line((int)(x+i*(2*GRAPH_LEN-ARROW_LEN)/size), (int)(y-(GRAPH_LEN-ARROW_LEN)*(values[i]/max)),
     7b0:	eb001187 	bl	4dd4 <__aeabi_f2iz>
     7b4:	e1a03000 	mov	r3, r0
     7b8:	e59dc018 	ldr	r12, [sp, #24]
     7bc:	e58dc000 	str	r12, [sp]
     7c0:	e1a00009 	mov	r0, r9
     7c4:	e59d100c 	ldr	r1, [sp, #12]
     7c8:	e59d2010 	ldr	r2, [sp, #16]
     7cc:	ebfffed8 	bl	334 <draw_line>
        if(check < 0) check = -check;
        if(max < check) max = check;
    }

    //graph the values
    for(int i = 0; i < size-2; i++){
     7d0:	e59d201c 	ldr	r2, [sp, #28]
     7d4:	e1540002 	cmp	r4, r2
     7d8:	1affffd5 	bne	734 <draw_graph+0x1a8>
        draw_line((int)(x+i*(2*GRAPH_LEN-ARROW_LEN)/size), (int)(y-(GRAPH_LEN-ARROW_LEN)*(values[i]/max)),
                (int)(x+(i+1)*(2*GRAPH_LEN-ARROW_LEN)/size), (int)(y-(GRAPH_LEN-ARROW_LEN)*(values[i+1]/max)), RED);
    }
}
     7dc:	e28dd024 	add	sp, sp, #36	; 0x24
     7e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000007e4 <draw_rect>:
    draw_line(x0, y1, x1, y1, colour);//right
    draw_line(x1, y1, x1, y0, colour);//up
    draw_line(x1, y0, x0, y0, colour);//left
}

void draw_rect(int x0, int y0, int x1, int y1, short int colour){
     7e4:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     7e8:	e1a08001 	mov	r8, r1
     7ec:	e1a0a002 	mov	r10, r2
     7f0:	e1a06003 	mov	r6, r3
     7f4:	e1dd72f0 	ldrsh	r7, [sp, #32]
    for(int x = x0; x<=x1; x++){
     7f8:	e1500002 	cmp	r0, r2
     7fc:	c8bd85f8 	popgt	{r3, r4, r5, r6, r7, r8, r10, pc}
     800:	ea00000a 	b	830 <draw_rect+0x4c>
        for (int y = y0; y<=y1; y++) {
            plot_pixel(x, y, colour);
     804:	e1a00005 	mov	r0, r5
     808:	e1a01004 	mov	r1, r4
     80c:	e1a02007 	mov	r2, r7
     810:	ebfffeb7 	bl	2f4 <plot_pixel>
    draw_line(x1, y0, x0, y0, colour);//left
}

void draw_rect(int x0, int y0, int x1, int y1, short int colour){
    for(int x = x0; x<=x1; x++){
        for (int y = y0; y<=y1; y++) {
     814:	e2844001 	add	r4, r4, #1
     818:	e1560004 	cmp	r6, r4
     81c:	aafffff8 	bge	804 <draw_rect+0x20>
    draw_line(x1, y1, x1, y0, colour);//up
    draw_line(x1, y0, x0, y0, colour);//left
}

void draw_rect(int x0, int y0, int x1, int y1, short int colour){
    for(int x = x0; x<=x1; x++){
     820:	e2855001 	add	r5, r5, #1
     824:	e15a0005 	cmp	r10, r5
     828:	aa000001 	bge	834 <draw_rect+0x50>
     82c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
     830:	e1a05000 	mov	r5, r0
        for (int y = y0; y<=y1; y++) {
     834:	e1580006 	cmp	r8, r6
     838:	d1a04008 	movle	r4, r8
     83c:	dafffff0 	ble	804 <draw_rect+0x20>
     840:	eafffff6 	b	820 <draw_rect+0x3c>

00000844 <draw_switches>:
    for (int x = 0; x < 79; x++)
        for(int y = 0; y < 59; y++)
            write_char(x, y, '\0');
}

void draw_switches(int len, int x0, int y0, int x1, int y1, bool sw1, bool sw2, int colour){
     844:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     848:	e24dd014 	sub	sp, sp, #20
     84c:	e1a07000 	mov	r7, r0
     850:	e1a06001 	mov	r6, r1
     854:	e1a08002 	mov	r8, r2
     858:	e1a05003 	mov	r5, r3
    if(sw1){
     85c:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
     860:	e3530000 	cmp	r3, #0
     864:	0a000008 	beq	88c <draw_switches+0x48>
        draw_rect(x0, y0-3, x0 + len, y0+3, colour);
     868:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
     86c:	e6bf3072 	sxth	r3, r2
     870:	e58d3000 	str	r3, [sp]
     874:	e1a00001 	mov	r0, r1
     878:	e2481003 	sub	r1, r8, #3
     87c:	e0862007 	add	r2, r6, r7
     880:	e2883003 	add	r3, r8, #3
     884:	ebffffd6 	bl	7e4 <draw_rect>
     888:	ea00001d 	b	904 <draw_switches+0xc0>
    }else{
        for(int i = 0; i<4; i++)
            draw_line(x0, y0+i, (x0 + len)*4/5, y0+i + len/3, colour);
     88c:	e0813000 	add	r3, r1, r0
     890:	e1a03103 	lsl	r3, r3, #2
     894:	e3069667 	movw	r9, #26215	; 0x6667
     898:	e3469666 	movt	r9, #26214	; 0x6666
     89c:	e0c9c399 	smull	r12, r9, r9, r3
     8a0:	e1a03fc3 	asr	r3, r3, #31
     8a4:	e06390c9 	rsb	r9, r3, r9, asr #1
     8a8:	e305a556 	movw	r10, #21846	; 0x5556
     8ac:	e345a555 	movt	r10, #21845	; 0x5555
     8b0:	e0ca209a 	smull	r2, r10, r10, r0
     8b4:	e04aafc0 	sub	r10, r10, r0, asr #31
    for (int x = 0; x < 79; x++)
        for(int y = 0; y < 59; y++)
            write_char(x, y, '\0');
}

void draw_switches(int len, int x0, int y0, int x1, int y1, bool sw1, bool sw2, int colour){
     8b8:	e088400a 	add	r4, r8, r10
     8bc:	e1a0b00a 	mov	r11, r10
     8c0:	e28aa004 	add	r10, r10, #4
     8c4:	e08aa008 	add	r10, r10, r8
    if(sw1){
        draw_rect(x0, y0-3, x0 + len, y0+3, colour);
    }else{
        for(int i = 0; i<4; i++)
            draw_line(x0, y0+i, (x0 + len)*4/5, y0+i + len/3, colour);
     8c8:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
     8cc:	e6bf3073 	sxth	r3, r3
     8d0:	e58d3008 	str	r3, [sp, #8]
     8d4:	e58d500c 	str	r5, [sp, #12]
     8d8:	e1a05003 	mov	r5, r3
     8dc:	e58d5000 	str	r5, [sp]
     8e0:	e1a00006 	mov	r0, r6
     8e4:	e06b1004 	rsb	r1, r11, r4
     8e8:	e1a02009 	mov	r2, r9
     8ec:	e1a03004 	mov	r3, r4
     8f0:	ebfffe8f 	bl	334 <draw_line>
     8f4:	e2844001 	add	r4, r4, #1

void draw_switches(int len, int x0, int y0, int x1, int y1, bool sw1, bool sw2, int colour){
    if(sw1){
        draw_rect(x0, y0-3, x0 + len, y0+3, colour);
    }else{
        for(int i = 0; i<4; i++)
     8f8:	e154000a 	cmp	r4, r10
     8fc:	1afffff6 	bne	8dc <draw_switches+0x98>
     900:	e59d500c 	ldr	r5, [sp, #12]
            draw_line(x0, y0+i, (x0 + len)*4/5, y0+i + len/3, colour);
    }

    if(sw2){
     904:	e5dd3040 	ldrb	r3, [sp, #64]	; 0x40
     908:	e3530000 	cmp	r3, #0
     90c:	0a00000a 	beq	93c <draw_switches+0xf8>
        draw_rect(x1, y1-3, x1 + len, y1+3, colour);
     910:	e59dc044 	ldr	r12, [sp, #68]	; 0x44
     914:	e6bf307c 	sxth	r3, r12
     918:	e58d3000 	str	r3, [sp]
     91c:	e1a00005 	mov	r0, r5
     920:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
     924:	e2421003 	sub	r1, r2, #3
     928:	e0852007 	add	r2, r5, r7
     92c:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
     930:	e28c3003 	add	r3, r12, #3
     934:	ebffffaa 	bl	7e4 <draw_rect>
     938:	ea00001e 	b	9b8 <draw_switches+0x174>
    }else{
        for(int i = 0; i<4; i++)
            draw_line(x1, y1+i, (x1 + len)*4/5, y1+i + len/3, colour);
     93c:	e0853007 	add	r3, r5, r7
     940:	e1a03103 	lsl	r3, r3, #2
     944:	e306b667 	movw	r11, #26215	; 0x6667
     948:	e346b666 	movt	r11, #26214	; 0x6666
     94c:	e0cb239b 	smull	r2, r11, r11, r3
     950:	e1a03fc3 	asr	r3, r3, #31
     954:	e063b0cb 	rsb	r11, r3, r11, asr #1
     958:	e305a556 	movw	r10, #21846	; 0x5556
     95c:	e345a555 	movt	r10, #21845	; 0x5555
     960:	e0ca379a 	smull	r3, r10, r10, r7
     964:	e04aafc7 	sub	r10, r10, r7, asr #31
    for (int x = 0; x < 79; x++)
        for(int y = 0; y < 59; y++)
            write_char(x, y, '\0');
}

void draw_switches(int len, int x0, int y0, int x1, int y1, bool sw1, bool sw2, int colour){
     968:	e59dc038 	ldr	r12, [sp, #56]	; 0x38
     96c:	e08c400a 	add	r4, r12, r10
     970:	e1a0900a 	mov	r9, r10
     974:	e28aa004 	add	r10, r10, #4
     978:	e08aa00c 	add	r10, r10, r12

    if(sw2){
        draw_rect(x1, y1-3, x1 + len, y1+3, colour);
    }else{
        for(int i = 0; i<4; i++)
            draw_line(x1, y1+i, (x1 + len)*4/5, y1+i + len/3, colour);
     97c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
     980:	e6bf2072 	sxth	r2, r2
     984:	e58d2008 	str	r2, [sp, #8]
     988:	e58d600c 	str	r6, [sp, #12]
     98c:	e1a06002 	mov	r6, r2
     990:	e58d6000 	str	r6, [sp]
     994:	e1a00005 	mov	r0, r5
     998:	e0691004 	rsb	r1, r9, r4
     99c:	e1a0200b 	mov	r2, r11
     9a0:	e1a03004 	mov	r3, r4
     9a4:	ebfffe62 	bl	334 <draw_line>
     9a8:	e2844001 	add	r4, r4, #1
    }

    if(sw2){
        draw_rect(x1, y1-3, x1 + len, y1+3, colour);
    }else{
        for(int i = 0; i<4; i++)
     9ac:	e154000a 	cmp	r4, r10
     9b0:	1afffff6 	bne	990 <draw_switches+0x14c>
     9b4:	e59d600c 	ldr	r6, [sp, #12]
    }

    //circle bois 1
    int radius = 7;
    int width = 3;
    draw_circle(x0, y0, radius, colour);//left
     9b8:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
     9bc:	e6bf4073 	sxth	r4, r3
     9c0:	e1a00006 	mov	r0, r6
     9c4:	e1a01008 	mov	r1, r8
     9c8:	e3a02007 	mov	r2, #7
     9cc:	e1a03004 	mov	r3, r4
     9d0:	ebfffe93 	bl	424 <draw_circle>
    draw_circle(x0, y0, radius-width, BLACK);
     9d4:	e1a00006 	mov	r0, r6
     9d8:	e1a01008 	mov	r1, r8
     9dc:	e3a02004 	mov	r2, #4
     9e0:	e3a03000 	mov	r3, #0
     9e4:	ebfffe8e 	bl	424 <draw_circle>
    draw_circle(x0+len, y0, radius, colour);//right
     9e8:	e0866007 	add	r6, r6, r7
     9ec:	e1a00006 	mov	r0, r6
     9f0:	e1a01008 	mov	r1, r8
     9f4:	e3a02007 	mov	r2, #7
     9f8:	e1a03004 	mov	r3, r4
     9fc:	ebfffe88 	bl	424 <draw_circle>
    draw_circle(x0+len, y0, radius-width, BLACK);
     a00:	e1a00006 	mov	r0, r6
     a04:	e1a01008 	mov	r1, r8
     a08:	e3a02004 	mov	r2, #4
     a0c:	e3a03000 	mov	r3, #0
     a10:	ebfffe83 	bl	424 <draw_circle>

    //circle bois 2
    draw_circle(x1, y1, radius, colour);//left
     a14:	e1a00005 	mov	r0, r5
     a18:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
     a1c:	e3a02007 	mov	r2, #7
     a20:	e1a03004 	mov	r3, r4
     a24:	ebfffe7e 	bl	424 <draw_circle>
    draw_circle(x1, y1, radius-width, BLACK);
     a28:	e1a00005 	mov	r0, r5
     a2c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
     a30:	e3a02004 	mov	r2, #4
     a34:	e3a03000 	mov	r3, #0
     a38:	ebfffe79 	bl	424 <draw_circle>
    draw_circle(x1+len, y1, radius, colour);//right
     a3c:	e0855007 	add	r5, r5, r7
     a40:	e1a00005 	mov	r0, r5
     a44:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
     a48:	e3a02007 	mov	r2, #7
     a4c:	e1a03004 	mov	r3, r4
     a50:	ebfffe73 	bl	424 <draw_circle>
    draw_circle(x1+len, y1, radius-width, BLACK);
     a54:	e1a00005 	mov	r0, r5
     a58:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
     a5c:	e3a02004 	mov	r2, #4
     a60:	e3a03000 	mov	r3, #0
     a64:	ebfffe6e 	bl	424 <draw_circle>
}
     a68:	e28dd014 	add	sp, sp, #20
     a6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000a70 <draw_circuit>:
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

void draw_circuit(int x, int y, short int colour, bool sw1, bool sw2){
     a70:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a74:	e24dd034 	sub	sp, sp, #52	; 0x34
     a78:	e1a04000 	mov	r4, r0
     a7c:	e1a0b001 	mov	r11, r1
     a80:	e58d3024 	str	r3, [sp, #36]	; 0x24

    int width = 4;
    int ctr = 50;
    //source
    int radius = 15;
    draw_circle(x, y, radius, WHITE);
     a84:	e3a0200f 	mov	r2, #15
     a88:	e3e03000 	mvn	r3, #0
     a8c:	ebfffe64 	bl	424 <draw_circle>
    draw_circle(x, y, radius-width, BLACK);
     a90:	e1a00004 	mov	r0, r4
     a94:	e1a0100b 	mov	r1, r11
     a98:	e3a0200b 	mov	r2, #11
     a9c:	e3a03000 	mov	r3, #0
     aa0:	ebfffe5f 	bl	424 <draw_circle>
    //plus
    draw_rect(x-1, y-3, x+1, y+3, RED);
     aa4:	e2443001 	sub	r3, r4, #1
     aa8:	e58d3018 	str	r3, [sp, #24]
     aac:	e2843001 	add	r3, r4, #1
     ab0:	e58d301c 	str	r3, [sp, #28]
     ab4:	e28b6003 	add	r6, r11, #3
     ab8:	e3a05b3e 	mov	r5, #63488	; 0xf800
     abc:	e34f5fff 	movt	r5, #65535	; 0xffff
     ac0:	e58d5000 	str	r5, [sp]
     ac4:	e59d0018 	ldr	r0, [sp, #24]
     ac8:	e24b1003 	sub	r1, r11, #3
     acc:	e1a02003 	mov	r2, r3
     ad0:	e1a03006 	mov	r3, r6
     ad4:	ebffff42 	bl	7e4 <draw_rect>
    draw_rect(x-3, y-1, x+3, y+1, RED);
     ad8:	e244a003 	sub	r10, r4, #3
     adc:	e2847003 	add	r7, r4, #3
     ae0:	e28b8001 	add	r8, r11, #1
     ae4:	e58d5000 	str	r5, [sp]
     ae8:	e1a0000a 	mov	r0, r10
     aec:	e24b1001 	sub	r1, r11, #1
     af0:	e1a02007 	mov	r2, r7
     af4:	e1a03008 	mov	r3, r8
     af8:	ebffff39 	bl	7e4 <draw_rect>
    //minus
    draw_rect(x-3, y+1, x+3, y+3, BLUE);
     afc:	e3a0301f 	mov	r3, #31
     b00:	e58d3000 	str	r3, [sp]
     b04:	e1a0000a 	mov	r0, r10
     b08:	e1a01008 	mov	r1, r8
     b0c:	e1a02007 	mov	r2, r7
     b10:	e1a03006 	mov	r3, r6
     b14:	ebffff32 	bl	7e4 <draw_rect>

    //capacitor
    int cap_x = (x+ctr -5*width);
     b18:	e284501e 	add	r5, r4, #30
    draw_rect(cap_x, y-2*width/2, cap_x + 10*width, y-width/2, WHITE);
     b1c:	e2843046 	add	r3, r4, #70	; 0x46
     b20:	e58d3014 	str	r3, [sp, #20]
     b24:	e3e06000 	mvn	r6, #0
     b28:	e58d6000 	str	r6, [sp]
     b2c:	e1a00005 	mov	r0, r5
     b30:	e24b1004 	sub	r1, r11, #4
     b34:	e1a02003 	mov	r2, r3
     b38:	e24b3002 	sub	r3, r11, #2
     b3c:	ebffff28 	bl	7e4 <draw_rect>
    draw_rect(cap_x, y+width/2, cap_x + 10*width, y+2*width/2, WHITE);
     b40:	e58d6000 	str	r6, [sp]
     b44:	e1a00005 	mov	r0, r5
     b48:	e28b1002 	add	r1, r11, #2
     b4c:	e59d2014 	ldr	r2, [sp, #20]
     b50:	e28b3004 	add	r3, r11, #4
     b54:	ebffff22 	bl	7e4 <draw_rect>

    //resistor
    int diag_x = 10;
    int diag_y = 5;
    int res_x = (x+2*ctr);
     b58:	e2843064 	add	r3, r4, #100	; 0x64
     b5c:	e58d3020 	str	r3, [sp, #32]
    int res_y = y-diag_x;//resistor goes down 40 pixels from here
     b60:	e24b500a 	sub	r5, r11, #10
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

void draw_circuit(int x, int y, short int colour, bool sw1, bool sw2){
     b64:	e24ba007 	sub	r10, r11, #7
    int diag_y = 5;
    int res_x = (x+2*ctr);
    int res_y = y-diag_x;//resistor goes down 40 pixels from here

    for(int dec = 0; dec<5; dec++){//make the resistor lines thicker
        draw_line(res_x, res_y, res_x-diag_x, res_y+diag_y, WHITE);//from the line out: x- y+
     b68:	e284805a 	add	r8, r4, #90	; 0x5a
        draw_line(res_x-diag_x, res_y+diag_y, res_x+diag_x, res_y+2*diag_y, WHITE);//x+ y+
     b6c:	e284706e 	add	r7, r4, #110	; 0x6e
     b70:	e58d4028 	str	r4, [sp, #40]	; 0x28
     b74:	e1a04003 	mov	r4, r3
     b78:	e58db02c 	str	r11, [sp, #44]	; 0x2c
     b7c:	e1a0b00a 	mov	r11, r10
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

void draw_circuit(int x, int y, short int colour, bool sw1, bool sw2){
     b80:	e2859005 	add	r9, r5, #5
    int diag_y = 5;
    int res_x = (x+2*ctr);
    int res_y = y-diag_x;//resistor goes down 40 pixels from here

    for(int dec = 0; dec<5; dec++){//make the resistor lines thicker
        draw_line(res_x, res_y, res_x-diag_x, res_y+diag_y, WHITE);//from the line out: x- y+
     b84:	e58d6000 	str	r6, [sp]
     b88:	e1a00004 	mov	r0, r4
     b8c:	e1a01005 	mov	r1, r5
     b90:	e1a02008 	mov	r2, r8
     b94:	e1a03009 	mov	r3, r9
     b98:	ebfffde5 	bl	334 <draw_line>
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

void draw_circuit(int x, int y, short int colour, bool sw1, bool sw2){
     b9c:	e285a00a 	add	r10, r5, #10
    int res_x = (x+2*ctr);
    int res_y = y-diag_x;//resistor goes down 40 pixels from here

    for(int dec = 0; dec<5; dec++){//make the resistor lines thicker
        draw_line(res_x, res_y, res_x-diag_x, res_y+diag_y, WHITE);//from the line out: x- y+
        draw_line(res_x-diag_x, res_y+diag_y, res_x+diag_x, res_y+2*diag_y, WHITE);//x+ y+
     ba0:	e58d6000 	str	r6, [sp]
     ba4:	e1a00008 	mov	r0, r8
     ba8:	e1a01009 	mov	r1, r9
     bac:	e1a02007 	mov	r2, r7
     bb0:	e1a0300a 	mov	r3, r10
     bb4:	ebfffdde 	bl	334 <draw_line>
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

void draw_circuit(int x, int y, short int colour, bool sw1, bool sw2){
     bb8:	e285900f 	add	r9, r5, #15
    int res_y = y-diag_x;//resistor goes down 40 pixels from here

    for(int dec = 0; dec<5; dec++){//make the resistor lines thicker
        draw_line(res_x, res_y, res_x-diag_x, res_y+diag_y, WHITE);//from the line out: x- y+
        draw_line(res_x-diag_x, res_y+diag_y, res_x+diag_x, res_y+2*diag_y, WHITE);//x+ y+
        draw_line(res_x+diag_x, res_y+2*diag_y, res_x-diag_x, res_y+3*diag_y, WHITE);//x- y+
     bbc:	e58d6000 	str	r6, [sp]
     bc0:	e1a00007 	mov	r0, r7
     bc4:	e1a0100a 	mov	r1, r10
     bc8:	e1a02008 	mov	r2, r8
     bcc:	e1a03009 	mov	r3, r9
     bd0:	ebfffdd7 	bl	334 <draw_line>
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    }
}

void draw_circuit(int x, int y, short int colour, bool sw1, bool sw2){
     bd4:	e285a014 	add	r10, r5, #20

    for(int dec = 0; dec<5; dec++){//make the resistor lines thicker
        draw_line(res_x, res_y, res_x-diag_x, res_y+diag_y, WHITE);//from the line out: x- y+
        draw_line(res_x-diag_x, res_y+diag_y, res_x+diag_x, res_y+2*diag_y, WHITE);//x+ y+
        draw_line(res_x+diag_x, res_y+2*diag_y, res_x-diag_x, res_y+3*diag_y, WHITE);//x- y+
        draw_line(res_x-diag_x, res_y+3*diag_y, res_x+diag_x, res_y+4*diag_y, WHITE);//x+ y+
     bd8:	e58d6000 	str	r6, [sp]
     bdc:	e1a00008 	mov	r0, r8
     be0:	e1a01009 	mov	r1, r9
     be4:	e1a02007 	mov	r2, r7
     be8:	e1a0300a 	mov	r3, r10
     bec:	ebfffdd0 	bl	334 <draw_line>
        draw_line(res_x+diag_x, res_y+4*diag_y, res_x, res_y+5*diag_y, WHITE);//back into the line: x- y+
     bf0:	e58d6000 	str	r6, [sp]
     bf4:	e1a00007 	mov	r0, r7
     bf8:	e1a0100a 	mov	r1, r10
     bfc:	e1a02004 	mov	r2, r4
     c00:	e2853019 	add	r3, r5, #25
     c04:	ebfffdca 	bl	334 <draw_line>
        dec++;
        res_y++;
     c08:	e2855001 	add	r5, r5, #1
    int diag_x = 10;
    int diag_y = 5;
    int res_x = (x+2*ctr);
    int res_y = y-diag_x;//resistor goes down 40 pixels from here

    for(int dec = 0; dec<5; dec++){//make the resistor lines thicker
     c0c:	e155000b 	cmp	r5, r11
     c10:	1affffda 	bne	b80 <draw_circuit+0x110>
     c14:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
     c18:	e59db02c 	ldr	r11, [sp, #44]	; 0x2c
        draw_line(res_x+diag_x, res_y+4*diag_y, res_x, res_y+5*diag_y, WHITE);//back into the line: x- y+
        dec++;
        res_y++;
    }
    //switches
    draw_switches(20, x + 10, y-ctr+20, x + 20 + ctr, y - ctr+20, sw1, sw2, WHITE);
     c1c:	e24b601e 	sub	r6, r11, #30
     c20:	e58d6000 	str	r6, [sp]
     c24:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
     c28:	e58d3004 	str	r3, [sp, #4]
     c2c:	e5dd3058 	ldrb	r3, [sp, #88]	; 0x58
     c30:	e58d3008 	str	r3, [sp, #8]
     c34:	e30f3fff 	movw	r3, #65535	; 0xffff
     c38:	e58d300c 	str	r3, [sp, #12]
     c3c:	e3a00014 	mov	r0, #20
     c40:	e284100a 	add	r1, r4, #10
     c44:	e1a02006 	mov	r2, r6
     c48:	e59d3014 	ldr	r3, [sp, #20]
     c4c:	ebfffefc 	bl	844 <draw_switches>

    //ground
    int gnd_ctr = x + ctr;
    int gnd_y = y+ctr-20;
     c50:	e28b701e 	add	r7, r11, #30
    draw_rect(gnd_ctr-width/2, gnd_y, gnd_ctr+width/2, gnd_y+width/2, WHITE);//stem
     c54:	e3e05000 	mvn	r5, #0
     c58:	e58d5000 	str	r5, [sp]
     c5c:	e2840030 	add	r0, r4, #48	; 0x30
     c60:	e1a01007 	mov	r1, r7
     c64:	e2842034 	add	r2, r4, #52	; 0x34
     c68:	e28b3020 	add	r3, r11, #32
     c6c:	ebfffedc 	bl	7e4 <draw_rect>
    draw_rect(gnd_ctr-4*width, gnd_y+width, gnd_ctr+4*width, gnd_y+3/2*width, WHITE);//1st layer
     c70:	e2849022 	add	r9, r4, #34	; 0x22
     c74:	e28b3022 	add	r3, r11, #34	; 0x22
     c78:	e58d5000 	str	r5, [sp]
     c7c:	e1a00009 	mov	r0, r9
     c80:	e1a01003 	mov	r1, r3
     c84:	e2842042 	add	r2, r4, #66	; 0x42
     c88:	ebfffed5 	bl	7e4 <draw_rect>
    draw_rect(gnd_ctr-2*width, gnd_y+2*width, gnd_ctr+2*width, gnd_y+5/2*width, WHITE);//2nd
     c8c:	e28b3026 	add	r3, r11, #38	; 0x26
     c90:	e58d5000 	str	r5, [sp]
     c94:	e284002a 	add	r0, r4, #42	; 0x2a
     c98:	e1a01003 	mov	r1, r3
     c9c:	e284203a 	add	r2, r4, #58	; 0x3a
     ca0:	ebfffecf 	bl	7e4 <draw_rect>
    draw_rect(gnd_ctr-width, gnd_y+3*width, gnd_ctr+width, gnd_y+7/2*width, WHITE);//3rd
     ca4:	e28b302a 	add	r3, r11, #42	; 0x2a
     ca8:	e58d5000 	str	r5, [sp]
     cac:	e284002e 	add	r0, r4, #46	; 0x2e
     cb0:	e1a01003 	mov	r1, r3
     cb4:	e2842036 	add	r2, r4, #54	; 0x36
     cb8:	ebfffec9 	bl	7e4 <draw_rect>

    //wires
    res_y-=5;
    int w = width/4;
    draw_rect(x-w, y-ctr+20, x+w, y-radius, WHITE);//source up
     cbc:	e58d5000 	str	r5, [sp]
     cc0:	e59d0018 	ldr	r0, [sp, #24]
     cc4:	e1a01006 	mov	r1, r6
     cc8:	e59d201c 	ldr	r2, [sp, #28]
     ccc:	e24b300f 	sub	r3, r11, #15
     cd0:	ebfffec3 	bl	7e4 <draw_rect>
    draw_rect(x, y-ctr+20-w, x+4, y-ctr+20+w, WHITE);//source top right
     cd4:	e24ba01f 	sub	r10, r11, #31
     cd8:	e24b801d 	sub	r8, r11, #29
     cdc:	e58d5000 	str	r5, [sp]
     ce0:	e1a00004 	mov	r0, r4
     ce4:	e1a0100a 	mov	r1, r10
     ce8:	e2842004 	add	r2, r4, #4
     cec:	e1a03008 	mov	r3, r8
     cf0:	ebfffebb 	bl	7e4 <draw_rect>
    draw_rect(x+34, y-ctr+20-w, x+64, y-ctr+20+w, WHITE);//right of first switch
     cf4:	e58d5000 	str	r5, [sp]
     cf8:	e1a00009 	mov	r0, r9
     cfc:	e1a0100a 	mov	r1, r10
     d00:	e2842040 	add	r2, r4, #64	; 0x40
     d04:	e1a03008 	mov	r3, r8
     d08:	ebfffeb5 	bl	7e4 <draw_rect>
    draw_rect(x+94, y-ctr+20-w, res_x, y-ctr+20+w, WHITE);//right of second switch
     d0c:	e58d5000 	str	r5, [sp]
     d10:	e284005e 	add	r0, r4, #94	; 0x5e
     d14:	e1a0100a 	mov	r1, r10
     d18:	e59d2020 	ldr	r2, [sp, #32]
     d1c:	e1a03008 	mov	r3, r8
     d20:	ebfffeaf 	bl	7e4 <draw_rect>
    draw_rect(res_x-w, y-ctr+20, res_x+w, res_y+3, WHITE);//down to resistor
     d24:	e284a063 	add	r10, r4, #99	; 0x63
     d28:	e2848065 	add	r8, r4, #101	; 0x65
     d2c:	e58d5000 	str	r5, [sp]
     d30:	e1a0000a 	mov	r0, r10
     d34:	e1a01006 	mov	r1, r6
     d38:	e1a02008 	mov	r2, r8
     d3c:	e24b3009 	sub	r3, r11, #9
     d40:	ebfffea7 	bl	7e4 <draw_rect>
    draw_rect(x+ctr-w, y-ctr+20, x+ctr+w, y-5, WHITE);//down to capacitor
     d44:	e2843031 	add	r3, r4, #49	; 0x31
     d48:	e58d3014 	str	r3, [sp, #20]
     d4c:	e2849033 	add	r9, r4, #51	; 0x33
     d50:	e58d5000 	str	r5, [sp]
     d54:	e1a00003 	mov	r0, r3
     d58:	e1a01006 	mov	r1, r6
     d5c:	e1a02009 	mov	r2, r9
     d60:	e24b3005 	sub	r3, r11, #5
     d64:	ebfffe9e 	bl	7e4 <draw_rect>
    draw_rect(x+ctr-w, y+5, x+ctr+w, gnd_y, WHITE);//down from capacitor
     d68:	e58d5000 	str	r5, [sp]
     d6c:	e59d0014 	ldr	r0, [sp, #20]
     d70:	e28b1005 	add	r1, r11, #5
     d74:	e1a02009 	mov	r2, r9
     d78:	e1a03007 	mov	r3, r7
     d7c:	ebfffe98 	bl	7e4 <draw_rect>
    draw_rect(res_x-w, res_y+5*diag_y, res_x+w, gnd_y, WHITE);//down from resistor
     d80:	e58d5000 	str	r5, [sp]
     d84:	e1a0000a 	mov	r0, r10
     d88:	e28b100d 	add	r1, r11, #13
     d8c:	e1a02008 	mov	r2, r8
     d90:	e1a03007 	mov	r3, r7
     d94:	ebfffe92 	bl	7e4 <draw_rect>
    draw_rect(x, gnd_y-w, res_x, gnd_y+w, WHITE);//across the bottom
     d98:	e58d5000 	str	r5, [sp]
     d9c:	e1a00004 	mov	r0, r4
     da0:	e28b101d 	add	r1, r11, #29
     da4:	e59d2020 	ldr	r2, [sp, #32]
     da8:	e28b301f 	add	r3, r11, #31
     dac:	ebfffe8c 	bl	7e4 <draw_rect>
    draw_rect(x-w, y+radius, x+w, gnd_y, WHITE);//up to source
     db0:	e58d5000 	str	r5, [sp]
     db4:	e59d0018 	ldr	r0, [sp, #24]
     db8:	e28b100f 	add	r1, r11, #15
     dbc:	e59d201c 	ldr	r2, [sp, #28]
     dc0:	e1a03007 	mov	r3, r7
     dc4:	ebfffe86 	bl	7e4 <draw_rect>

}
     dc8:	e28dd034 	add	sp, sp, #52	; 0x34
     dcc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000dd0 <clear_screen>:

void clear_screen(){
     dd0:	e92d4070 	push	{r4, r5, r6, lr}
    short int line_colour = BLACK;
    for (int x = 0; x < X_DIM; x++ ){
     dd4:	e3a05000 	mov	r5, #0
    draw_rect(x, gnd_y-w, res_x, gnd_y+w, WHITE);//across the bottom
    draw_rect(x-w, y+radius, x+w, gnd_y, WHITE);//up to source

}

void clear_screen(){
     dd8:	e1a06005 	mov	r6, r5
     ddc:	ea000009 	b	e08 <clear_screen+0x38>
    short int line_colour = BLACK;
    for (int x = 0; x < X_DIM; x++ ){
    	for (int y = 0; y < Y_DIM ; y++ ){
        	plot_pixel(x, y, line_colour);
     de0:	e1a00005 	mov	r0, r5
     de4:	e1a01004 	mov	r1, r4
     de8:	e1a02006 	mov	r2, r6
     dec:	ebfffd40 	bl	2f4 <plot_pixel>
}

void clear_screen(){
    short int line_colour = BLACK;
    for (int x = 0; x < X_DIM; x++ ){
    	for (int y = 0; y < Y_DIM ; y++ ){
     df0:	e2844001 	add	r4, r4, #1
     df4:	e35400f0 	cmp	r4, #240	; 0xf0
     df8:	1afffff8 	bne	de0 <clear_screen+0x10>

}

void clear_screen(){
    short int line_colour = BLACK;
    for (int x = 0; x < X_DIM; x++ ){
     dfc:	e2855001 	add	r5, r5, #1
     e00:	e3550d05 	cmp	r5, #320	; 0x140
     e04:	0a000001 	beq	e10 <clear_screen+0x40>
    draw_rect(x, gnd_y-w, res_x, gnd_y+w, WHITE);//across the bottom
    draw_rect(x-w, y+radius, x+w, gnd_y, WHITE);//up to source

}

void clear_screen(){
     e08:	e1a04006 	mov	r4, r6
     e0c:	eafffff3 	b	de0 <clear_screen+0x10>
    for (int x = 0; x < X_DIM; x++ ){
    	for (int y = 0; y < Y_DIM ; y++ ){
        	plot_pixel(x, y, line_colour);
        }
    }
    plot_pixel(5, 5, RED);
     e10:	e3a00005 	mov	r0, #5
     e14:	e1a01000 	mov	r1, r0
     e18:	e3a02b3e 	mov	r2, #63488	; 0xf800
     e1c:	e34f2fff 	movt	r2, #65535	; 0xffff
     e20:	ebfffd33 	bl	2f4 <plot_pixel>
     e24:	e8bd8070 	pop	{r4, r5, r6, pc}

00000e28 <swap>:
    if(x<X_DIM && x>=0 && y<Y_DIM && y>=0)
        *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void swap (int* x, int* y){
    int temp = *x;
     e28:	e5903000 	ldr	r3, [r0]
    *x = *y;
     e2c:	e5912000 	ldr	r2, [r1]
     e30:	e5802000 	str	r2, [r0]
    *y = temp;
     e34:	e5813000 	str	r3, [r1]
     e38:	e12fff1e 	bx	lr

00000e3c <wait_for_vsync>:
}

void wait_for_vsync(){
    volatile int * pixel_ctrl_ptr = (int *)PIXEL_BUFF_REG;
    register int status;
    *pixel_ctrl_ptr = 1;    //start synchronization
     e3c:	e3033fff 	movw	r3, #16383	; 0x3fff
     e40:	e34f3f20 	movt	r3, #65312	; 0xff20
     e44:	e3a02001 	mov	r2, #1
     e48:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021
    status = *(pixel_ctrl_ptr + 3); //read s vlaue
     e4c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d
    while ((status & 0x01) != 0){
     e50:	e3130001 	tst	r3, #1
     e54:	012fff1e 	bxeq	lr
       status = *(pixel_ctrl_ptr + 3); //read s vlaue
     e58:	e3032fff 	movw	r2, #16383	; 0x3fff
     e5c:	e34f2f20 	movt	r2, #65312	; 0xff20
     e60:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
void wait_for_vsync(){
    volatile int * pixel_ctrl_ptr = (int *)PIXEL_BUFF_REG;
    register int status;
    *pixel_ctrl_ptr = 1;    //start synchronization
    status = *(pixel_ctrl_ptr + 3); //read s vlaue
    while ((status & 0x01) != 0){
     e64:	e3130001 	tst	r3, #1
     e68:	1afffffc 	bne	e60 <wait_for_vsync+0x24>
     e6c:	e12fff1e 	bx	lr

00000e70 <clear_line>:
       status = *(pixel_ctrl_ptr + 3); //read s vlaue
    }
}

void clear_line(int xi, int xf, int y){
     e70:	e92d4070 	push	{r4, r5, r6, lr}
     e74:	e24dd008 	sub	sp, sp, #8
     e78:	e58d0004 	str	r0, [sp, #4]
     e7c:	e58d1000 	str	r1, [sp]
     e80:	e1a05002 	mov	r5, r2
    //clears horizontal line
    if (xi > xf){
     e84:	e1a04000 	mov	r4, r0
     e88:	e1500001 	cmp	r0, r1
     e8c:	da000006 	ble	eac <clear_line+0x3c>
        swap(&xi, &xf);
     e90:	e28d0004 	add	r0, sp, #4
     e94:	e1a0100d 	mov	r1, sp
     e98:	ebffffe2 	bl	e28 <swap>
    }
    for (int x = xi; x <= xf; x++){
     e9c:	e59d4004 	ldr	r4, [sp, #4]
     ea0:	e59d3000 	ldr	r3, [sp]
     ea4:	e1540003 	cmp	r4, r3
     ea8:	ca000008 	bgt	ed0 <clear_line+0x60>
        plot_pixel(x, y, BLACK);
     eac:	e3a06000 	mov	r6, #0
     eb0:	e1a00004 	mov	r0, r4
     eb4:	e1a01005 	mov	r1, r5
     eb8:	e1a02006 	mov	r2, r6
     ebc:	ebfffd0c 	bl	2f4 <plot_pixel>
void clear_line(int xi, int xf, int y){
    //clears horizontal line
    if (xi > xf){
        swap(&xi, &xf);
    }
    for (int x = xi; x <= xf; x++){
     ec0:	e2844001 	add	r4, r4, #1
     ec4:	e59d3000 	ldr	r3, [sp]
     ec8:	e1530004 	cmp	r3, r4
     ecc:	aafffff7 	bge	eb0 <clear_line+0x40>
        plot_pixel(x, y, BLACK);
 	}
    return;
}
     ed0:	e28dd008 	add	sp, sp, #8
     ed4:	e8bd8070 	pop	{r4, r5, r6, pc}

00000ed8 <draw_square>:

void draw_square(int x, int y, short int color){
     ed8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     edc:	e1a08001 	mov	r8, r1
     ee0:	e1a07002 	mov	r7, r2
    for (int i = x ; i < (x+5); i++){
     ee4:	e280a005 	add	r10, r0, #5
     ee8:	e150000a 	cmp	r0, r10
     eec:	a8bd85f8 	popge	{r3, r4, r5, r6, r7, r8, r10, pc}
     ef0:	ea00000a 	b	f20 <draw_square+0x48>
        for (int j = y; j < (y+5); j++){
            plot_pixel(i, j, color);
     ef4:	e1a00005 	mov	r0, r5
     ef8:	e1a01004 	mov	r1, r4
     efc:	e1a02007 	mov	r2, r7
     f00:	ebfffcfb 	bl	2f4 <plot_pixel>
    return;
}

void draw_square(int x, int y, short int color){
    for (int i = x ; i < (x+5); i++){
        for (int j = y; j < (y+5); j++){
     f04:	e2844001 	add	r4, r4, #1
     f08:	e1540006 	cmp	r4, r6
     f0c:	1afffff8 	bne	ef4 <draw_square+0x1c>
 	}
    return;
}

void draw_square(int x, int y, short int color){
    for (int i = x ; i < (x+5); i++){
     f10:	e2855001 	add	r5, r5, #1
     f14:	e155000a 	cmp	r5, r10
     f18:	1a000002 	bne	f28 <draw_square+0x50>
     f1c:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
     f20:	e1a05000 	mov	r5, r0
        for (int j = y; j < (y+5); j++){
     f24:	e2816005 	add	r6, r1, #5
     f28:	e1580006 	cmp	r8, r6
     f2c:	b1a04008 	movlt	r4, r8
     f30:	baffffef 	blt	ef4 <draw_square+0x1c>
     f34:	eafffff5 	b	f10 <draw_square+0x38>

00000f38 <compute>:
            float Rload,
            float t,
            float t_not,
            bool sw1,
            bool sw2,
            bool ac){
     f38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f3c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
     f40:	e1a04001 	mov	r4, r1
     f44:	e1a08002 	mov	r8, r2
     f48:	e1a05003 	mov	r5, r3
     f4c:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
     f50:	e5dda090 	ldrb	r10, [sp, #144]	; 0x90
     f54:	e5dd9094 	ldrb	r9, [sp, #148]	; 0x94

    for (int i = 0; i<size; i++){
     f58:	e250b000 	subs	r11, r0, #0
     f5c:	da00000d 	ble	f98 <compute+0x60>
     f60:	e1a01003 	mov	r1, r3
            plot_pixel(i, j, color);
        }
    }
}

void compute(int size,
     f64:	e1a0c10b 	lsl	r12, r11, #2
     f68:	e3a02000 	mov	r2, #0
     f6c:	e1a03002 	mov	r3, r2
            bool sw1,
            bool sw2,
            bool ac){

    for (int i = 0; i<size; i++){
        Ic[i] = Ic[i+1];
     f70:	e5b10004 	ldr	r0, [r1, #4]!
     f74:	e2822004 	add	r2, r2, #4
     f78:	e7850003 	str	r0, [r5, r3]
        Vs[i] = Vs[i+1];
     f7c:	e7980002 	ldr	r0, [r8, r2]
     f80:	e7880003 	str	r0, [r8, r3]
        Vc[i] = Vc[i+1];
     f84:	e7960002 	ldr	r0, [r6, r2]
     f88:	e7860003 	str	r0, [r6, r3]
     f8c:	e2833004 	add	r3, r3, #4
            float t_not,
            bool sw1,
            bool sw2,
            bool ac){

    for (int i = 0; i<size; i++){
     f90:	e153000c 	cmp	r3, r12
     f94:	1afffff5 	bne	f70 <compute+0x38>
        Ic[i] = Ic[i+1];
        Vs[i] = Vs[i+1];
        Vc[i] = Vc[i+1];
    }

    float arg = (freq * (t - t_not)) - phase;
     f98:	e59d0088 	ldr	r0, [sp, #136]	; 0x88
     f9c:	e59d108c 	ldr	r1, [sp, #140]	; 0x8c
     fa0:	eb000ddf 	bl	4724 <__aeabi_fsub>
     fa4:	e1a07000 	mov	r7, r0

    if (ac) Vs[size-1] = amp * sin(arg);
     fa8:	e5dd3098 	ldrb	r3, [sp, #152]	; 0x98
     fac:	e3530000 	cmp	r3, #0
     fb0:	0a000014 	beq	1008 <compute+0xd0>
     fb4:	e24bb001 	sub	r11, r11, #1
        Ic[i] = Ic[i+1];
        Vs[i] = Vs[i+1];
        Vc[i] = Vc[i+1];
    }

    float arg = (freq * (t - t_not)) - phase;
     fb8:	e59d1074 	ldr	r1, [sp, #116]	; 0x74
     fbc:	eb000e81 	bl	49c8 <__aeabi_fmul>
     fc0:	e59d1078 	ldr	r1, [sp, #120]	; 0x78
     fc4:	eb000dd6 	bl	4724 <__aeabi_fsub>

    if (ac) Vs[size-1] = amp * sin(arg);
     fc8:	eb000bef 	bl	3f8c <__aeabi_f2d>
     fcc:	e1cd03f0 	strd	r0, [sp, #48]	; 0x30
     fd0:	eb00025c 	bl	1948 <sin>
     fd4:	e1cd02f0 	strd	r0, [sp, #32]
     fd8:	e59d0070 	ldr	r0, [sp, #112]	; 0x70
     fdc:	eb000bea 	bl	3f8c <__aeabi_f2d>
     fe0:	e1cd22d0 	ldrd	r2, [sp, #32]
     fe4:	eb000c15 	bl	4040 <__aeabi_dmul>
     fe8:	e1cd02f0 	strd	r0, [sp, #32]
     fec:	eb000da2 	bl	467c <__aeabi_d2f>
     ff0:	e788010b 	str	r0, [r8, r11, lsl #2]
    else Vs[size-1] = dc_voltage;

    if (ac)
    {
        if (!sw1 && !sw2){
     ff4:	e22a2001 	eor	r2, r10, #1
     ff8:	e2293001 	eor	r3, r9, #1
     ffc:	e1130002 	tst	r3, r2
    1000:	0a000010 	beq	1048 <compute+0x110>
    1004:	ea000006 	b	1024 <compute+0xec>
    }

    float arg = (freq * (t - t_not)) - phase;

    if (ac) Vs[size-1] = amp * sin(arg);
    else Vs[size-1] = dc_voltage;
    1008:	e24bb001 	sub	r11, r11, #1
    100c:	e788410b 	str	r4, [r8, r11, lsl #2]
            *v_stored = Vc[size-1];
        }


    } else {
        if (!sw1 && !sw2){
    1010:	e22a2001 	eor	r2, r10, #1
    1014:	e2293001 	eor	r3, r9, #1
    1018:	e1130002 	tst	r3, r2
    101c:	0a0000c4 	beq	1334 <compute+0x3fc>
    1020:	ea0000ba 	b	1310 <compute+0x3d8>
    else Vs[size-1] = dc_voltage;

    if (ac)
    {
        if (!sw1 && !sw2){
            Ic[size-1] = 0;
    1024:	e3a03000 	mov	r3, #0
    1028:	e785310b 	str	r3, [r5, r11, lsl #2]
            Vc[size-1] = *v_stored;
    102c:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    1030:	e5923000 	ldr	r3, [r2]
    1034:	e786310b 	str	r3, [r6, r11, lsl #2]
            *change = false;
    1038:	e3a03000 	mov	r3, #0
    103c:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    1040:	e5c23000 	strb	r3, [r2]
    1044:	ea00015d 	b	15c0 <compute+0x688>
        }

        else if (sw1 && !sw2){
    1048:	e113000a 	tst	r3, r10
    104c:	0a00002c 	beq	1104 <compute+0x1cc>
            Ic[size-1] = cap * amp * freq * cos(arg);
    1050:	e1cd03d0 	ldrd	r0, [sp, #48]	; 0x30
    1054:	eb0001fe 	bl	1854 <cos>
    1058:	e1cd01f8 	strd	r0, [sp, #24]
    105c:	e59d0080 	ldr	r0, [sp, #128]	; 0x80
    1060:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
    1064:	eb000e57 	bl	49c8 <__aeabi_fmul>
    1068:	e59d1074 	ldr	r1, [sp, #116]	; 0x74
    106c:	eb000e55 	bl	49c8 <__aeabi_fmul>
    1070:	eb000bc5 	bl	3f8c <__aeabi_f2d>
    1074:	e1cd21d8 	ldrd	r2, [sp, #24]
    1078:	eb000bf0 	bl	4040 <__aeabi_dmul>
    107c:	eb000d7e 	bl	467c <__aeabi_d2f>
    1080:	e785010b 	str	r0, [r5, r11, lsl #2]
            Vc[size-1] = Vs[size-1] * (1 - exp( -(t-t_not) / (Rload * cap) ) );
    1084:	e798010b 	ldr	r0, [r8, r11, lsl #2]
    1088:	eb000bbf 	bl	3f8c <__aeabi_f2d>
    108c:	e1a04000 	mov	r4, r0
    1090:	e1a05001 	mov	r5, r1
    1094:	e2877102 	add	r7, r7, #-2147483648	; 0x80000000
    1098:	e59d0084 	ldr	r0, [sp, #132]	; 0x84
    109c:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    10a0:	eb000e48 	bl	49c8 <__aeabi_fmul>
    10a4:	e1a01000 	mov	r1, r0
    10a8:	e1a00007 	mov	r0, r7
    10ac:	eb000eab 	bl	4b60 <__aeabi_fdiv>
    10b0:	eb000bb5 	bl	3f8c <__aeabi_f2d>
    10b4:	eb000263 	bl	1a48 <exp>
    10b8:	e1a02000 	mov	r2, r0
    10bc:	e1a03001 	mov	r3, r1
    10c0:	e3a00000 	mov	r0, #0
    10c4:	e3a01000 	mov	r1, #0
    10c8:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    10cc:	eb000ad6 	bl	3c2c <__aeabi_dsub>
    10d0:	e1a02000 	mov	r2, r0
    10d4:	e1a03001 	mov	r3, r1
    10d8:	e1a00004 	mov	r0, r4
    10dc:	e1a01005 	mov	r1, r5
    10e0:	eb000bd6 	bl	4040 <__aeabi_dmul>
    10e4:	eb000d64 	bl	467c <__aeabi_d2f>
    10e8:	e786010b 	str	r0, [r6, r11, lsl #2]
            *v_stored = Vc[size-1];
    10ec:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
    10f0:	e5830000 	str	r0, [r3]
            *change = false;
    10f4:	e3a03000 	mov	r3, #0
    10f8:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    10fc:	e5c23000 	strb	r3, [r2]
    1100:	ea00012e 	b	15c0 <compute+0x688>
        }

        else if (sw1 && sw2){
    1104:	e119000a 	tst	r9, r10
    1108:	0a000056 	beq	1268 <compute+0x330>
            float Rtot = (Rin * Rload) / (Rin + Rload);
    110c:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
    1110:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
    1114:	eb000e2b 	bl	49c8 <__aeabi_fmul>
    1118:	e1a04000 	mov	r4, r0
    111c:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
    1120:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
    1124:	eb000d7f 	bl	4728 <__addsf3>
    1128:	e1a01000 	mov	r1, r0
    112c:	e1a00004 	mov	r0, r4
    1130:	eb000e8a 	bl	4b60 <__aeabi_fdiv>
    1134:	e1a0a000 	mov	r10, r0
            Ic[size-1] = ((amp * sin(arg) * exp( -(t-t_not) / (Rtot * cap) ) ) / Rtot) + (amp * cap * freq * (1 - exp( -(t-t_not) / (Rtot * cap) ) ) * cos(arg));
    1138:	e2877102 	add	r7, r7, #-2147483648	; 0x80000000
    113c:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    1140:	eb000e20 	bl	49c8 <__aeabi_fmul>
    1144:	e1a01000 	mov	r1, r0
    1148:	e1a00007 	mov	r0, r7
    114c:	eb000e83 	bl	4b60 <__aeabi_fdiv>
    1150:	eb000b8d 	bl	3f8c <__aeabi_f2d>
    1154:	e1cd00f0 	strd	r0, [sp]
    1158:	eb00023a 	bl	1a48 <exp>
    115c:	e1cd01f8 	strd	r0, [sp, #24]
    1160:	e1cd00d0 	ldrd	r0, [sp]
    1164:	eb000237 	bl	1a48 <exp>
    1168:	e1cd02f8 	strd	r0, [sp, #40]	; 0x28
    116c:	e1cd03d0 	ldrd	r0, [sp, #48]	; 0x30
    1170:	eb0001b7 	bl	1854 <cos>
    1174:	e1cd03f0 	strd	r0, [sp, #48]	; 0x30
    1178:	e1cd02d0 	ldrd	r0, [sp, #32]
    117c:	e1cd21d8 	ldrd	r2, [sp, #24]
    1180:	eb000bae 	bl	4040 <__aeabi_dmul>
    1184:	e1cd01f8 	strd	r0, [sp, #24]
    1188:	e1a0000a 	mov	r0, r10
    118c:	eb000b7e 	bl	3f8c <__aeabi_f2d>
    1190:	e1a02000 	mov	r2, r0
    1194:	e1a03001 	mov	r3, r1
    1198:	e1cd01d8 	ldrd	r0, [sp, #24]
    119c:	eb000c4b 	bl	42d0 <__aeabi_ddiv>
    11a0:	e1cd01f8 	strd	r0, [sp, #24]
    11a4:	e59d0070 	ldr	r0, [sp, #112]	; 0x70
    11a8:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    11ac:	eb000e05 	bl	49c8 <__aeabi_fmul>
    11b0:	e59d1074 	ldr	r1, [sp, #116]	; 0x74
    11b4:	eb000e03 	bl	49c8 <__aeabi_fmul>
    11b8:	eb000b73 	bl	3f8c <__aeabi_f2d>
    11bc:	e1cd00f8 	strd	r0, [sp, #8]
    11c0:	e3a00000 	mov	r0, #0
    11c4:	e3a01000 	mov	r1, #0
    11c8:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    11cc:	e1cd22d8 	ldrd	r2, [sp, #40]	; 0x28
    11d0:	eb000a95 	bl	3c2c <__aeabi_dsub>
    11d4:	e1a02000 	mov	r2, r0
    11d8:	e1a03001 	mov	r3, r1
    11dc:	e1cd00d8 	ldrd	r0, [sp, #8]
    11e0:	eb000b96 	bl	4040 <__aeabi_dmul>
    11e4:	e1cd23d0 	ldrd	r2, [sp, #48]	; 0x30
    11e8:	eb000b94 	bl	4040 <__aeabi_dmul>
    11ec:	e1a02000 	mov	r2, r0
    11f0:	e1a03001 	mov	r3, r1
    11f4:	e1cd01d8 	ldrd	r0, [sp, #24]
    11f8:	eb000a8c 	bl	3c30 <__adddf3>
    11fc:	eb000d1e 	bl	467c <__aeabi_d2f>
    1200:	e785010b 	str	r0, [r5, r11, lsl #2]
            Vc[size-1] = Vs[size-1] * (1 - exp( -(t-t_not) / (Rtot * cap) ) );
    1204:	e798010b 	ldr	r0, [r8, r11, lsl #2]
    1208:	eb000b5f 	bl	3f8c <__aeabi_f2d>
    120c:	e1a04000 	mov	r4, r0
    1210:	e1a05001 	mov	r5, r1
    1214:	e1cd00d0 	ldrd	r0, [sp]
    1218:	eb00020a 	bl	1a48 <exp>
    121c:	e1a02000 	mov	r2, r0
    1220:	e1a03001 	mov	r3, r1
    1224:	e3a00000 	mov	r0, #0
    1228:	e3a01000 	mov	r1, #0
    122c:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    1230:	eb000a7d 	bl	3c2c <__aeabi_dsub>
    1234:	e1a02000 	mov	r2, r0
    1238:	e1a03001 	mov	r3, r1
    123c:	e1a00004 	mov	r0, r4
    1240:	e1a01005 	mov	r1, r5
    1244:	eb000b7d 	bl	4040 <__aeabi_dmul>
    1248:	eb000d0b 	bl	467c <__aeabi_d2f>
    124c:	e786010b 	str	r0, [r6, r11, lsl #2]
            *v_stored = Vc[size-1];
    1250:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
    1254:	e5830000 	str	r0, [r3]
            *change = false;
    1258:	e3a03000 	mov	r3, #0
    125c:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    1260:	e5c23000 	strb	r3, [r2]
    1264:	ea0000d5 	b	15c0 <compute+0x688>
        }

        else if (!sw1 && sw2){
    1268:	e1190002 	tst	r9, r2
    126c:	0a0000d3 	beq	15c0 <compute+0x688>
            if (!(*change)){
    1270:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    1274:	e5d23000 	ldrb	r3, [r2]
    1278:	e3530000 	cmp	r3, #0
    127c:	1a000006 	bne	129c <compute+0x364>
                *v_stored_const = *v_stored;
    1280:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    1284:	e5923000 	ldr	r3, [r2]
    1288:	e59d2068 	ldr	r2, [sp, #104]	; 0x68
    128c:	e5823000 	str	r3, [r2]
                *change = true;
    1290:	e3a03001 	mov	r3, #1
    1294:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    1298:	e5c23000 	strb	r3, [r2]
            }
            Vc[size-1] = *(v_stored) *  exp( -(t-t_not) / (Rload * cap) );
    129c:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
    12a0:	e5930000 	ldr	r0, [r3]
    12a4:	eb000b38 	bl	3f8c <__aeabi_f2d>
    12a8:	e1a08000 	mov	r8, r0
    12ac:	e1a09001 	mov	r9, r1
    12b0:	e2877102 	add	r7, r7, #-2147483648	; 0x80000000
    12b4:	e59d0084 	ldr	r0, [sp, #132]	; 0x84
    12b8:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    12bc:	eb000dc1 	bl	49c8 <__aeabi_fmul>
    12c0:	e1a01000 	mov	r1, r0
    12c4:	e1a00007 	mov	r0, r7
    12c8:	eb000e24 	bl	4b60 <__aeabi_fdiv>
    12cc:	eb000b2e 	bl	3f8c <__aeabi_f2d>
    12d0:	eb0001dc 	bl	1a48 <exp>
    12d4:	e1a02000 	mov	r2, r0
    12d8:	e1a03001 	mov	r3, r1
    12dc:	e1a00008 	mov	r0, r8
    12e0:	e1a01009 	mov	r1, r9
    12e4:	eb000b55 	bl	4040 <__aeabi_dmul>
    12e8:	eb000ce3 	bl	467c <__aeabi_d2f>
    12ec:	e786010b 	str	r0, [r6, r11, lsl #2]
            Ic[size-1] = - Vc[size-1] / Rload;
    12f0:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    12f4:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
    12f8:	eb000e18 	bl	4b60 <__aeabi_fdiv>
    12fc:	e785010b 	str	r0, [r5, r11, lsl #2]
            *v_stored = Vc[size-1];
    1300:	e796310b 	ldr	r3, [r6, r11, lsl #2]
    1304:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    1308:	e5823000 	str	r3, [r2]
    130c:	ea0000ab 	b	15c0 <compute+0x688>
        }


    } else {
        if (!sw1 && !sw2){
            Ic[size-1] = 0;
    1310:	e3a03000 	mov	r3, #0
    1314:	e785310b 	str	r3, [r5, r11, lsl #2]
            Vc[size-1] = *v_stored;
    1318:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    131c:	e5923000 	ldr	r3, [r2]
    1320:	e786310b 	str	r3, [r6, r11, lsl #2]
            *change = false;
    1324:	e3a03000 	mov	r3, #0
    1328:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    132c:	e5c23000 	strb	r3, [r2]
    1330:	ea0000a2 	b	15c0 <compute+0x688>
        }

        else if (sw1 && !sw2){
    1334:	e113000a 	tst	r3, r10
    1338:	0a000035 	beq	1414 <compute+0x4dc>
            Vc[size-1] = Vs[size-1] * (1 - exp( -(t-t_not) / (Rin * cap)));
    133c:	e2807102 	add	r7, r0, #-2147483648	; 0x80000000
    1340:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
    1344:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    1348:	eb000d9e 	bl	49c8 <__aeabi_fmul>
    134c:	e1a01000 	mov	r1, r0
    1350:	e1a00007 	mov	r0, r7
    1354:	eb000e01 	bl	4b60 <__aeabi_fdiv>
    1358:	eb000b0b 	bl	3f8c <__aeabi_f2d>
    135c:	e1cd00f0 	strd	r0, [sp]
    1360:	eb0001b8 	bl	1a48 <exp>
    1364:	e1cd00f8 	strd	r0, [sp, #8]
    1368:	e1a00004 	mov	r0, r4
    136c:	eb000b06 	bl	3f8c <__aeabi_f2d>
    1370:	e1cd01f0 	strd	r0, [sp, #16]
    1374:	e3a00000 	mov	r0, #0
    1378:	e3a01000 	mov	r1, #0
    137c:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    1380:	e1cd20d8 	ldrd	r2, [sp, #8]
    1384:	eb000a28 	bl	3c2c <__aeabi_dsub>
    1388:	e1a02000 	mov	r2, r0
    138c:	e1a03001 	mov	r3, r1
    1390:	e1cd01d0 	ldrd	r0, [sp, #16]
    1394:	eb000b29 	bl	4040 <__aeabi_dmul>
    1398:	eb000cb7 	bl	467c <__aeabi_d2f>
    139c:	e786010b 	str	r0, [r6, r11, lsl #2]
            Ic[size-1] = ( Vs[size-1] * ( exp( -(t-t_not) / (Rin * cap) ) ) ) / Rin;
    13a0:	e798010b 	ldr	r0, [r8, r11, lsl #2]
    13a4:	eb000af8 	bl	3f8c <__aeabi_f2d>
    13a8:	e1a08000 	mov	r8, r0
    13ac:	e1a09001 	mov	r9, r1
    13b0:	e1cd00d0 	ldrd	r0, [sp]
    13b4:	eb0001a3 	bl	1a48 <exp>
    13b8:	e1a02000 	mov	r2, r0
    13bc:	e1a03001 	mov	r3, r1
    13c0:	e1a00008 	mov	r0, r8
    13c4:	e1a01009 	mov	r1, r9
    13c8:	eb000b1c 	bl	4040 <__aeabi_dmul>
    13cc:	e1a08000 	mov	r8, r0
    13d0:	e1a09001 	mov	r9, r1
    13d4:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
    13d8:	eb000aeb 	bl	3f8c <__aeabi_f2d>
    13dc:	e1a02000 	mov	r2, r0
    13e0:	e1a03001 	mov	r3, r1
    13e4:	e1a00008 	mov	r0, r8
    13e8:	e1a01009 	mov	r1, r9
    13ec:	eb000bb7 	bl	42d0 <__aeabi_ddiv>
    13f0:	eb000ca1 	bl	467c <__aeabi_d2f>
    13f4:	e785010b 	str	r0, [r5, r11, lsl #2]
            *v_stored = Vc[size-1];
    13f8:	e796310b 	ldr	r3, [r6, r11, lsl #2]
    13fc:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    1400:	e5823000 	str	r3, [r2]
            *change = false;
    1404:	e3a03000 	mov	r3, #0
    1408:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    140c:	e5c23000 	strb	r3, [r2]
    1410:	ea00006a 	b	15c0 <compute+0x688>
        }

        else if (sw1 && sw2){
    1414:	e119000a 	tst	r9, r10
    1418:	0a00003f 	beq	151c <compute+0x5e4>
            float Rtot = (Rin * Rload) / (Rin + Rload);
    141c:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
    1420:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
    1424:	eb000d67 	bl	49c8 <__aeabi_fmul>
    1428:	e1a0a000 	mov	r10, r0
    142c:	e59d007c 	ldr	r0, [sp, #124]	; 0x7c
    1430:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
    1434:	eb000cbb 	bl	4728 <__addsf3>
    1438:	e1a01000 	mov	r1, r0
    143c:	e1a0000a 	mov	r0, r10
    1440:	eb000dc6 	bl	4b60 <__aeabi_fdiv>
    1444:	e1a0a000 	mov	r10, r0
            Vc[size-1] = Vs[size-1] * (1 - exp( -(t-t_not) / (Rtot * cap)));
    1448:	e2877102 	add	r7, r7, #-2147483648	; 0x80000000
    144c:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    1450:	eb000d5c 	bl	49c8 <__aeabi_fmul>
    1454:	e1a01000 	mov	r1, r0
    1458:	e1a00007 	mov	r0, r7
    145c:	eb000dbf 	bl	4b60 <__aeabi_fdiv>
    1460:	eb000ac9 	bl	3f8c <__aeabi_f2d>
    1464:	e1cd00f0 	strd	r0, [sp]
    1468:	eb000176 	bl	1a48 <exp>
    146c:	e1cd00f8 	strd	r0, [sp, #8]
    1470:	e1a00004 	mov	r0, r4
    1474:	eb000ac4 	bl	3f8c <__aeabi_f2d>
    1478:	e1cd01f0 	strd	r0, [sp, #16]
    147c:	e3a00000 	mov	r0, #0
    1480:	e3a01000 	mov	r1, #0
    1484:	e3431ff0 	movt	r1, #16368	; 0x3ff0
    1488:	e1cd20d8 	ldrd	r2, [sp, #8]
    148c:	eb0009e6 	bl	3c2c <__aeabi_dsub>
    1490:	e1a02000 	mov	r2, r0
    1494:	e1a03001 	mov	r3, r1
    1498:	e1cd01d0 	ldrd	r0, [sp, #16]
    149c:	eb000ae7 	bl	4040 <__aeabi_dmul>
    14a0:	eb000c75 	bl	467c <__aeabi_d2f>
    14a4:	e786010b 	str	r0, [r6, r11, lsl #2]
            Ic[size-1] = ( Vs[size-1] * ( exp( -(t-t_not) / (Rtot * cap) ) ) ) / Rtot;
    14a8:	e798010b 	ldr	r0, [r8, r11, lsl #2]
    14ac:	eb000ab6 	bl	3f8c <__aeabi_f2d>
    14b0:	e1a08000 	mov	r8, r0
    14b4:	e1a09001 	mov	r9, r1
    14b8:	e1cd00d0 	ldrd	r0, [sp]
    14bc:	eb000161 	bl	1a48 <exp>
    14c0:	e1a02000 	mov	r2, r0
    14c4:	e1a03001 	mov	r3, r1
    14c8:	e1a00008 	mov	r0, r8
    14cc:	e1a01009 	mov	r1, r9
    14d0:	eb000ada 	bl	4040 <__aeabi_dmul>
    14d4:	e1a08000 	mov	r8, r0
    14d8:	e1a09001 	mov	r9, r1
    14dc:	e1a0000a 	mov	r0, r10
    14e0:	eb000aa9 	bl	3f8c <__aeabi_f2d>
    14e4:	e1a02000 	mov	r2, r0
    14e8:	e1a03001 	mov	r3, r1
    14ec:	e1a00008 	mov	r0, r8
    14f0:	e1a01009 	mov	r1, r9
    14f4:	eb000b75 	bl	42d0 <__aeabi_ddiv>
    14f8:	eb000c5f 	bl	467c <__aeabi_d2f>
    14fc:	e785010b 	str	r0, [r5, r11, lsl #2]
            *v_stored = Vc[size-1];
    1500:	e796310b 	ldr	r3, [r6, r11, lsl #2]
    1504:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    1508:	e5823000 	str	r3, [r2]
            *change = false;
    150c:	e3a03000 	mov	r3, #0
    1510:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    1514:	e5c23000 	strb	r3, [r2]
    1518:	ea000028 	b	15c0 <compute+0x688>
        }

        else if (!sw1 && sw2){
    151c:	e1120009 	tst	r2, r9
    1520:	0a000026 	beq	15c0 <compute+0x688>
            if (!(*change)){
    1524:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    1528:	e5d23000 	ldrb	r3, [r2]
    152c:	e3530000 	cmp	r3, #0
    1530:	1a000006 	bne	1550 <compute+0x618>
                *v_stored_const = *v_stored;
    1534:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    1538:	e5923000 	ldr	r3, [r2]
    153c:	e59d2068 	ldr	r2, [sp, #104]	; 0x68
    1540:	e5823000 	str	r3, [r2]
                *change = true;
    1544:	e3a03001 	mov	r3, #1
    1548:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    154c:	e5c23000 	strb	r3, [r2]
            }
            Vc[size-1] = *(v_stored_const) * exp( -(t-t_not) / (Rload * cap) );
    1550:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
    1554:	e5930000 	ldr	r0, [r3]
    1558:	eb000a8b 	bl	3f8c <__aeabi_f2d>
    155c:	e1a08000 	mov	r8, r0
    1560:	e1a09001 	mov	r9, r1
    1564:	e2877102 	add	r7, r7, #-2147483648	; 0x80000000
    1568:	e59d0084 	ldr	r0, [sp, #132]	; 0x84
    156c:	e59d1080 	ldr	r1, [sp, #128]	; 0x80
    1570:	eb000d14 	bl	49c8 <__aeabi_fmul>
    1574:	e1a01000 	mov	r1, r0
    1578:	e1a00007 	mov	r0, r7
    157c:	eb000d77 	bl	4b60 <__aeabi_fdiv>
    1580:	eb000a81 	bl	3f8c <__aeabi_f2d>
    1584:	eb00012f 	bl	1a48 <exp>
    1588:	e1a02000 	mov	r2, r0
    158c:	e1a03001 	mov	r3, r1
    1590:	e1a00008 	mov	r0, r8
    1594:	e1a01009 	mov	r1, r9
    1598:	eb000aa8 	bl	4040 <__aeabi_dmul>
    159c:	eb000c36 	bl	467c <__aeabi_d2f>
    15a0:	e786010b 	str	r0, [r6, r11, lsl #2]
            Ic[size-1] = - Vc[size-1] / Rload;
    15a4:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    15a8:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
    15ac:	eb000d6b 	bl	4b60 <__aeabi_fdiv>
    15b0:	e785010b 	str	r0, [r5, r11, lsl #2]
            *v_stored = Vc[size-1];
    15b4:	e796310b 	ldr	r3, [r6, r11, lsl #2]
    15b8:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
    15bc:	e5823000 	str	r3, [r2]
        }
    }
}
    15c0:	e28dd03c 	add	sp, sp, #60	; 0x3c
    15c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000015c8 <set_switches>:

void set_switches(bool* sw1, bool* sw2, bool *ac)
{
    volatile int* SW_ptr = (int*) 0xFF200040;
    *(sw1) = *(SW_ptr) & 0b0000000001;
    15c8:	e3a03000 	mov	r3, #0
    15cc:	e34f3f20 	movt	r3, #65312	; 0xff20
    15d0:	e593c040 	ldr	r12, [r3, #64]	; 0x40
    15d4:	e20cc001 	and	r12, r12, #1
    15d8:	e5c0c000 	strb	r12, [r0]
    *(sw2) = *(SW_ptr) & 0b0000000010;
    15dc:	e5930040 	ldr	r0, [r3, #64]	; 0x40
    15e0:	e7e000d0 	ubfx	r0, r0, #1, #1
    15e4:	e5c10000 	strb	r0, [r1]
    *(ac) = *(SW_ptr) & 0b1000000000;
    15e8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    15ec:	e7e034d3 	ubfx	r3, r3, #9, #1
    15f0:	e5c23000 	strb	r3, [r2]
    15f4:	e12fff1e 	bx	lr

000015f8 <main>:
void write_char(int x, int y, char c);
void write_string(int x, int y, int size, char string[size]);
void clear_chars();
void set_switches( bool *sw1, bool *sw2, bool *ac );

int main(void){
    15f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    15fc:	e28db020 	add	r11, sp, #32
    1600:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    bool sw1 = false;
    1604:	e3a07000 	mov	r7, #0
    1608:	e54b7025 	strb	r7, [r11, #-37]	; 0xffffffdb
    bool sw2 = false;
    160c:	e54b7026 	strb	r7, [r11, #-38]	; 0xffffffda
    bool ac = false;
    1610:	e54b7027 	strb	r7, [r11, #-39]	; 0xffffffd9
    // declare other variables
    // short int draw_colour = BLUE;
    volatile int * pixel_ctrl_ptr = (int *)PIXEL_BUFF_REG;

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = ON_CHIP_MEM; // first store the address in the back buffer
    1614:	e3034fff 	movw	r4, #16383	; 0x3fff
    1618:	e34f4f20 	movt	r4, #65312	; 0xff20
    161c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    1620:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025

    /* now, swap the front/back buffers, to set the front buffer location */
    // wait_for_vsync();
    wait_for_vsync();
    1624:	ebfffe04 	bl	e3c <wait_for_vsync>

    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
    1628:	e5143fdf 	ldr	r3, [r4, #-4063]	; 0xfffff021
    162c:	e305594c 	movw	r5, #22860	; 0x594c
    1630:	e3405000 	movt	r5, #0
    1634:	e5853000 	str	r3, [r5]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
    1638:	ebfffde4 	bl	dd0 <clear_screen>
    clear_chars();
    163c:	ebfffb1c 	bl	2b4 <clear_chars>

    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = SDRAM_MEM;
    1640:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
    1644:	e5043fdb 	str	r3, [r4, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1648:	e5143fdb 	ldr	r3, [r4, #-4059]	; 0xfffff025
    164c:	e5853000 	str	r3, [r5]

    int size = 70;

    //Graph data
    float Vs[size];
    1650:	e24dde12 	sub	sp, sp, #288	; 0x120
    1654:	e28da040 	add	r10, sp, #64	; 0x40
    float Ic[size];
    1658:	e24dde12 	sub	sp, sp, #288	; 0x120
    165c:	e28d5040 	add	r5, sp, #64	; 0x40
    float Vc[size];
    1660:	e24dde12 	sub	sp, sp, #288	; 0x120
    1664:	e28d6040 	add	r6, sp, #64	; 0x40
    1668:	e1a03007 	mov	r3, r7

    for(int i = 0; i<size; i++){
        Vs[i] = 0;
    166c:	e3a02000 	mov	r2, #0
    1670:	e78a2003 	str	r2, [r10, r3]
        Vc[i] = 0;
    1674:	e7862003 	str	r2, [r6, r3]
        Ic[i] = 0;
    1678:	e7852003 	str	r2, [r5, r3]
    167c:	e2833004 	add	r3, r3, #4
    //Graph data
    float Vs[size];
    float Ic[size];
    float Vc[size];

    for(int i = 0; i<size; i++){
    1680:	e3530f46 	cmp	r3, #280	; 0x118
    1684:	1afffff9 	bne	1670 <main+0x78>
        Vs[i] = 0;
        Vc[i] = 0;
        Ic[i] = 0;
    }

    float v_stored = 0.0;
    1688:	e3a03000 	mov	r3, #0
    168c:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
    float v_stored_const = 0.0;
    1690:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
    bool change = false;
    1694:	e3a03000 	mov	r3, #0
    1698:	e54b3031 	strb	r3, [r11, #-49]	; 0xffffffcf

    int lit = 0;

    while (true){
        //  clear screen
        clear_screen();
    169c:	ebfffdcb 	bl	dd0 <clear_screen>
        // clear_chars();
        set_switches(&sw1, &sw2, &ac);
    16a0:	e24b0025 	sub	r0, r11, #37	; 0x25
    16a4:	e24b1026 	sub	r1, r11, #38	; 0x26
    16a8:	e24b2027 	sub	r2, r11, #39	; 0x27
    16ac:	ebffffc5 	bl	15c8 <set_switches>
        draw_circuit(40, 100, WHITE, sw1, sw2);
    16b0:	e55b3025 	ldrb	r3, [r11, #-37]	; 0xffffffdb
    16b4:	e55b2026 	ldrb	r2, [r11, #-38]	; 0xffffffda
    16b8:	e58d2000 	str	r2, [sp]
    16bc:	e3a00028 	mov	r0, #40	; 0x28
    16c0:	e3a01064 	mov	r1, #100	; 0x64
    16c4:	e3e02000 	mvn	r2, #0
    16c8:	ebfffce8 	bl	a70 <draw_circuit>

        //Voltage text
        // char out[] = "Voltage\0";
        write_string(5, 40, 7, "Voltage");
    16cc:	e3a00005 	mov	r0, #5
    16d0:	e3a01028 	mov	r1, #40	; 0x28
    16d4:	e3a02007 	mov	r2, #7
    16d8:	e3053278 	movw	r3, #21112	; 0x5278
    16dc:	e3403000 	movt	r3, #0
    16e0:	ebfffae0 	bl	268 <write_string>
    float v_stored_const = 0.0;
    bool change = false;
    float dc_voltage = 12;
    //time data
    int tc = 0;
    double t = 0.0;
    16e4:	e3a02000 	mov	r2, #0
    16e8:	e3a03000 	mov	r3, #0
    16ec:	e14b23fc 	strd	r2, [r11, #-60]	; 0xffffffc4
        // lit++;

        //Calculate Ic and Vs
        if(tc == 1){

            compute(size,
    16f0:	e3a09000 	mov	r9, #0
    16f4:	e3449140 	movt	r9, #16704	; 0x4140
    16f8:	e3a085fe 	mov	r8, #1065353216	; 0x3f800000
    16fc:	e3a07000 	mov	r7, #0
            // test[29] = sin(t);
            tc = 0;
        }

        //Draw graphs to the right of the circuit
        draw_graph(200, 60, sizeof(Vs)/sizeof(Vs[0]), Vc, WHITE);
    1700:	e3e04000 	mvn	r4, #0
    1704:	e58d4000 	str	r4, [sp]
    1708:	e3a000c8 	mov	r0, #200	; 0xc8
    170c:	e3a0103c 	mov	r1, #60	; 0x3c
    1710:	e3a02046 	mov	r2, #70	; 0x46
    1714:	e1a03006 	mov	r3, r6
    1718:	ebfffb9b 	bl	58c <draw_graph>
        draw_graph(200, 180, sizeof(Vc)/sizeof(Vc[0]), Ic, WHITE);
    171c:	e58d4000 	str	r4, [sp]
    1720:	e3a000c8 	mov	r0, #200	; 0xc8
    1724:	e3a010b4 	mov	r1, #180	; 0xb4
    1728:	e3a02046 	mov	r2, #70	; 0x46
    172c:	e1a03005 	mov	r3, r5
    1730:	ebfffb95 	bl	58c <draw_graph>
        draw_graph(60, 180, sizeof(Ic)/sizeof(Ic[0]), Ic, WHITE);
    1734:	e58d4000 	str	r4, [sp]
    1738:	e3a0003c 	mov	r0, #60	; 0x3c
    173c:	e3a010b4 	mov	r1, #180	; 0xb4
    1740:	e3a02046 	mov	r2, #70	; 0x46
    1744:	e1a03005 	mov	r3, r5
    1748:	ebfffb8f 	bl	58c <draw_graph>

        // tab_over(select, tab_ready);
        // change_data(select, type_ready, circuit_data, temp_circuit_data);

        //  wait for sync
        wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    174c:	ebfffdba 	bl	e3c <wait_for_vsync>
        pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    1750:	e3033fff 	movw	r3, #16383	; 0x3fff
    1754:	e34f3f20 	movt	r3, #65312	; 0xff20
    1758:	e5132fdb 	ldr	r2, [r3, #-4059]	; 0xfffff025
    175c:	e305394c 	movw	r3, #22860	; 0x594c
    1760:	e3403000 	movt	r3, #0
    1764:	e5832000 	str	r2, [r3]

    int lit = 0;

    while (true){
        //  clear screen
        clear_screen();
    1768:	ebfffd98 	bl	dd0 <clear_screen>
        // clear_chars();
        set_switches(&sw1, &sw2, &ac);
    176c:	e24b0025 	sub	r0, r11, #37	; 0x25
    1770:	e24b1026 	sub	r1, r11, #38	; 0x26
    1774:	e24b2027 	sub	r2, r11, #39	; 0x27
    1778:	ebffff92 	bl	15c8 <set_switches>
        draw_circuit(40, 100, WHITE, sw1, sw2);
    177c:	e55b3025 	ldrb	r3, [r11, #-37]	; 0xffffffdb
    1780:	e55b2026 	ldrb	r2, [r11, #-38]	; 0xffffffda
    1784:	e58d2000 	str	r2, [sp]
    1788:	e3a00028 	mov	r0, #40	; 0x28
    178c:	e3a01064 	mov	r1, #100	; 0x64
    1790:	e1a02004 	mov	r2, r4
    1794:	ebfffcb5 	bl	a70 <draw_circuit>

        //Voltage text
        // char out[] = "Voltage\0";
        write_string(5, 40, 7, "Voltage");
    1798:	e3a00005 	mov	r0, #5
    179c:	e3a01028 	mov	r1, #40	; 0x28
    17a0:	e3a02007 	mov	r2, #7
    17a4:	e3053278 	movw	r3, #21112	; 0x5278
    17a8:	e3403000 	movt	r3, #0
    17ac:	ebfffaad 	bl	268 <write_string>
        // lit++;

        //Calculate Ic and Vs
        if(tc == 1){

            compute(size,
    17b0:	e58d6000 	str	r6, [sp]
    17b4:	e24b302c 	sub	r3, r11, #44	; 0x2c
    17b8:	e58d3004 	str	r3, [sp, #4]
    17bc:	e24b3030 	sub	r3, r11, #48	; 0x30
    17c0:	e58d3008 	str	r3, [sp, #8]
    17c4:	e24b3031 	sub	r3, r11, #49	; 0x31
    17c8:	e58d300c 	str	r3, [sp, #12]
    17cc:	e58d8010 	str	r8, [sp, #16]
    17d0:	e58d8014 	str	r8, [sp, #20]
    17d4:	e58d7018 	str	r7, [sp, #24]
    17d8:	e3a03000 	mov	r3, #0
    17dc:	e34433fa 	movt	r3, #17402	; 0x43fa
    17e0:	e58d301c 	str	r3, [sp, #28]
    17e4:	e30327bd 	movw	r2, #14269	; 0x37bd
    17e8:	e3432586 	movt	r2, #13702	; 0x3586
    17ec:	e58d2020 	str	r2, [sp, #32]
    17f0:	e3a03000 	mov	r3, #0
    17f4:	e58d3024 	str	r3, [sp, #36]	; 0x24
    17f8:	e14b03dc 	ldrd	r0, [r11, #-60]	; 0xffffffc4
    17fc:	eb000b9e 	bl	467c <__aeabi_d2f>
    1800:	e58d0028 	str	r0, [sp, #40]	; 0x28
    1804:	e58d702c 	str	r7, [sp, #44]	; 0x2c
    1808:	e55b3025 	ldrb	r3, [r11, #-37]	; 0xffffffdb
    180c:	e58d3030 	str	r3, [sp, #48]	; 0x30
    1810:	e55b3026 	ldrb	r3, [r11, #-38]	; 0xffffffda
    1814:	e58d3034 	str	r3, [sp, #52]	; 0x34
    1818:	e55b3027 	ldrb	r3, [r11, #-39]	; 0xffffffd9
    181c:	e58d3038 	str	r3, [sp, #56]	; 0x38
    1820:	e3a00046 	mov	r0, #70	; 0x46
    1824:	e1a01009 	mov	r1, r9
    1828:	e1a0200a 	mov	r2, r10
    182c:	e1a03005 	mov	r3, r5
    1830:	ebfffdc0 	bl	f38 <compute>
                    t_not,
                    sw1,
                    sw2,
                    ac);

            t = t + 0.01;
    1834:	e14b03dc 	ldrd	r0, [r11, #-60]	; 0xffffffc4
    1838:	e301247b 	movw	r2, #5243	; 0x147b
    183c:	e34427ae 	movt	r2, #18350	; 0x47ae
    1840:	e3073ae1 	movw	r3, #31457	; 0x7ae1
    1844:	e3433f84 	movt	r3, #16260	; 0x3f84
    1848:	eb0008f8 	bl	3c30 <__adddf3>
    184c:	e14b03fc 	strd	r0, [r11, #-60]	; 0xffffffc4
    1850:	eaffffaa 	b	1700 <main+0x108>

00001854 <cos>:
    1854:	e92d4030 	push	{r4, r5, lr}
    1858:	e59fe0e0 	ldr	lr, [pc, #224]	; 1940 <cos+0xec>
    185c:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    1860:	e15c000e 	cmp	r12, lr
    1864:	e24dd01c 	sub	sp, sp, #28
    1868:	e1a02000 	mov	r2, r0
    186c:	e1a03001 	mov	r3, r1
    1870:	e1a04000 	mov	r4, r0
    1874:	e1a05001 	mov	r5, r1
    1878:	da000015 	ble	18d4 <cos+0x80>
    187c:	e59fe0c0 	ldr	lr, [pc, #192]	; 1944 <cos+0xf0>
    1880:	e15c000e 	cmp	r12, lr
    1884:	da000003 	ble	1898 <cos+0x44>
    1888:	eb0008e7 	bl	3c2c <__aeabi_dsub>
    188c:	e28dd01c 	add	sp, sp, #28
    1890:	e8bd4030 	pop	{r4, r5, lr}
    1894:	e12fff1e 	bx	lr
    1898:	e28d2008 	add	r2, sp, #8
    189c:	eb0001db 	bl	2010 <__ieee754_rem_pio2>
    18a0:	e2000003 	and	r0, r0, #3
    18a4:	e3500001 	cmp	r0, #1
    18a8:	0a000014 	beq	1900 <cos+0xac>
    18ac:	e3500002 	cmp	r0, #2
    18b0:	0a00000b 	beq	18e4 <cos+0x90>
    18b4:	e3500000 	cmp	r0, #0
    18b8:	1a000018 	bne	1920 <cos+0xcc>
    18bc:	e28d1008 	add	r1, sp, #8
    18c0:	e8910003 	ldm	r1, {r0, r1}
    18c4:	e28d3010 	add	r3, sp, #16
    18c8:	e893000c 	ldm	r3, {r2, r3}
    18cc:	eb000365 	bl	2668 <__kernel_cos>
    18d0:	eaffffed 	b	188c <cos+0x38>
    18d4:	e3a02000 	mov	r2, #0
    18d8:	e3a03000 	mov	r3, #0
    18dc:	eb000361 	bl	2668 <__kernel_cos>
    18e0:	eaffffe9 	b	188c <cos+0x38>
    18e4:	e28d1008 	add	r1, sp, #8
    18e8:	e8910003 	ldm	r1, {r0, r1}
    18ec:	e28d3010 	add	r3, sp, #16
    18f0:	e893000c 	ldm	r3, {r2, r3}
    18f4:	eb00035b 	bl	2668 <__kernel_cos>
    18f8:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    18fc:	eaffffe2 	b	188c <cos+0x38>
    1900:	e58d0000 	str	r0, [sp]
    1904:	e28d3010 	add	r3, sp, #16
    1908:	e893000c 	ldm	r3, {r2, r3}
    190c:	e28d1008 	add	r1, sp, #8
    1910:	e8910003 	ldm	r1, {r0, r1}
    1914:	eb00070b 	bl	3548 <__kernel_sin>
    1918:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    191c:	eaffffda 	b	188c <cos+0x38>
    1920:	e3a03001 	mov	r3, #1
    1924:	e58d3000 	str	r3, [sp]
    1928:	e28d1008 	add	r1, sp, #8
    192c:	e8910003 	ldm	r1, {r0, r1}
    1930:	e28d3010 	add	r3, sp, #16
    1934:	e893000c 	ldm	r3, {r2, r3}
    1938:	eb000702 	bl	3548 <__kernel_sin>
    193c:	eaffffd2 	b	188c <cos+0x38>
    1940:	3fe921fb 	.word	0x3fe921fb
    1944:	7fefffff 	.word	0x7fefffff

00001948 <sin>:
    1948:	e92d4030 	push	{r4, r5, lr}
    194c:	e59fe0ec 	ldr	lr, [pc, #236]	; 1a40 <sin+0xf8>
    1950:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    1954:	e15c000e 	cmp	r12, lr
    1958:	e24dd01c 	sub	sp, sp, #28
    195c:	e1a02000 	mov	r2, r0
    1960:	e1a03001 	mov	r3, r1
    1964:	e1a04000 	mov	r4, r0
    1968:	e1a05001 	mov	r5, r1
    196c:	da000017 	ble	19d0 <sin+0x88>
    1970:	e59fe0cc 	ldr	lr, [pc, #204]	; 1a44 <sin+0xfc>
    1974:	e15c000e 	cmp	r12, lr
    1978:	da000003 	ble	198c <sin+0x44>
    197c:	eb0008aa 	bl	3c2c <__aeabi_dsub>
    1980:	e28dd01c 	add	sp, sp, #28
    1984:	e8bd4030 	pop	{r4, r5, lr}
    1988:	e12fff1e 	bx	lr
    198c:	e28d2008 	add	r2, sp, #8
    1990:	eb00019e 	bl	2010 <__ieee754_rem_pio2>
    1994:	e2000003 	and	r0, r0, #3
    1998:	e3500001 	cmp	r0, #1
    199c:	0a00001a 	beq	1a0c <sin+0xc4>
    19a0:	e3500002 	cmp	r0, #2
    19a4:	0a00000f 	beq	19e8 <sin+0xa0>
    19a8:	e3500000 	cmp	r0, #0
    19ac:	1a00001c 	bne	1a24 <sin+0xdc>
    19b0:	e3a03001 	mov	r3, #1
    19b4:	e58d3000 	str	r3, [sp]
    19b8:	e28d1008 	add	r1, sp, #8
    19bc:	e8910003 	ldm	r1, {r0, r1}
    19c0:	e28d3010 	add	r3, sp, #16
    19c4:	e893000c 	ldm	r3, {r2, r3}
    19c8:	eb0006de 	bl	3548 <__kernel_sin>
    19cc:	eaffffeb 	b	1980 <sin+0x38>
    19d0:	e3a03000 	mov	r3, #0
    19d4:	e58d3000 	str	r3, [sp]
    19d8:	e3a02000 	mov	r2, #0
    19dc:	e3a03000 	mov	r3, #0
    19e0:	eb0006d8 	bl	3548 <__kernel_sin>
    19e4:	eaffffe5 	b	1980 <sin+0x38>
    19e8:	e3a03001 	mov	r3, #1
    19ec:	e58d3000 	str	r3, [sp]
    19f0:	e28d1008 	add	r1, sp, #8
    19f4:	e8910003 	ldm	r1, {r0, r1}
    19f8:	e28d3010 	add	r3, sp, #16
    19fc:	e893000c 	ldm	r3, {r2, r3}
    1a00:	eb0006d0 	bl	3548 <__kernel_sin>
    1a04:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    1a08:	eaffffdc 	b	1980 <sin+0x38>
    1a0c:	e28d1008 	add	r1, sp, #8
    1a10:	e8910003 	ldm	r1, {r0, r1}
    1a14:	e28d3010 	add	r3, sp, #16
    1a18:	e893000c 	ldm	r3, {r2, r3}
    1a1c:	eb000311 	bl	2668 <__kernel_cos>
    1a20:	eaffffd6 	b	1980 <sin+0x38>
    1a24:	e28d1008 	add	r1, sp, #8
    1a28:	e8910003 	ldm	r1, {r0, r1}
    1a2c:	e28d3010 	add	r3, sp, #16
    1a30:	e893000c 	ldm	r3, {r2, r3}
    1a34:	eb00030b 	bl	2668 <__kernel_cos>
    1a38:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    1a3c:	eaffffcf 	b	1980 <sin+0x38>
    1a40:	3fe921fb 	.word	0x3fe921fb
    1a44:	7fefffff 	.word	0x7fefffff

00001a48 <exp>:
    1a48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    1a4c:	e24dd028 	sub	sp, sp, #40	; 0x28
    1a50:	e1a04000 	mov	r4, r0
    1a54:	e1a05001 	mov	r5, r1
    1a58:	eb00005e 	bl	1bd8 <__ieee754_exp>
    1a5c:	e59f8164 	ldr	r8, [pc, #356]	; 1bc8 <exp+0x180>
    1a60:	e1d830d0 	ldrsb	r3, [r8]
    1a64:	e3730001 	cmn	r3, #1
    1a68:	e1a06000 	mov	r6, r0
    1a6c:	e1a07001 	mov	r7, r1
    1a70:	0a00002f 	beq	1b34 <exp+0xec>
    1a74:	e1a00004 	mov	r0, r4
    1a78:	e1a01005 	mov	r1, r5
    1a7c:	eb00073b 	bl	3770 <finite>
    1a80:	e3500000 	cmp	r0, #0
    1a84:	0a00002a 	beq	1b34 <exp+0xec>
    1a88:	e1a00004 	mov	r0, r4
    1a8c:	e1a01005 	mov	r1, r5
    1a90:	e28f3e12 	add	r3, pc, #288	; 0x120
    1a94:	e893000c 	ldm	r3, {r2, r3}
    1a98:	eb000ada 	bl	4608 <__aeabi_dcmpgt>
    1a9c:	e3500000 	cmp	r0, #0
    1aa0:	1a000028 	bne	1b48 <exp+0x100>
    1aa4:	e1a00004 	mov	r0, r4
    1aa8:	e1a01005 	mov	r1, r5
    1aac:	e28f3f43 	add	r3, pc, #268	; 0x10c
    1ab0:	e893000c 	ldm	r3, {r2, r3}
    1ab4:	eb000ac1 	bl	45c0 <__aeabi_dcmplt>
    1ab8:	e3500000 	cmp	r0, #0
    1abc:	0a00001c 	beq	1b34 <exp+0xec>
    1ac0:	e1d830d0 	ldrsb	r3, [r8]
    1ac4:	e3530002 	cmp	r3, #2
    1ac8:	e3a03004 	mov	r3, #4
    1acc:	e58d3000 	str	r3, [sp]
    1ad0:	e59f30f4 	ldr	r3, [pc, #244]	; 1bcc <exp+0x184>
    1ad4:	e58d3004 	str	r3, [sp, #4]
    1ad8:	e3a03000 	mov	r3, #0
    1adc:	e58d3020 	str	r3, [sp, #32]
    1ae0:	e3a02000 	mov	r2, #0
    1ae4:	e3a03000 	mov	r3, #0
    1ae8:	e58d4010 	str	r4, [sp, #16]
    1aec:	e58d5014 	str	r5, [sp, #20]
    1af0:	e58d4008 	str	r4, [sp, #8]
    1af4:	e58d500c 	str	r5, [sp, #12]
    1af8:	e58d2018 	str	r2, [sp, #24]
    1afc:	e58d301c 	str	r3, [sp, #28]
    1b00:	0a000027 	beq	1ba4 <exp+0x15c>
    1b04:	e1a0000d 	mov	r0, sp
    1b08:	eb000782 	bl	3918 <matherr>
    1b0c:	e3500000 	cmp	r0, #0
    1b10:	0a000023 	beq	1ba4 <exp+0x15c>
    1b14:	e59d3020 	ldr	r3, [sp, #32]
    1b18:	e3530000 	cmp	r3, #0
    1b1c:	0a000002 	beq	1b2c <exp+0xe4>
    1b20:	eb000cca 	bl	4e50 <__errno>
    1b24:	e59d3020 	ldr	r3, [sp, #32]
    1b28:	e5803000 	str	r3, [r0]
    1b2c:	e28d7018 	add	r7, sp, #24
    1b30:	e89700c0 	ldm	r7, {r6, r7}
    1b34:	e1a00006 	mov	r0, r6
    1b38:	e1a01007 	mov	r1, r7
    1b3c:	e28dd028 	add	sp, sp, #40	; 0x28
    1b40:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1b44:	e12fff1e 	bx	lr
    1b48:	e3a02003 	mov	r2, #3
    1b4c:	e5d83000 	ldrb	r3, [r8]
    1b50:	e58d2000 	str	r2, [sp]
    1b54:	e59f2070 	ldr	r2, [pc, #112]	; 1bcc <exp+0x184>
    1b58:	e3530000 	cmp	r3, #0
    1b5c:	e58d2004 	str	r2, [sp, #4]
    1b60:	e3a02000 	mov	r2, #0
    1b64:	e58d2020 	str	r2, [sp, #32]
    1b68:	e58d4010 	str	r4, [sp, #16]
    1b6c:	e58d5014 	str	r5, [sp, #20]
    1b70:	e58d4008 	str	r4, [sp, #8]
    1b74:	e58d500c 	str	r5, [sp, #12]
    1b78:	059f3050 	ldreq	r3, [pc, #80]	; 1bd0 <exp+0x188>
    1b7c:	03a0220e 	moveq	r2, #-536870912	; 0xe0000000
    1b80:	058d2018 	streq	r2, [sp, #24]
    1b84:	058d301c 	streq	r3, [sp, #28]
    1b88:	0affffdd 	beq	1b04 <exp+0xbc>
    1b8c:	e3530002 	cmp	r3, #2
    1b90:	e59f303c 	ldr	r3, [pc, #60]	; 1bd4 <exp+0x18c>
    1b94:	e3a02000 	mov	r2, #0
    1b98:	e58d2018 	str	r2, [sp, #24]
    1b9c:	e58d301c 	str	r3, [sp, #28]
    1ba0:	1affffd7 	bne	1b04 <exp+0xbc>
    1ba4:	eb000ca9 	bl	4e50 <__errno>
    1ba8:	e3a03022 	mov	r3, #34	; 0x22
    1bac:	e5803000 	str	r3, [r0]
    1bb0:	eaffffd7 	b	1b14 <exp+0xcc>
    1bb4:	e1a00000 	nop			; (mov r0, r0)
    1bb8:	fefa39ef 	.word	0xfefa39ef
    1bbc:	40862e42 	.word	0x40862e42
    1bc0:	d52d3051 	.word	0xd52d3051
    1bc4:	c0874910 	.word	0xc0874910
    1bc8:	000054f0 	.word	0x000054f0
    1bcc:	00005280 	.word	0x00005280
    1bd0:	47efffff 	.word	0x47efffff
    1bd4:	7ff00000 	.word	0x7ff00000

00001bd8 <__ieee754_exp>:
    1bd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1bdc:	e59fc40c 	ldr	r12, [pc, #1036]	; 1ff0 <__ieee754_exp+0x418>
    1be0:	e3c13102 	bic	r3, r1, #-2147483648	; 0x80000000
    1be4:	e153000c 	cmp	r3, r12
    1be8:	e24dd00c 	sub	sp, sp, #12
    1bec:	e1a04000 	mov	r4, r0
    1bf0:	e1a05001 	mov	r5, r1
    1bf4:	e1a06fa1 	lsr	r6, r1, #31
    1bf8:	9a00000d 	bls	1c34 <__ieee754_exp+0x5c>
    1bfc:	e59fc3f0 	ldr	r12, [pc, #1008]	; 1ff4 <__ieee754_exp+0x41c>
    1c00:	e153000c 	cmp	r3, r12
    1c04:	9a000020 	bls	1c8c <__ieee754_exp+0xb4>
    1c08:	e3c1c4ff 	bic	r12, r1, #-16777216	; 0xff000000
    1c0c:	e3cc360f 	bic	r3, r12, #15728640	; 0xf00000
    1c10:	e1933000 	orrs	r3, r3, r0
    1c14:	1a0000b2 	bne	1ee4 <__ieee754_exp+0x30c>
    1c18:	e3560000 	cmp	r6, #0
    1c1c:	1a0000da 	bne	1f8c <__ieee754_exp+0x3b4>
    1c20:	e1a00004 	mov	r0, r4
    1c24:	e1a01005 	mov	r1, r5
    1c28:	e28dd00c 	add	sp, sp, #12
    1c2c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1c30:	e12fff1e 	bx	lr
    1c34:	e59f23bc 	ldr	r2, [pc, #956]	; 1ff8 <__ieee754_exp+0x420>
    1c38:	e1530002 	cmp	r3, r2
    1c3c:	8a000098 	bhi	1ea4 <__ieee754_exp+0x2cc>
    1c40:	e59f23b4 	ldr	r2, [pc, #948]	; 1ffc <__ieee754_exp+0x424>
    1c44:	e1530002 	cmp	r3, r2
    1c48:	8a0000a3 	bhi	1edc <__ieee754_exp+0x304>
    1c4c:	e28f3fd1 	add	r3, pc, #836	; 0x344
    1c50:	e893000c 	ldm	r3, {r2, r3}
    1c54:	eb0007f5 	bl	3c30 <__adddf3>
    1c58:	e3a02000 	mov	r2, #0
    1c5c:	e59f339c 	ldr	r3, [pc, #924]	; 2000 <__ieee754_exp+0x428>
    1c60:	eb000a68 	bl	4608 <__aeabi_dcmpgt>
    1c64:	e3500000 	cmp	r0, #0
    1c68:	0a000038 	beq	1d50 <__ieee754_exp+0x178>
    1c6c:	e1a00004 	mov	r0, r4
    1c70:	e1a01005 	mov	r1, r5
    1c74:	e3a02000 	mov	r2, #0
    1c78:	e59f3380 	ldr	r3, [pc, #896]	; 2000 <__ieee754_exp+0x428>
    1c7c:	eb0007eb 	bl	3c30 <__adddf3>
    1c80:	e1a04000 	mov	r4, r0
    1c84:	e1a05001 	mov	r5, r1
    1c88:	eaffffe4 	b	1c20 <__ieee754_exp+0x48>
    1c8c:	e28f3fc3 	add	r3, pc, #780	; 0x30c
    1c90:	e893000c 	ldm	r3, {r2, r3}
    1c94:	eb000a5b 	bl	4608 <__aeabi_dcmpgt>
    1c98:	e3500000 	cmp	r0, #0
    1c9c:	1a000096 	bne	1efc <__ieee754_exp+0x324>
    1ca0:	e1a00004 	mov	r0, r4
    1ca4:	e1a01005 	mov	r1, r5
    1ca8:	e28f3fbe 	add	r3, pc, #760	; 0x2f8
    1cac:	e893000c 	ldm	r3, {r2, r3}
    1cb0:	eb000a42 	bl	45c0 <__aeabi_dcmplt>
    1cb4:	e3500000 	cmp	r0, #0
    1cb8:	1a0000b3 	bne	1f8c <__ieee754_exp+0x3b4>
    1cbc:	e28f3fbb 	add	r3, pc, #748	; 0x2ec
    1cc0:	e893000c 	ldm	r3, {r2, r3}
    1cc4:	e1a00004 	mov	r0, r4
    1cc8:	e1a01005 	mov	r1, r5
    1ccc:	eb0008db 	bl	4040 <__aeabi_dmul>
    1cd0:	e59f332c 	ldr	r3, [pc, #812]	; 2004 <__ieee754_exp+0x42c>
    1cd4:	e0836186 	add	r6, r3, r6, lsl #3
    1cd8:	e2863020 	add	r3, r6, #32
    1cdc:	e893000c 	ldm	r3, {r2, r3}
    1ce0:	eb0007d2 	bl	3c30 <__adddf3>
    1ce4:	eb000a4d 	bl	4620 <__aeabi_d2iz>
    1ce8:	e1a08000 	mov	r8, r0
    1cec:	eb00089c 	bl	3f64 <__aeabi_i2d>
    1cf0:	e28f3d0b 	add	r3, pc, #704	; 0x2c0
    1cf4:	e893000c 	ldm	r3, {r2, r3}
    1cf8:	e1a06000 	mov	r6, r0
    1cfc:	e1a07001 	mov	r7, r1
    1d00:	eb0008ce 	bl	4040 <__aeabi_dmul>
    1d04:	e1a02000 	mov	r2, r0
    1d08:	e1a03001 	mov	r3, r1
    1d0c:	e1a00004 	mov	r0, r4
    1d10:	e1a01005 	mov	r1, r5
    1d14:	eb0007c4 	bl	3c2c <__aeabi_dsub>
    1d18:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    1d1c:	e893000c 	ldm	r3, {r2, r3}
    1d20:	e88d0003 	stm	sp, {r0, r1}
    1d24:	e1a00006 	mov	r0, r6
    1d28:	e1a01007 	mov	r1, r7
    1d2c:	eb0008c3 	bl	4040 <__aeabi_dmul>
    1d30:	e1a0a000 	mov	r10, r0
    1d34:	e1a0b001 	mov	r11, r1
    1d38:	e89d0003 	ldm	sp, {r0, r1}
    1d3c:	e1a0200a 	mov	r2, r10
    1d40:	e1a0300b 	mov	r3, r11
    1d44:	eb0007b8 	bl	3c2c <__aeabi_dsub>
    1d48:	e1a04000 	mov	r4, r0
    1d4c:	e1a05001 	mov	r5, r1
    1d50:	e1a02004 	mov	r2, r4
    1d54:	e1a03005 	mov	r3, r5
    1d58:	e1a00004 	mov	r0, r4
    1d5c:	e1a01005 	mov	r1, r5
    1d60:	eb0008b6 	bl	4040 <__aeabi_dmul>
    1d64:	e28f3f97 	add	r3, pc, #604	; 0x25c
    1d68:	e893000c 	ldm	r3, {r2, r3}
    1d6c:	e1a06000 	mov	r6, r0
    1d70:	e1a07001 	mov	r7, r1
    1d74:	eb0008b1 	bl	4040 <__aeabi_dmul>
    1d78:	e28f3e25 	add	r3, pc, #592	; 0x250
    1d7c:	e893000c 	ldm	r3, {r2, r3}
    1d80:	eb0007a9 	bl	3c2c <__aeabi_dsub>
    1d84:	e1a02006 	mov	r2, r6
    1d88:	e1a03007 	mov	r3, r7
    1d8c:	eb0008ab 	bl	4040 <__aeabi_dmul>
    1d90:	e28f3d09 	add	r3, pc, #576	; 0x240
    1d94:	e893000c 	ldm	r3, {r2, r3}
    1d98:	eb0007a4 	bl	3c30 <__adddf3>
    1d9c:	e1a02006 	mov	r2, r6
    1da0:	e1a03007 	mov	r3, r7
    1da4:	eb0008a5 	bl	4040 <__aeabi_dmul>
    1da8:	e28f3e23 	add	r3, pc, #560	; 0x230
    1dac:	e893000c 	ldm	r3, {r2, r3}
    1db0:	eb00079d 	bl	3c2c <__aeabi_dsub>
    1db4:	e1a02006 	mov	r2, r6
    1db8:	e1a03007 	mov	r3, r7
    1dbc:	eb00089f 	bl	4040 <__aeabi_dmul>
    1dc0:	e28f3e22 	add	r3, pc, #544	; 0x220
    1dc4:	e893000c 	ldm	r3, {r2, r3}
    1dc8:	eb000798 	bl	3c30 <__adddf3>
    1dcc:	e1a02006 	mov	r2, r6
    1dd0:	e1a03007 	mov	r3, r7
    1dd4:	eb000899 	bl	4040 <__aeabi_dmul>
    1dd8:	e1a02000 	mov	r2, r0
    1ddc:	e1a03001 	mov	r3, r1
    1de0:	e1a00004 	mov	r0, r4
    1de4:	e1a01005 	mov	r1, r5
    1de8:	eb00078f 	bl	3c2c <__aeabi_dsub>
    1dec:	e3580000 	cmp	r8, #0
    1df0:	e1a06000 	mov	r6, r0
    1df4:	e1a07001 	mov	r7, r1
    1df8:	0a000047 	beq	1f1c <__ieee754_exp+0x344>
    1dfc:	e1a02000 	mov	r2, r0
    1e00:	e1a03001 	mov	r3, r1
    1e04:	e1a00004 	mov	r0, r4
    1e08:	e1a01005 	mov	r1, r5
    1e0c:	eb00088b 	bl	4040 <__aeabi_dmul>
    1e10:	e1a02006 	mov	r2, r6
    1e14:	e1a04000 	mov	r4, r0
    1e18:	e1a05001 	mov	r5, r1
    1e1c:	e1a03007 	mov	r3, r7
    1e20:	e3a00000 	mov	r0, #0
    1e24:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    1e28:	eb00077f 	bl	3c2c <__aeabi_dsub>
    1e2c:	e1a02000 	mov	r2, r0
    1e30:	e1a03001 	mov	r3, r1
    1e34:	e1a00004 	mov	r0, r4
    1e38:	e1a01005 	mov	r1, r5
    1e3c:	eb000923 	bl	42d0 <__aeabi_ddiv>
    1e40:	e1a02000 	mov	r2, r0
    1e44:	e1a03001 	mov	r3, r1
    1e48:	e1a0000a 	mov	r0, r10
    1e4c:	e1a0100b 	mov	r1, r11
    1e50:	eb000775 	bl	3c2c <__aeabi_dsub>
    1e54:	e89d000c 	ldm	sp, {r2, r3}
    1e58:	eb000773 	bl	3c2c <__aeabi_dsub>
    1e5c:	e1a03001 	mov	r3, r1
    1e60:	e1a02000 	mov	r2, r0
    1e64:	e59f1194 	ldr	r1, [pc, #404]	; 2000 <__ieee754_exp+0x428>
    1e68:	e3a00000 	mov	r0, #0
    1e6c:	eb00076e 	bl	3c2c <__aeabi_dsub>
    1e70:	e3e03fff 	mvn	r3, #1020	; 0x3fc
    1e74:	e1580003 	cmp	r8, r3
    1e78:	a1a04000 	movge	r4, r0
    1e7c:	a0815a08 	addge	r5, r1, r8, lsl #20
    1e80:	aaffff66 	bge	1c20 <__ieee754_exp+0x48>
    1e84:	e2888ffa 	add	r8, r8, #1000	; 0x3e8
    1e88:	e0811a08 	add	r1, r1, r8, lsl #20
    1e8c:	e3a02000 	mov	r2, #0
    1e90:	e3a03617 	mov	r3, #24117248	; 0x1700000
    1e94:	eb000869 	bl	4040 <__aeabi_dmul>
    1e98:	e1a04000 	mov	r4, r0
    1e9c:	e1a05001 	mov	r5, r1
    1ea0:	eaffff5e 	b	1c20 <__ieee754_exp+0x48>
    1ea4:	e59f215c 	ldr	r2, [pc, #348]	; 2008 <__ieee754_exp+0x430>
    1ea8:	e1530002 	cmp	r3, r2
    1eac:	8affff82 	bhi	1cbc <__ieee754_exp+0xe4>
    1eb0:	e59f414c 	ldr	r4, [pc, #332]	; 2004 <__ieee754_exp+0x42c>
    1eb4:	e0844186 	add	r4, r4, r6, lsl #3
    1eb8:	e894000c 	ldm	r4, {r2, r3}
    1ebc:	eb00075a 	bl	3c2c <__aeabi_dsub>
    1ec0:	e2668000 	rsb	r8, r6, #0
    1ec4:	e0668008 	rsb	r8, r6, r8
    1ec8:	e88d0003 	stm	sp, {r0, r1}
    1ecc:	e284b010 	add	r11, r4, #16
    1ed0:	e89b0c00 	ldm	r11, {r10, r11}
    1ed4:	e2888001 	add	r8, r8, #1
    1ed8:	eaffff96 	b	1d38 <__ieee754_exp+0x160>
    1edc:	e3a08000 	mov	r8, #0
    1ee0:	eaffff9a 	b	1d50 <__ieee754_exp+0x178>
    1ee4:	e1a02000 	mov	r2, r0
    1ee8:	e1a03001 	mov	r3, r1
    1eec:	eb00074f 	bl	3c30 <__adddf3>
    1ef0:	e1a04000 	mov	r4, r0
    1ef4:	e1a05001 	mov	r5, r1
    1ef8:	eaffff48 	b	1c20 <__ieee754_exp+0x48>
    1efc:	e28f1094 	add	r1, pc, #148	; 0x94
    1f00:	e8910003 	ldm	r1, {r0, r1}
    1f04:	e1a02000 	mov	r2, r0
    1f08:	e1a03001 	mov	r3, r1
    1f0c:	eb00084b 	bl	4040 <__aeabi_dmul>
    1f10:	e1a04000 	mov	r4, r0
    1f14:	e1a05001 	mov	r5, r1
    1f18:	eaffff40 	b	1c20 <__ieee754_exp+0x48>
    1f1c:	e1a00004 	mov	r0, r4
    1f20:	e1a01005 	mov	r1, r5
    1f24:	e1a02006 	mov	r2, r6
    1f28:	e1a03007 	mov	r3, r7
    1f2c:	eb000843 	bl	4040 <__aeabi_dmul>
    1f30:	e3a02000 	mov	r2, #0
    1f34:	e1a08000 	mov	r8, r0
    1f38:	e1a09001 	mov	r9, r1
    1f3c:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    1f40:	e1a00006 	mov	r0, r6
    1f44:	e1a01007 	mov	r1, r7
    1f48:	eb000737 	bl	3c2c <__aeabi_dsub>
    1f4c:	e1a02000 	mov	r2, r0
    1f50:	e1a03001 	mov	r3, r1
    1f54:	e1a00008 	mov	r0, r8
    1f58:	e1a01009 	mov	r1, r9
    1f5c:	eb0008db 	bl	42d0 <__aeabi_ddiv>
    1f60:	e1a02004 	mov	r2, r4
    1f64:	e1a03005 	mov	r3, r5
    1f68:	eb00072f 	bl	3c2c <__aeabi_dsub>
    1f6c:	e1a02000 	mov	r2, r0
    1f70:	e1a03001 	mov	r3, r1
    1f74:	e3a00000 	mov	r0, #0
    1f78:	e59f1080 	ldr	r1, [pc, #128]	; 2000 <__ieee754_exp+0x428>
    1f7c:	eb00072a 	bl	3c2c <__aeabi_dsub>
    1f80:	e1a04000 	mov	r4, r0
    1f84:	e1a05001 	mov	r5, r1
    1f88:	eaffff24 	b	1c20 <__ieee754_exp+0x48>
    1f8c:	e3a04000 	mov	r4, #0
    1f90:	e3a05000 	mov	r5, #0
    1f94:	eaffff21 	b	1c20 <__ieee754_exp+0x48>
    1f98:	8800759c 	.word	0x8800759c
    1f9c:	7e37e43c 	.word	0x7e37e43c
    1fa0:	fefa39ef 	.word	0xfefa39ef
    1fa4:	40862e42 	.word	0x40862e42
    1fa8:	d52d3051 	.word	0xd52d3051
    1fac:	c0874910 	.word	0xc0874910
    1fb0:	652b82fe 	.word	0x652b82fe
    1fb4:	3ff71547 	.word	0x3ff71547
    1fb8:	fee00000 	.word	0xfee00000
    1fbc:	3fe62e42 	.word	0x3fe62e42
    1fc0:	35793c76 	.word	0x35793c76
    1fc4:	3dea39ef 	.word	0x3dea39ef
    1fc8:	72bea4d0 	.word	0x72bea4d0
    1fcc:	3e663769 	.word	0x3e663769
    1fd0:	c5d26bf1 	.word	0xc5d26bf1
    1fd4:	3ebbbd41 	.word	0x3ebbbd41
    1fd8:	af25de2c 	.word	0xaf25de2c
    1fdc:	3f11566a 	.word	0x3f11566a
    1fe0:	16bebd93 	.word	0x16bebd93
    1fe4:	3f66c16c 	.word	0x3f66c16c
    1fe8:	5555553e 	.word	0x5555553e
    1fec:	3fc55555 	.word	0x3fc55555
    1ff0:	40862e41 	.word	0x40862e41
    1ff4:	7fefffff 	.word	0x7fefffff
    1ff8:	3fd62e42 	.word	0x3fd62e42
    1ffc:	3e2fffff 	.word	0x3e2fffff
    2000:	3ff00000 	.word	0x3ff00000
    2004:	00005288 	.word	0x00005288
    2008:	3ff0a2b1 	.word	0x3ff0a2b1
    200c:	e1a00000 	nop			; (mov r0, r0)

00002010 <__ieee754_rem_pio2>:
    2010:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2014:	e59fc3bc 	ldr	r12, [pc, #956]	; 23d8 <__ieee754_rem_pio2+0x3c8>
    2018:	e3c17102 	bic	r7, r1, #-2147483648	; 0x80000000
    201c:	e157000c 	cmp	r7, r12
    2020:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    2024:	e1a04000 	mov	r4, r0
    2028:	e1a05001 	mov	r5, r1
    202c:	e1a0a000 	mov	r10, r0
    2030:	e1a0b001 	mov	r11, r1
    2034:	e1a08002 	mov	r8, r2
    2038:	da00005b 	ble	21ac <__ieee754_rem_pio2+0x19c>
    203c:	e59f2398 	ldr	r2, [pc, #920]	; 23dc <__ieee754_rem_pio2+0x3cc>
    2040:	e1570002 	cmp	r7, r2
    2044:	e1a09001 	mov	r9, r1
    2048:	ca000019 	bgt	20b4 <__ieee754_rem_pio2+0xa4>
    204c:	e3510000 	cmp	r1, #0
    2050:	e28f3fd6 	add	r3, pc, #856	; 0x358
    2054:	e893000c 	ldm	r3, {r2, r3}
    2058:	da000149 	ble	2584 <__ieee754_rem_pio2+0x574>
    205c:	eb0006f2 	bl	3c2c <__aeabi_dsub>
    2060:	e59f3378 	ldr	r3, [pc, #888]	; 23e0 <__ieee754_rem_pio2+0x3d0>
    2064:	e1570003 	cmp	r7, r3
    2068:	e1a0a000 	mov	r10, r0
    206c:	e1a0b001 	mov	r11, r1
    2070:	0a00005f 	beq	21f4 <__ieee754_rem_pio2+0x1e4>
    2074:	e28f3fcf 	add	r3, pc, #828	; 0x33c
    2078:	e893000c 	ldm	r3, {r2, r3}
    207c:	eb0006ea 	bl	3c2c <__aeabi_dsub>
    2080:	e1a02000 	mov	r2, r0
    2084:	e1a03001 	mov	r3, r1
    2088:	e8880003 	stm	r8, {r0, r1}
    208c:	e1a0000a 	mov	r0, r10
    2090:	e1a0100b 	mov	r1, r11
    2094:	eb0006e4 	bl	3c2c <__aeabi_dsub>
    2098:	e28f3fc6 	add	r3, pc, #792	; 0x318
    209c:	e893000c 	ldm	r3, {r2, r3}
    20a0:	eb0006e1 	bl	3c2c <__aeabi_dsub>
    20a4:	e3a06001 	mov	r6, #1
    20a8:	e5880008 	str	r0, [r8, #8]
    20ac:	e588100c 	str	r1, [r8, #12]
    20b0:	ea000043 	b	21c4 <__ieee754_rem_pio2+0x1b4>
    20b4:	e59f3328 	ldr	r3, [pc, #808]	; 23e4 <__ieee754_rem_pio2+0x3d4>
    20b8:	e1570003 	cmp	r7, r3
    20bc:	da000075 	ble	2298 <__ieee754_rem_pio2+0x288>
    20c0:	e59f3320 	ldr	r3, [pc, #800]	; 23e8 <__ieee754_rem_pio2+0x3d8>
    20c4:	e1570003 	cmp	r7, r3
    20c8:	ca000041 	bgt	21d4 <__ieee754_rem_pio2+0x1c4>
    20cc:	e1a0aa47 	asr	r10, r7, #20
    20d0:	e24aae41 	sub	r10, r10, #1040	; 0x410
    20d4:	e24aa006 	sub	r10, r10, #6
    20d8:	e0475a0a 	sub	r5, r7, r10, lsl #20
    20dc:	e1a01005 	mov	r1, r5
    20e0:	e1a04000 	mov	r4, r0
    20e4:	eb00094d 	bl	4620 <__aeabi_d2iz>
    20e8:	eb00079d 	bl	3f64 <__aeabi_i2d>
    20ec:	e1a06000 	mov	r6, r0
    20f0:	e1a07001 	mov	r7, r1
    20f4:	e1a02000 	mov	r2, r0
    20f8:	e1a03001 	mov	r3, r1
    20fc:	e1a00004 	mov	r0, r4
    2100:	e1a01005 	mov	r1, r5
    2104:	e58d6020 	str	r6, [sp, #32]
    2108:	e58d7024 	str	r7, [sp, #36]	; 0x24
    210c:	eb0006c6 	bl	3c2c <__aeabi_dsub>
    2110:	e3a02000 	mov	r2, #0
    2114:	e59f32d0 	ldr	r3, [pc, #720]	; 23ec <__ieee754_rem_pio2+0x3dc>
    2118:	eb0007c8 	bl	4040 <__aeabi_dmul>
    211c:	e1a06000 	mov	r6, r0
    2120:	e1a07001 	mov	r7, r1
    2124:	eb00093d 	bl	4620 <__aeabi_d2iz>
    2128:	eb00078d 	bl	3f64 <__aeabi_i2d>
    212c:	e1a02000 	mov	r2, r0
    2130:	e1a03001 	mov	r3, r1
    2134:	e1a04000 	mov	r4, r0
    2138:	e1a05001 	mov	r5, r1
    213c:	e1a00006 	mov	r0, r6
    2140:	e1a01007 	mov	r1, r7
    2144:	e58d4028 	str	r4, [sp, #40]	; 0x28
    2148:	e58d502c 	str	r5, [sp, #44]	; 0x2c
    214c:	eb0006b6 	bl	3c2c <__aeabi_dsub>
    2150:	e3a02000 	mov	r2, #0
    2154:	e59f3290 	ldr	r3, [pc, #656]	; 23ec <__ieee754_rem_pio2+0x3dc>
    2158:	eb0007b8 	bl	4040 <__aeabi_dmul>
    215c:	e3a02000 	mov	r2, #0
    2160:	e3a03000 	mov	r3, #0
    2164:	e58d0030 	str	r0, [sp, #48]	; 0x30
    2168:	e58d1034 	str	r1, [sp, #52]	; 0x34
    216c:	eb00090d 	bl	45a8 <__aeabi_dcmpeq>
    2170:	e3500000 	cmp	r0, #0
    2174:	03a06003 	moveq	r6, #3
    2178:	0a000032 	beq	2248 <__ieee754_rem_pio2+0x238>
    217c:	e28d7028 	add	r7, sp, #40	; 0x28
    2180:	e3a06003 	mov	r6, #3
    2184:	e1a00004 	mov	r0, r4
    2188:	e1a01005 	mov	r1, r5
    218c:	e3a02000 	mov	r2, #0
    2190:	e3a03000 	mov	r3, #0
    2194:	eb000903 	bl	45a8 <__aeabi_dcmpeq>
    2198:	e3500000 	cmp	r0, #0
    219c:	e2466001 	sub	r6, r6, #1
    21a0:	0a000028 	beq	2248 <__ieee754_rem_pio2+0x238>
    21a4:	e9370003 	ldmdb	r7!, {r0, r1}
    21a8:	eafffff7 	b	218c <__ieee754_rem_pio2+0x17c>
    21ac:	e8820030 	stm	r2, {r4, r5}
    21b0:	e3a03000 	mov	r3, #0
    21b4:	e3a02000 	mov	r2, #0
    21b8:	e5882008 	str	r2, [r8, #8]
    21bc:	e588300c 	str	r3, [r8, #12]
    21c0:	e3a06000 	mov	r6, #0
    21c4:	e1a00006 	mov	r0, r6
    21c8:	e28dd03c 	add	sp, sp, #60	; 0x3c
    21cc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    21d0:	e12fff1e 	bx	lr
    21d4:	e1a02000 	mov	r2, r0
    21d8:	e1a03001 	mov	r3, r1
    21dc:	eb000692 	bl	3c2c <__aeabi_dsub>
    21e0:	e3a06000 	mov	r6, #0
    21e4:	e5880008 	str	r0, [r8, #8]
    21e8:	e588100c 	str	r1, [r8, #12]
    21ec:	e8880003 	stm	r8, {r0, r1}
    21f0:	eafffff3 	b	21c4 <__ieee754_rem_pio2+0x1b4>
    21f4:	e28f3f71 	add	r3, pc, #452	; 0x1c4
    21f8:	e893000c 	ldm	r3, {r2, r3}
    21fc:	eb00068a 	bl	3c2c <__aeabi_dsub>
    2200:	e28f3d07 	add	r3, pc, #448	; 0x1c0
    2204:	e893000c 	ldm	r3, {r2, r3}
    2208:	e1a06000 	mov	r6, r0
    220c:	e1a07001 	mov	r7, r1
    2210:	eb000685 	bl	3c2c <__aeabi_dsub>
    2214:	e1a02000 	mov	r2, r0
    2218:	e1a03001 	mov	r3, r1
    221c:	e8880003 	stm	r8, {r0, r1}
    2220:	e1a00006 	mov	r0, r6
    2224:	e1a01007 	mov	r1, r7
    2228:	eb00067f 	bl	3c2c <__aeabi_dsub>
    222c:	e28f3f65 	add	r3, pc, #404	; 0x194
    2230:	e893000c 	ldm	r3, {r2, r3}
    2234:	eb00067c 	bl	3c2c <__aeabi_dsub>
    2238:	e3a06001 	mov	r6, #1
    223c:	e5880008 	str	r0, [r8, #8]
    2240:	e588100c 	str	r1, [r8, #12]
    2244:	eaffffde 	b	21c4 <__ieee754_rem_pio2+0x1b4>
    2248:	e3a03002 	mov	r3, #2
    224c:	e58d3000 	str	r3, [sp]
    2250:	e59f3198 	ldr	r3, [pc, #408]	; 23f0 <__ieee754_rem_pio2+0x3e0>
    2254:	e28d0020 	add	r0, sp, #32
    2258:	e58d3004 	str	r3, [sp, #4]
    225c:	e1a01008 	mov	r1, r8
    2260:	e1a03006 	mov	r3, r6
    2264:	e1a0200a 	mov	r2, r10
    2268:	eb0001d0 	bl	29b0 <__kernel_rem_pio2>
    226c:	e3590000 	cmp	r9, #0
    2270:	e1a06000 	mov	r6, r0
    2274:	aaffffd2 	bge	21c4 <__ieee754_rem_pio2+0x1b4>
    2278:	e5982004 	ldr	r2, [r8, #4]
    227c:	e598300c 	ldr	r3, [r8, #12]
    2280:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    2284:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    2288:	e5882004 	str	r2, [r8, #4]
    228c:	e588300c 	str	r3, [r8, #12]
    2290:	e2606000 	rsb	r6, r0, #0
    2294:	eaffffca 	b	21c4 <__ieee754_rem_pio2+0x1b4>
    2298:	eb000532 	bl	3768 <fabs>
    229c:	e28f3f4b 	add	r3, pc, #300	; 0x12c
    22a0:	e893000c 	ldm	r3, {r2, r3}
    22a4:	e1a04000 	mov	r4, r0
    22a8:	e1a05001 	mov	r5, r1
    22ac:	eb000763 	bl	4040 <__aeabi_dmul>
    22b0:	e3a02000 	mov	r2, #0
    22b4:	e59f3138 	ldr	r3, [pc, #312]	; 23f4 <__ieee754_rem_pio2+0x3e4>
    22b8:	eb00065c 	bl	3c30 <__adddf3>
    22bc:	eb0008d7 	bl	4620 <__aeabi_d2iz>
    22c0:	e1a06000 	mov	r6, r0
    22c4:	eb000726 	bl	3f64 <__aeabi_i2d>
    22c8:	e28f30e0 	add	r3, pc, #224	; 0xe0
    22cc:	e893000c 	ldm	r3, {r2, r3}
    22d0:	e58d0010 	str	r0, [sp, #16]
    22d4:	e58d1014 	str	r1, [sp, #20]
    22d8:	eb000758 	bl	4040 <__aeabi_dmul>
    22dc:	e1a02000 	mov	r2, r0
    22e0:	e1a03001 	mov	r3, r1
    22e4:	e1a00004 	mov	r0, r4
    22e8:	e1a01005 	mov	r1, r5
    22ec:	eb00064e 	bl	3c2c <__aeabi_dsub>
    22f0:	e28f30c0 	add	r3, pc, #192	; 0xc0
    22f4:	e893000c 	ldm	r3, {r2, r3}
    22f8:	e1a0a000 	mov	r10, r0
    22fc:	e1a0b001 	mov	r11, r1
    2300:	e28d1010 	add	r1, sp, #16
    2304:	e8910003 	ldm	r1, {r0, r1}
    2308:	eb00074c 	bl	4040 <__aeabi_dmul>
    230c:	e356001f 	cmp	r6, #31
    2310:	e58d0008 	str	r0, [sp, #8]
    2314:	e58d100c 	str	r1, [sp, #12]
    2318:	e1a0000a 	mov	r0, r10
    231c:	e1a0100b 	mov	r1, r11
    2320:	ca000035 	bgt	23fc <__ieee754_rem_pio2+0x3ec>
    2324:	e59f30cc 	ldr	r3, [pc, #204]	; 23f8 <__ieee754_rem_pio2+0x3e8>
    2328:	e2462001 	sub	r2, r6, #1
    232c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
    2330:	e1530007 	cmp	r3, r7
    2334:	0a000030 	beq	23fc <__ieee754_rem_pio2+0x3ec>
    2338:	e28d3008 	add	r3, sp, #8
    233c:	e893000c 	ldm	r3, {r2, r3}
    2340:	eb000639 	bl	3c2c <__aeabi_dsub>
    2344:	e1a02000 	mov	r2, r0
    2348:	e1a03001 	mov	r3, r1
    234c:	e888000c 	stm	r8, {r2, r3}
    2350:	e1a05000 	mov	r5, r0
    2354:	e1a04001 	mov	r4, r1
    2358:	e1a02005 	mov	r2, r5
    235c:	e1a03004 	mov	r3, r4
    2360:	e1a0000a 	mov	r0, r10
    2364:	e1a0100b 	mov	r1, r11
    2368:	eb00062f 	bl	3c2c <__aeabi_dsub>
    236c:	e28d3008 	add	r3, sp, #8
    2370:	e893000c 	ldm	r3, {r2, r3}
    2374:	eb00062c 	bl	3c2c <__aeabi_dsub>
    2378:	e3590000 	cmp	r9, #0
    237c:	e1a02000 	mov	r2, r0
    2380:	e1a03001 	mov	r3, r1
    2384:	e5882008 	str	r2, [r8, #8]
    2388:	e588300c 	str	r3, [r8, #12]
    238c:	aaffff8c 	bge	21c4 <__ieee754_rem_pio2+0x1b4>
    2390:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    2394:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
    2398:	e5885000 	str	r5, [r8]
    239c:	e5884004 	str	r4, [r8, #4]
    23a0:	e5880008 	str	r0, [r8, #8]
    23a4:	e588100c 	str	r1, [r8, #12]
    23a8:	e2666000 	rsb	r6, r6, #0
    23ac:	eaffff84 	b	21c4 <__ieee754_rem_pio2+0x1b4>
    23b0:	54400000 	.word	0x54400000
    23b4:	3ff921fb 	.word	0x3ff921fb
    23b8:	1a626331 	.word	0x1a626331
    23bc:	3dd0b461 	.word	0x3dd0b461
    23c0:	1a600000 	.word	0x1a600000
    23c4:	3dd0b461 	.word	0x3dd0b461
    23c8:	2e037073 	.word	0x2e037073
    23cc:	3ba3198a 	.word	0x3ba3198a
    23d0:	6dc9c883 	.word	0x6dc9c883
    23d4:	3fe45f30 	.word	0x3fe45f30
    23d8:	3fe921fb 	.word	0x3fe921fb
    23dc:	4002d97b 	.word	0x4002d97b
    23e0:	3ff921fb 	.word	0x3ff921fb
    23e4:	413921fb 	.word	0x413921fb
    23e8:	7fefffff 	.word	0x7fefffff
    23ec:	41700000 	.word	0x41700000
    23f0:	00005338 	.word	0x00005338
    23f4:	3fe00000 	.word	0x3fe00000
    23f8:	000052b8 	.word	0x000052b8
    23fc:	e28d3008 	add	r3, sp, #8
    2400:	e893000c 	ldm	r3, {r2, r3}
    2404:	eb000608 	bl	3c2c <__aeabi_dsub>
    2408:	e1a07a47 	asr	r7, r7, #20
    240c:	e1a04001 	mov	r4, r1
    2410:	e1a01081 	lsl	r1, r1, #1
    2414:	e1a05000 	mov	r5, r0
    2418:	e0471aa1 	sub	r1, r7, r1, lsr #21
    241c:	e1a02005 	mov	r2, r5
    2420:	e1a03004 	mov	r3, r4
    2424:	e3510010 	cmp	r1, #16
    2428:	e888000c 	stm	r8, {r2, r3}
    242c:	daffffc9 	ble	2358 <__ieee754_rem_pio2+0x348>
    2430:	e28f3f82 	add	r3, pc, #520	; 0x208
    2434:	e893000c 	ldm	r3, {r2, r3}
    2438:	e28d1010 	add	r1, sp, #16
    243c:	e8910003 	ldm	r1, {r0, r1}
    2440:	eb0006fe 	bl	4040 <__aeabi_dmul>
    2444:	e1a04000 	mov	r4, r0
    2448:	e1a05001 	mov	r5, r1
    244c:	e1a02004 	mov	r2, r4
    2450:	e1a03005 	mov	r3, r5
    2454:	e1a0000a 	mov	r0, r10
    2458:	e1a0100b 	mov	r1, r11
    245c:	eb0005f2 	bl	3c2c <__aeabi_dsub>
    2460:	e58d0018 	str	r0, [sp, #24]
    2464:	e58d101c 	str	r1, [sp, #28]
    2468:	e28d3018 	add	r3, sp, #24
    246c:	e893000c 	ldm	r3, {r2, r3}
    2470:	e1a0000a 	mov	r0, r10
    2474:	e1a0100b 	mov	r1, r11
    2478:	eb0005eb 	bl	3c2c <__aeabi_dsub>
    247c:	e1a02004 	mov	r2, r4
    2480:	e1a03005 	mov	r3, r5
    2484:	eb0005e8 	bl	3c2c <__aeabi_dsub>
    2488:	e28f3f6e 	add	r3, pc, #440	; 0x1b8
    248c:	e893000c 	ldm	r3, {r2, r3}
    2490:	e1a04000 	mov	r4, r0
    2494:	e1a05001 	mov	r5, r1
    2498:	e28d1010 	add	r1, sp, #16
    249c:	e8910003 	ldm	r1, {r0, r1}
    24a0:	eb0006e6 	bl	4040 <__aeabi_dmul>
    24a4:	e1a02004 	mov	r2, r4
    24a8:	e1a03005 	mov	r3, r5
    24ac:	eb0005de 	bl	3c2c <__aeabi_dsub>
    24b0:	e58d0008 	str	r0, [sp, #8]
    24b4:	e58d100c 	str	r1, [sp, #12]
    24b8:	e28d3008 	add	r3, sp, #8
    24bc:	e893000c 	ldm	r3, {r2, r3}
    24c0:	e28d1018 	add	r1, sp, #24
    24c4:	e8910003 	ldm	r1, {r0, r1}
    24c8:	eb0005d7 	bl	3c2c <__aeabi_dsub>
    24cc:	e1a04001 	mov	r4, r1
    24d0:	e1a01081 	lsl	r1, r1, #1
    24d4:	e1a05000 	mov	r5, r0
    24d8:	e0477aa1 	sub	r7, r7, r1, lsr #21
    24dc:	e1a02005 	mov	r2, r5
    24e0:	e1a03004 	mov	r3, r4
    24e4:	e3570031 	cmp	r7, #49	; 0x31
    24e8:	e888000c 	stm	r8, {r2, r3}
    24ec:	da00004f 	ble	2630 <__ieee754_rem_pio2+0x620>
    24f0:	e3a0242e 	mov	r2, #771751936	; 0x2e000000
    24f4:	e59f3164 	ldr	r3, [pc, #356]	; 2660 <__ieee754_rem_pio2+0x650>
    24f8:	e28d1010 	add	r1, sp, #16
    24fc:	e8910003 	ldm	r1, {r0, r1}
    2500:	eb0006ce 	bl	4040 <__aeabi_dmul>
    2504:	e1a04000 	mov	r4, r0
    2508:	e1a05001 	mov	r5, r1
    250c:	e1a02004 	mov	r2, r4
    2510:	e1a03005 	mov	r3, r5
    2514:	e28d1018 	add	r1, sp, #24
    2518:	e8910003 	ldm	r1, {r0, r1}
    251c:	eb0005c2 	bl	3c2c <__aeabi_dsub>
    2520:	e1a0a000 	mov	r10, r0
    2524:	e1a0b001 	mov	r11, r1
    2528:	e1a0200a 	mov	r2, r10
    252c:	e1a0300b 	mov	r3, r11
    2530:	e28d1018 	add	r1, sp, #24
    2534:	e8910003 	ldm	r1, {r0, r1}
    2538:	eb0005bb 	bl	3c2c <__aeabi_dsub>
    253c:	e1a02004 	mov	r2, r4
    2540:	e1a03005 	mov	r3, r5
    2544:	eb0005b8 	bl	3c2c <__aeabi_dsub>
    2548:	e28f3c01 	add	r3, pc, #256	; 0x100
    254c:	e893000c 	ldm	r3, {r2, r3}
    2550:	e1a04000 	mov	r4, r0
    2554:	e1a05001 	mov	r5, r1
    2558:	e28d1010 	add	r1, sp, #16
    255c:	e8910003 	ldm	r1, {r0, r1}
    2560:	eb0006b6 	bl	4040 <__aeabi_dmul>
    2564:	e1a02004 	mov	r2, r4
    2568:	e1a03005 	mov	r3, r5
    256c:	eb0005ae 	bl	3c2c <__aeabi_dsub>
    2570:	e58d0008 	str	r0, [sp, #8]
    2574:	e58d100c 	str	r1, [sp, #12]
    2578:	e1a0000a 	mov	r0, r10
    257c:	e1a0100b 	mov	r1, r11
    2580:	eaffff6c 	b	2338 <__ieee754_rem_pio2+0x328>
    2584:	eb0005a9 	bl	3c30 <__adddf3>
    2588:	e59f30d4 	ldr	r3, [pc, #212]	; 2664 <__ieee754_rem_pio2+0x654>
    258c:	e1570003 	cmp	r7, r3
    2590:	e1a0a000 	mov	r10, r0
    2594:	e1a0b001 	mov	r11, r1
    2598:	0a00000f 	beq	25dc <__ieee754_rem_pio2+0x5cc>
    259c:	e28f30b4 	add	r3, pc, #180	; 0xb4
    25a0:	e893000c 	ldm	r3, {r2, r3}
    25a4:	eb0005a1 	bl	3c30 <__adddf3>
    25a8:	e1a02000 	mov	r2, r0
    25ac:	e1a03001 	mov	r3, r1
    25b0:	e8880003 	stm	r8, {r0, r1}
    25b4:	e1a0000a 	mov	r0, r10
    25b8:	e1a0100b 	mov	r1, r11
    25bc:	eb00059a 	bl	3c2c <__aeabi_dsub>
    25c0:	e28f3090 	add	r3, pc, #144	; 0x90
    25c4:	e893000c 	ldm	r3, {r2, r3}
    25c8:	eb000598 	bl	3c30 <__adddf3>
    25cc:	e3e06000 	mvn	r6, #0
    25d0:	e5880008 	str	r0, [r8, #8]
    25d4:	e588100c 	str	r1, [r8, #12]
    25d8:	eafffef9 	b	21c4 <__ieee754_rem_pio2+0x1b4>
    25dc:	e28f305c 	add	r3, pc, #92	; 0x5c
    25e0:	e893000c 	ldm	r3, {r2, r3}
    25e4:	eb000591 	bl	3c30 <__adddf3>
    25e8:	e28f3058 	add	r3, pc, #88	; 0x58
    25ec:	e893000c 	ldm	r3, {r2, r3}
    25f0:	e1a06000 	mov	r6, r0
    25f4:	e1a07001 	mov	r7, r1
    25f8:	eb00058c 	bl	3c30 <__adddf3>
    25fc:	e1a02000 	mov	r2, r0
    2600:	e1a03001 	mov	r3, r1
    2604:	e8880003 	stm	r8, {r0, r1}
    2608:	e1a00006 	mov	r0, r6
    260c:	e1a01007 	mov	r1, r7
    2610:	eb000585 	bl	3c2c <__aeabi_dsub>
    2614:	e28f302c 	add	r3, pc, #44	; 0x2c
    2618:	e893000c 	ldm	r3, {r2, r3}
    261c:	eb000583 	bl	3c30 <__adddf3>
    2620:	e3e06000 	mvn	r6, #0
    2624:	e5880008 	str	r0, [r8, #8]
    2628:	e588100c 	str	r1, [r8, #12]
    262c:	eafffee4 	b	21c4 <__ieee754_rem_pio2+0x1b4>
    2630:	e28db018 	add	r11, sp, #24
    2634:	e89b0c00 	ldm	r11, {r10, r11}
    2638:	eaffff46 	b	2358 <__ieee754_rem_pio2+0x348>
    263c:	e1a00000 	nop			; (mov r0, r0)
    2640:	1a600000 	.word	0x1a600000
    2644:	3dd0b461 	.word	0x3dd0b461
    2648:	2e037073 	.word	0x2e037073
    264c:	3ba3198a 	.word	0x3ba3198a
    2650:	252049c1 	.word	0x252049c1
    2654:	397b839a 	.word	0x397b839a
    2658:	1a626331 	.word	0x1a626331
    265c:	3dd0b461 	.word	0x3dd0b461
    2660:	3ba3198a 	.word	0x3ba3198a
    2664:	3ff921fb 	.word	0x3ff921fb

00002668 <__kernel_cos>:
    2668:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    266c:	e3c19102 	bic	r9, r1, #-2147483648	; 0x80000000
    2670:	e35905f9 	cmp	r9, #1044381696	; 0x3e400000
    2674:	e24dd014 	sub	sp, sp, #20
    2678:	e1a06000 	mov	r6, r0
    267c:	e1a07001 	mov	r7, r1
    2680:	e1a04000 	mov	r4, r0
    2684:	e1a05001 	mov	r5, r1
    2688:	e1a0a002 	mov	r10, r2
    268c:	e1a0b003 	mov	r11, r3
    2690:	aa00004d 	bge	27cc <__kernel_cos+0x164>
    2694:	eb0007e1 	bl	4620 <__aeabi_d2iz>
    2698:	e3500000 	cmp	r0, #0
    269c:	0a0000ae 	beq	295c <__kernel_cos+0x2f4>
    26a0:	e1a02006 	mov	r2, r6
    26a4:	e1a03007 	mov	r3, r7
    26a8:	e1a00006 	mov	r0, r6
    26ac:	e1a01007 	mov	r1, r7
    26b0:	eb000662 	bl	4040 <__aeabi_dmul>
    26b4:	e28f3fab 	add	r3, pc, #684	; 0x2ac
    26b8:	e893000c 	ldm	r3, {r2, r3}
    26bc:	e1a04000 	mov	r4, r0
    26c0:	e1a05001 	mov	r5, r1
    26c4:	eb00065d 	bl	4040 <__aeabi_dmul>
    26c8:	e28f3e2a 	add	r3, pc, #672	; 0x2a0
    26cc:	e893000c 	ldm	r3, {r2, r3}
    26d0:	eb000556 	bl	3c30 <__adddf3>
    26d4:	e1a02004 	mov	r2, r4
    26d8:	e1a03005 	mov	r3, r5
    26dc:	eb000657 	bl	4040 <__aeabi_dmul>
    26e0:	e28f3e29 	add	r3, pc, #656	; 0x290
    26e4:	e893000c 	ldm	r3, {r2, r3}
    26e8:	eb00054f 	bl	3c2c <__aeabi_dsub>
    26ec:	e1a02004 	mov	r2, r4
    26f0:	e1a03005 	mov	r3, r5
    26f4:	eb000651 	bl	4040 <__aeabi_dmul>
    26f8:	e28f3d0a 	add	r3, pc, #640	; 0x280
    26fc:	e893000c 	ldm	r3, {r2, r3}
    2700:	eb00054a 	bl	3c30 <__adddf3>
    2704:	e1a02004 	mov	r2, r4
    2708:	e1a03005 	mov	r3, r5
    270c:	eb00064b 	bl	4040 <__aeabi_dmul>
    2710:	e28f3e27 	add	r3, pc, #624	; 0x270
    2714:	e893000c 	ldm	r3, {r2, r3}
    2718:	eb000543 	bl	3c2c <__aeabi_dsub>
    271c:	e1a02004 	mov	r2, r4
    2720:	e1a03005 	mov	r3, r5
    2724:	eb000645 	bl	4040 <__aeabi_dmul>
    2728:	e28f3e26 	add	r3, pc, #608	; 0x260
    272c:	e893000c 	ldm	r3, {r2, r3}
    2730:	eb00053e 	bl	3c30 <__adddf3>
    2734:	e1a02004 	mov	r2, r4
    2738:	e1a03005 	mov	r3, r5
    273c:	eb00063f 	bl	4040 <__aeabi_dmul>
    2740:	e88d0003 	stm	sp, {r0, r1}
    2744:	e1a00004 	mov	r0, r4
    2748:	e1a01005 	mov	r1, r5
    274c:	e3a02000 	mov	r2, #0
    2750:	e59f3240 	ldr	r3, [pc, #576]	; 2998 <__kernel_cos+0x330>
    2754:	eb000639 	bl	4040 <__aeabi_dmul>
    2758:	e89d000c 	ldm	sp, {r2, r3}
    275c:	e1a08000 	mov	r8, r0
    2760:	e1a09001 	mov	r9, r1
    2764:	e1a00004 	mov	r0, r4
    2768:	e1a01005 	mov	r1, r5
    276c:	eb000633 	bl	4040 <__aeabi_dmul>
    2770:	e1a0200a 	mov	r2, r10
    2774:	e1a04000 	mov	r4, r0
    2778:	e1a05001 	mov	r5, r1
    277c:	e1a0300b 	mov	r3, r11
    2780:	e1a00006 	mov	r0, r6
    2784:	e1a01007 	mov	r1, r7
    2788:	eb00062c 	bl	4040 <__aeabi_dmul>
    278c:	e1a02000 	mov	r2, r0
    2790:	e1a03001 	mov	r3, r1
    2794:	e1a00004 	mov	r0, r4
    2798:	e1a01005 	mov	r1, r5
    279c:	eb000522 	bl	3c2c <__aeabi_dsub>
    27a0:	e1a02000 	mov	r2, r0
    27a4:	e1a03001 	mov	r3, r1
    27a8:	e1a00008 	mov	r0, r8
    27ac:	e1a01009 	mov	r1, r9
    27b0:	eb00051d 	bl	3c2c <__aeabi_dsub>
    27b4:	e1a02000 	mov	r2, r0
    27b8:	e1a03001 	mov	r3, r1
    27bc:	e3a00000 	mov	r0, #0
    27c0:	e59f11d4 	ldr	r1, [pc, #468]	; 299c <__kernel_cos+0x334>
    27c4:	eb000518 	bl	3c2c <__aeabi_dsub>
    27c8:	ea00005a 	b	2938 <__kernel_cos+0x2d0>
    27cc:	e1a02000 	mov	r2, r0
    27d0:	e1a03001 	mov	r3, r1
    27d4:	eb000619 	bl	4040 <__aeabi_dmul>
    27d8:	e28f3f62 	add	r3, pc, #392	; 0x188
    27dc:	e893000c 	ldm	r3, {r2, r3}
    27e0:	e1a04000 	mov	r4, r0
    27e4:	e1a05001 	mov	r5, r1
    27e8:	eb000614 	bl	4040 <__aeabi_dmul>
    27ec:	e28f3f5f 	add	r3, pc, #380	; 0x17c
    27f0:	e893000c 	ldm	r3, {r2, r3}
    27f4:	eb00050d 	bl	3c30 <__adddf3>
    27f8:	e1a02004 	mov	r2, r4
    27fc:	e1a03005 	mov	r3, r5
    2800:	eb00060e 	bl	4040 <__aeabi_dmul>
    2804:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    2808:	e893000c 	ldm	r3, {r2, r3}
    280c:	eb000506 	bl	3c2c <__aeabi_dsub>
    2810:	e1a02004 	mov	r2, r4
    2814:	e1a03005 	mov	r3, r5
    2818:	eb000608 	bl	4040 <__aeabi_dmul>
    281c:	e28f3f57 	add	r3, pc, #348	; 0x15c
    2820:	e893000c 	ldm	r3, {r2, r3}
    2824:	eb000501 	bl	3c30 <__adddf3>
    2828:	e1a02004 	mov	r2, r4
    282c:	e1a03005 	mov	r3, r5
    2830:	eb000602 	bl	4040 <__aeabi_dmul>
    2834:	e28f3f53 	add	r3, pc, #332	; 0x14c
    2838:	e893000c 	ldm	r3, {r2, r3}
    283c:	eb0004fa 	bl	3c2c <__aeabi_dsub>
    2840:	e1a02004 	mov	r2, r4
    2844:	e1a03005 	mov	r3, r5
    2848:	eb0005fc 	bl	4040 <__aeabi_dmul>
    284c:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    2850:	e893000c 	ldm	r3, {r2, r3}
    2854:	eb0004f5 	bl	3c30 <__adddf3>
    2858:	e1a03005 	mov	r3, r5
    285c:	e1a02004 	mov	r2, r4
    2860:	eb0005f6 	bl	4040 <__aeabi_dmul>
    2864:	e59f3134 	ldr	r3, [pc, #308]	; 29a0 <__kernel_cos+0x338>
    2868:	e1590003 	cmp	r9, r3
    286c:	e88d0003 	stm	sp, {r0, r1}
    2870:	daffffb3 	ble	2744 <__kernel_cos+0xdc>
    2874:	e59f3128 	ldr	r3, [pc, #296]	; 29a4 <__kernel_cos+0x33c>
    2878:	e1590003 	cmp	r9, r3
    287c:	e3a02000 	mov	r2, #0
    2880:	ca00002f 	bgt	2944 <__kernel_cos+0x2dc>
    2884:	e2493602 	sub	r3, r9, #2097152	; 0x200000
    2888:	e3a02000 	mov	r2, #0
    288c:	e3a00000 	mov	r0, #0
    2890:	e59f1104 	ldr	r1, [pc, #260]	; 299c <__kernel_cos+0x334>
    2894:	e1a08002 	mov	r8, r2
    2898:	e1a09003 	mov	r9, r3
    289c:	eb0004e2 	bl	3c2c <__aeabi_dsub>
    28a0:	e58d0008 	str	r0, [sp, #8]
    28a4:	e58d100c 	str	r1, [sp, #12]
    28a8:	e1a00004 	mov	r0, r4
    28ac:	e1a01005 	mov	r1, r5
    28b0:	e3a02000 	mov	r2, #0
    28b4:	e59f30dc 	ldr	r3, [pc, #220]	; 2998 <__kernel_cos+0x330>
    28b8:	eb0005e0 	bl	4040 <__aeabi_dmul>
    28bc:	e1a02008 	mov	r2, r8
    28c0:	e1a03009 	mov	r3, r9
    28c4:	eb0004d8 	bl	3c2c <__aeabi_dsub>
    28c8:	e89d000c 	ldm	sp, {r2, r3}
    28cc:	e1a08000 	mov	r8, r0
    28d0:	e1a09001 	mov	r9, r1
    28d4:	e1a00004 	mov	r0, r4
    28d8:	e1a01005 	mov	r1, r5
    28dc:	eb0005d7 	bl	4040 <__aeabi_dmul>
    28e0:	e1a0200a 	mov	r2, r10
    28e4:	e1a04000 	mov	r4, r0
    28e8:	e1a05001 	mov	r5, r1
    28ec:	e1a0300b 	mov	r3, r11
    28f0:	e1a00006 	mov	r0, r6
    28f4:	e1a01007 	mov	r1, r7
    28f8:	eb0005d0 	bl	4040 <__aeabi_dmul>
    28fc:	e1a02000 	mov	r2, r0
    2900:	e1a03001 	mov	r3, r1
    2904:	e1a00004 	mov	r0, r4
    2908:	e1a01005 	mov	r1, r5
    290c:	eb0004c6 	bl	3c2c <__aeabi_dsub>
    2910:	e1a02000 	mov	r2, r0
    2914:	e1a03001 	mov	r3, r1
    2918:	e1a00008 	mov	r0, r8
    291c:	e1a01009 	mov	r1, r9
    2920:	eb0004c1 	bl	3c2c <__aeabi_dsub>
    2924:	e1a02000 	mov	r2, r0
    2928:	e1a03001 	mov	r3, r1
    292c:	e28d1008 	add	r1, sp, #8
    2930:	e8910003 	ldm	r1, {r0, r1}
    2934:	eb0004bc 	bl	3c2c <__aeabi_dsub>
    2938:	e28dd014 	add	sp, sp, #20
    293c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    2940:	e12fff1e 	bx	lr
    2944:	e59f305c 	ldr	r3, [pc, #92]	; 29a8 <__kernel_cos+0x340>
    2948:	e3a08000 	mov	r8, #0
    294c:	e58d2008 	str	r2, [sp, #8]
    2950:	e58d300c 	str	r3, [sp, #12]
    2954:	e59f9050 	ldr	r9, [pc, #80]	; 29ac <__kernel_cos+0x344>
    2958:	eaffffd2 	b	28a8 <__kernel_cos+0x240>
    295c:	e3a00000 	mov	r0, #0
    2960:	e59f1034 	ldr	r1, [pc, #52]	; 299c <__kernel_cos+0x334>
    2964:	eafffff3 	b	2938 <__kernel_cos+0x2d0>
    2968:	be8838d4 	.word	0xbe8838d4
    296c:	bda8fae9 	.word	0xbda8fae9
    2970:	bdb4b1c4 	.word	0xbdb4b1c4
    2974:	3e21ee9e 	.word	0x3e21ee9e
    2978:	809c52ad 	.word	0x809c52ad
    297c:	3e927e4f 	.word	0x3e927e4f
    2980:	19cb1590 	.word	0x19cb1590
    2984:	3efa01a0 	.word	0x3efa01a0
    2988:	16c15177 	.word	0x16c15177
    298c:	3f56c16c 	.word	0x3f56c16c
    2990:	5555554c 	.word	0x5555554c
    2994:	3fa55555 	.word	0x3fa55555
    2998:	3fe00000 	.word	0x3fe00000
    299c:	3ff00000 	.word	0x3ff00000
    29a0:	3fd33332 	.word	0x3fd33332
    29a4:	3fe90000 	.word	0x3fe90000
    29a8:	3fe70000 	.word	0x3fe70000
    29ac:	3fd20000 	.word	0x3fd20000

000029b0 <__kernel_rem_pio2>:
    29b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    29b4:	e59feb6c 	ldr	lr, [pc, #2924]	; 3528 <__kernel_rem_pio2+0xb78>
    29b8:	e242c003 	sub	r12, r2, #3
    29bc:	e0ce4e9c 	smull	r4, lr, r12, lr
    29c0:	e1a0cfcc 	asr	r12, r12, #31
    29c4:	e06cc14e 	rsb	r12, r12, lr, asr #2
    29c8:	e24ddf99 	sub	sp, sp, #612	; 0x264
    29cc:	e1cccfcc 	bic	r12, r12, r12, asr #31
    29d0:	e58dc028 	str	r12, [sp, #40]	; 0x28
    29d4:	e1a0b003 	mov	r11, r3
    29d8:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    29dc:	e59f3b48 	ldr	r3, [pc, #2888]	; 352c <__kernel_rem_pio2+0xb7c>
    29e0:	e793310c 	ldr	r3, [r3, r12, lsl #2]
    29e4:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    29e8:	e58d3020 	str	r3, [sp, #32]
    29ec:	e59de020 	ldr	lr, [sp, #32]
    29f0:	e1e0300c 	mvn	r3, r12
    29f4:	e24b4001 	sub	r4, r11, #1
    29f8:	e0833083 	add	r3, r3, r3, lsl #1
    29fc:	e58d0010 	str	r0, [sp, #16]
    2a00:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    2a04:	e0823183 	add	r3, r2, r3, lsl #3
    2a08:	e094c00e 	adds	r12, r4, lr
    2a0c:	e58d400c 	str	r4, [sp, #12]
    2a10:	e58d101c 	str	r1, [sp, #28]
    2a14:	e58d3018 	str	r3, [sp, #24]
    2a18:	e0646000 	rsb	r6, r4, r0
    2a1c:	4a000012 	bmi	2a6c <__kernel_rem_pio2+0xbc>
    2a20:	e086c00c 	add	r12, r6, r12
    2a24:	e28c4001 	add	r4, r12, #1
    2a28:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    2a2c:	e28d8080 	add	r8, sp, #128	; 0x80
    2a30:	e08c5106 	add	r5, r12, r6, lsl #2
    2a34:	e3a07000 	mov	r7, #0
    2a38:	ea000006 	b	2a58 <__kernel_rem_pio2+0xa8>
    2a3c:	e7950007 	ldr	r0, [r5, r7]
    2a40:	eb000547 	bl	3f64 <__aeabi_i2d>
    2a44:	e2866001 	add	r6, r6, #1
    2a48:	e1560004 	cmp	r6, r4
    2a4c:	e8a80003 	stmia	r8!, {r0, r1}
    2a50:	e2877004 	add	r7, r7, #4
    2a54:	0a000004 	beq	2a6c <__kernel_rem_pio2+0xbc>
    2a58:	e3560000 	cmp	r6, #0
    2a5c:	aafffff6 	bge	2a3c <__kernel_rem_pio2+0x8c>
    2a60:	e3a00000 	mov	r0, #0
    2a64:	e3a01000 	mov	r1, #0
    2a68:	eafffff5 	b	2a44 <__kernel_rem_pio2+0x94>
    2a6c:	e59d4020 	ldr	r4, [sp, #32]
    2a70:	e3540000 	cmp	r4, #0
    2a74:	ba000020 	blt	2afc <__kernel_rem_pio2+0x14c>
    2a78:	e59d4020 	ldr	r4, [sp, #32]
    2a7c:	e28dcf72 	add	r12, sp, #456	; 0x1c8
    2a80:	e08cc184 	add	r12, r12, r4, lsl #3
    2a84:	e58dc004 	str	r12, [sp, #4]
    2a88:	e28dad07 	add	r10, sp, #448	; 0x1c0
    2a8c:	e1a0800b 	mov	r8, r11
    2a90:	e59dc00c 	ldr	r12, [sp, #12]
    2a94:	e35c0000 	cmp	r12, #0
    2a98:	ba000130 	blt	2f60 <__kernel_rem_pio2+0x5b0>
    2a9c:	e28de080 	add	lr, sp, #128	; 0x80
    2aa0:	e59d9010 	ldr	r9, [sp, #16]
    2aa4:	e08e7188 	add	r7, lr, r8, lsl #3
    2aa8:	e3a04000 	mov	r4, #0
    2aac:	e3a05000 	mov	r5, #0
    2ab0:	e3a06000 	mov	r6, #0
    2ab4:	e937000c 	ldmdb	r7!, {r2, r3}
    2ab8:	e8b90003 	ldm	r9!, {r0, r1}
    2abc:	eb00055f 	bl	4040 <__aeabi_dmul>
    2ac0:	e1a02000 	mov	r2, r0
    2ac4:	e1a03001 	mov	r3, r1
    2ac8:	e1a00004 	mov	r0, r4
    2acc:	e1a01005 	mov	r1, r5
    2ad0:	eb000456 	bl	3c30 <__adddf3>
    2ad4:	e2866001 	add	r6, r6, #1
    2ad8:	e156000b 	cmp	r6, r11
    2adc:	e1a04000 	mov	r4, r0
    2ae0:	e1a05001 	mov	r5, r1
    2ae4:	1afffff2 	bne	2ab4 <__kernel_rem_pio2+0x104>
    2ae8:	e8aa0030 	stmia	r10!, {r4, r5}
    2aec:	e59d4004 	ldr	r4, [sp, #4]
    2af0:	e15a0004 	cmp	r10, r4
    2af4:	e2888001 	add	r8, r8, #1
    2af8:	1affffe4 	bne	2a90 <__kernel_rem_pio2+0xe0>
    2afc:	e59dc020 	ldr	r12, [sp, #32]
    2b00:	e28d4030 	add	r4, sp, #48	; 0x30
    2b04:	e084410c 	add	r4, r4, r12, lsl #2
    2b08:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    2b0c:	e58dc004 	str	r12, [sp, #4]
    2b10:	e59d4004 	ldr	r4, [sp, #4]
    2b14:	e28dce26 	add	r12, sp, #608	; 0x260
    2b18:	e1a0a184 	lsl	r10, r4, #3
    2b1c:	e08c300a 	add	r3, r12, r10
    2b20:	e3540000 	cmp	r4, #0
    2b24:	e24350a0 	sub	r5, r3, #160	; 0xa0
    2b28:	e8950030 	ldm	r5, {r4, r5}
    2b2c:	da00001f 	ble	2bb0 <__kernel_rem_pio2+0x200>
    2b30:	e59dc004 	ldr	r12, [sp, #4]
    2b34:	e28d802c 	add	r8, sp, #44	; 0x2c
    2b38:	e28ded07 	add	lr, sp, #448	; 0x1c0
    2b3c:	e08ea00a 	add	r10, lr, r10
    2b40:	e088910c 	add	r9, r8, r12, lsl #2
    2b44:	e3a02000 	mov	r2, #0
    2b48:	e59f39e0 	ldr	r3, [pc, #2528]	; 3530 <__kernel_rem_pio2+0xb80>
    2b4c:	e1a00004 	mov	r0, r4
    2b50:	e1a01005 	mov	r1, r5
    2b54:	eb000539 	bl	4040 <__aeabi_dmul>
    2b58:	eb0006b0 	bl	4620 <__aeabi_d2iz>
    2b5c:	eb000500 	bl	3f64 <__aeabi_i2d>
    2b60:	e3a02000 	mov	r2, #0
    2b64:	e59f39c8 	ldr	r3, [pc, #2504]	; 3534 <__kernel_rem_pio2+0xb84>
    2b68:	e1a06000 	mov	r6, r0
    2b6c:	e1a07001 	mov	r7, r1
    2b70:	eb000532 	bl	4040 <__aeabi_dmul>
    2b74:	e1a02000 	mov	r2, r0
    2b78:	e1a03001 	mov	r3, r1
    2b7c:	e1a00004 	mov	r0, r4
    2b80:	e1a01005 	mov	r1, r5
    2b84:	eb000428 	bl	3c2c <__aeabi_dsub>
    2b88:	eb0006a4 	bl	4620 <__aeabi_d2iz>
    2b8c:	e1a02006 	mov	r2, r6
    2b90:	e5a80004 	str	r0, [r8, #4]!
    2b94:	e1a03007 	mov	r3, r7
    2b98:	e93a0003 	ldmdb	r10!, {r0, r1}
    2b9c:	eb000423 	bl	3c30 <__adddf3>
    2ba0:	e1580009 	cmp	r8, r9
    2ba4:	e1a04000 	mov	r4, r0
    2ba8:	e1a05001 	mov	r5, r1
    2bac:	1affffe4 	bne	2b44 <__kernel_rem_pio2+0x194>
    2bb0:	e59d2018 	ldr	r2, [sp, #24]
    2bb4:	e1a00004 	mov	r0, r4
    2bb8:	e1a01005 	mov	r1, r5
    2bbc:	eb000357 	bl	3920 <scalbn>
    2bc0:	e3a02000 	mov	r2, #0
    2bc4:	e3a035ff 	mov	r3, #1069547520	; 0x3fc00000
    2bc8:	e1a04000 	mov	r4, r0
    2bcc:	e1a05001 	mov	r5, r1
    2bd0:	eb00051a 	bl	4040 <__aeabi_dmul>
    2bd4:	eb0002e9 	bl	3780 <floor>
    2bd8:	e3a02000 	mov	r2, #0
    2bdc:	e59f3954 	ldr	r3, [pc, #2388]	; 3538 <__kernel_rem_pio2+0xb88>
    2be0:	eb000516 	bl	4040 <__aeabi_dmul>
    2be4:	e1a02000 	mov	r2, r0
    2be8:	e1a03001 	mov	r3, r1
    2bec:	e1a00004 	mov	r0, r4
    2bf0:	e1a01005 	mov	r1, r5
    2bf4:	eb00040c 	bl	3c2c <__aeabi_dsub>
    2bf8:	e1a04000 	mov	r4, r0
    2bfc:	e1a05001 	mov	r5, r1
    2c00:	eb000686 	bl	4620 <__aeabi_d2iz>
    2c04:	e1a08000 	mov	r8, r0
    2c08:	eb0004d5 	bl	3f64 <__aeabi_i2d>
    2c0c:	e1a02000 	mov	r2, r0
    2c10:	e1a03001 	mov	r3, r1
    2c14:	e1a00004 	mov	r0, r4
    2c18:	e1a01005 	mov	r1, r5
    2c1c:	eb000402 	bl	3c2c <__aeabi_dsub>
    2c20:	e59d4018 	ldr	r4, [sp, #24]
    2c24:	e3540000 	cmp	r4, #0
    2c28:	e1a06000 	mov	r6, r0
    2c2c:	e1a07001 	mov	r7, r1
    2c30:	da0000ad 	ble	2eec <__kernel_rem_pio2+0x53c>
    2c34:	e59dc004 	ldr	r12, [sp, #4]
    2c38:	e28dee26 	add	lr, sp, #608	; 0x260
    2c3c:	e24c2001 	sub	r2, r12, #1
    2c40:	e08e2102 	add	r2, lr, r2, lsl #2
    2c44:	e5120230 	ldr	r0, [r2, #-560]	; 0xfffffdd0
    2c48:	e2643018 	rsb	r3, r4, #24
    2c4c:	e1a01350 	asr	r1, r0, r3
    2c50:	e0403311 	sub	r3, r0, r1, lsl r3
    2c54:	e2645017 	rsb	r5, r4, #23
    2c58:	e1a05553 	asr	r5, r3, r5
    2c5c:	e5023230 	str	r3, [r2, #-560]	; 0xfffffdd0
    2c60:	e0888001 	add	r8, r8, r1
    2c64:	e3550000 	cmp	r5, #0
    2c68:	da000027 	ble	2d0c <__kernel_rem_pio2+0x35c>
    2c6c:	e59d4004 	ldr	r4, [sp, #4]
    2c70:	e3540000 	cmp	r4, #0
    2c74:	e2888001 	add	r8, r8, #1
    2c78:	da0000b6 	ble	2f58 <__kernel_rem_pio2+0x5a8>
    2c7c:	e28d3030 	add	r3, sp, #48	; 0x30
    2c80:	e0830104 	add	r0, r3, r4, lsl #2
    2c84:	e3a04000 	mov	r4, #0
    2c88:	ea000005 	b	2ca4 <__kernel_rem_pio2+0x2f4>
    2c8c:	e3520000 	cmp	r2, #0
    2c90:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
    2c94:	15032004 	strne	r2, [r3, #-4]
    2c98:	13a04001 	movne	r4, #1
    2c9c:	e1530000 	cmp	r3, r0
    2ca0:	0a000008 	beq	2cc8 <__kernel_rem_pio2+0x318>
    2ca4:	e3540000 	cmp	r4, #0
    2ca8:	e4932004 	ldr	r2, [r3], #4
    2cac:	0afffff6 	beq	2c8c <__kernel_rem_pio2+0x2dc>
    2cb0:	e3e014ff 	mvn	r1, #-16777216	; 0xff000000
    2cb4:	e0621001 	rsb	r1, r2, r1
    2cb8:	e1530000 	cmp	r3, r0
    2cbc:	e5031004 	str	r1, [r3, #-4]
    2cc0:	e3a04001 	mov	r4, #1
    2cc4:	1afffff6 	bne	2ca4 <__kernel_rem_pio2+0x2f4>
    2cc8:	e59dc018 	ldr	r12, [sp, #24]
    2ccc:	e35c0000 	cmp	r12, #0
    2cd0:	da00000b 	ble	2d04 <__kernel_rem_pio2+0x354>
    2cd4:	e35c0001 	cmp	r12, #1
    2cd8:	0a00008a 	beq	2f08 <__kernel_rem_pio2+0x558>
    2cdc:	e35c0002 	cmp	r12, #2
    2ce0:	1a000007 	bne	2d04 <__kernel_rem_pio2+0x354>
    2ce4:	e59dc004 	ldr	r12, [sp, #4]
    2ce8:	e28dee26 	add	lr, sp, #608	; 0x260
    2cec:	e24c3001 	sub	r3, r12, #1
    2cf0:	e08e3103 	add	r3, lr, r3, lsl #2
    2cf4:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    2cf8:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    2cfc:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
    2d00:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    2d04:	e3550002 	cmp	r5, #2
    2d08:	0a000062 	beq	2e98 <__kernel_rem_pio2+0x4e8>
    2d0c:	e1a00006 	mov	r0, r6
    2d10:	e1a01007 	mov	r1, r7
    2d14:	e3a02000 	mov	r2, #0
    2d18:	e3a03000 	mov	r3, #0
    2d1c:	eb000621 	bl	45a8 <__aeabi_dcmpeq>
    2d20:	e3500000 	cmp	r0, #0
    2d24:	0a000090 	beq	2f6c <__kernel_rem_pio2+0x5bc>
    2d28:	e59d4004 	ldr	r4, [sp, #4]
    2d2c:	e59dc020 	ldr	r12, [sp, #32]
    2d30:	e2440001 	sub	r0, r4, #1
    2d34:	e15c0000 	cmp	r12, r0
    2d38:	ca000009 	bgt	2d64 <__kernel_rem_pio2+0x3b4>
    2d3c:	e28de030 	add	lr, sp, #48	; 0x30
    2d40:	e59dc02c 	ldr	r12, [sp, #44]	; 0x2c
    2d44:	e08e3104 	add	r3, lr, r4, lsl #2
    2d48:	e3a02000 	mov	r2, #0
    2d4c:	e5331004 	ldr	r1, [r3, #-4]!
    2d50:	e153000c 	cmp	r3, r12
    2d54:	e1822001 	orr	r2, r2, r1
    2d58:	1afffffb 	bne	2d4c <__kernel_rem_pio2+0x39c>
    2d5c:	e3520000 	cmp	r2, #0
    2d60:	1a0001c9 	bne	348c <__kernel_rem_pio2+0xadc>
    2d64:	e59d4020 	ldr	r4, [sp, #32]
    2d68:	e2442001 	sub	r2, r4, #1
    2d6c:	e1a02102 	lsl	r2, r2, #2
    2d70:	e28dce26 	add	r12, sp, #608	; 0x260
    2d74:	e08c3002 	add	r3, r12, r2
    2d78:	e5133230 	ldr	r3, [r3, #-560]	; 0xfffffdd0
    2d7c:	e3530000 	cmp	r3, #0
    2d80:	1a0001d9 	bne	34ec <__kernel_rem_pio2+0xb3c>
    2d84:	e28de030 	add	lr, sp, #48	; 0x30
    2d88:	e08e2002 	add	r2, lr, r2
    2d8c:	e3a03001 	mov	r3, #1
    2d90:	e5321004 	ldr	r1, [r2, #-4]!
    2d94:	e3510000 	cmp	r1, #0
    2d98:	e2833001 	add	r3, r3, #1
    2d9c:	0afffffb 	beq	2d90 <__kernel_rem_pio2+0x3e0>
    2da0:	e59d4004 	ldr	r4, [sp, #4]
    2da4:	e0843003 	add	r3, r4, r3
    2da8:	e2848001 	add	r8, r4, #1
    2dac:	e1580003 	cmp	r8, r3
    2db0:	e58d3024 	str	r3, [sp, #36]	; 0x24
    2db4:	ca000031 	bgt	2e80 <__kernel_rem_pio2+0x4d0>
    2db8:	e59d4004 	ldr	r4, [sp, #4]
    2dbc:	e59dc028 	ldr	r12, [sp, #40]	; 0x28
    2dc0:	e084300c 	add	r3, r4, r12
    2dc4:	e59dc28c 	ldr	r12, [sp, #652]	; 0x28c
    2dc8:	e59d400c 	ldr	r4, [sp, #12]
    2dcc:	e08c3103 	add	r3, r12, r3, lsl #2
    2dd0:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    2dd4:	e0849008 	add	r9, r4, r8
    2dd8:	e28d4d07 	add	r4, sp, #448	; 0x1c0
    2ddc:	e0844188 	add	r4, r4, r8, lsl #3
    2de0:	e28cc001 	add	r12, r12, #1
    2de4:	e28de080 	add	lr, sp, #128	; 0x80
    2de8:	e98d0018 	stmib	sp, {r3, r4}
    2dec:	e58dc014 	str	r12, [sp, #20]
    2df0:	e08e9189 	add	r9, lr, r9, lsl #3
    2df4:	e59d4004 	ldr	r4, [sp, #4]
    2df8:	e5b40004 	ldr	r0, [r4, #4]!
    2dfc:	e58d4004 	str	r4, [sp, #4]
    2e00:	eb000457 	bl	3f64 <__aeabi_i2d>
    2e04:	e59dc00c 	ldr	r12, [sp, #12]
    2e08:	e35c0000 	cmp	r12, #0
    2e0c:	e8a90003 	stmia	r9!, {r0, r1}
    2e10:	ba00001d 	blt	2e8c <__kernel_rem_pio2+0x4dc>
    2e14:	e088700b 	add	r7, r8, r11
    2e18:	e28de080 	add	lr, sp, #128	; 0x80
    2e1c:	e59da010 	ldr	r10, [sp, #16]
    2e20:	e08e7187 	add	r7, lr, r7, lsl #3
    2e24:	e3a04000 	mov	r4, #0
    2e28:	e3a05000 	mov	r5, #0
    2e2c:	e3a06000 	mov	r6, #0
    2e30:	e937000c 	ldmdb	r7!, {r2, r3}
    2e34:	e8ba0003 	ldm	r10!, {r0, r1}
    2e38:	eb000480 	bl	4040 <__aeabi_dmul>
    2e3c:	e1a02000 	mov	r2, r0
    2e40:	e1a03001 	mov	r3, r1
    2e44:	e1a00004 	mov	r0, r4
    2e48:	e1a01005 	mov	r1, r5
    2e4c:	eb000377 	bl	3c30 <__adddf3>
    2e50:	e2866001 	add	r6, r6, #1
    2e54:	e156000b 	cmp	r6, r11
    2e58:	e1a04000 	mov	r4, r0
    2e5c:	e1a05001 	mov	r5, r1
    2e60:	1afffff2 	bne	2e30 <__kernel_rem_pio2+0x480>
    2e64:	e59dc014 	ldr	r12, [sp, #20]
    2e68:	e2888001 	add	r8, r8, #1
    2e6c:	e158000c 	cmp	r8, r12
    2e70:	e59dc008 	ldr	r12, [sp, #8]
    2e74:	e8ac0030 	stmia	r12!, {r4, r5}
    2e78:	e58dc008 	str	r12, [sp, #8]
    2e7c:	1affffdc 	bne	2df4 <__kernel_rem_pio2+0x444>
    2e80:	e59dc024 	ldr	r12, [sp, #36]	; 0x24
    2e84:	e58dc004 	str	r12, [sp, #4]
    2e88:	eaffff20 	b	2b10 <__kernel_rem_pio2+0x160>
    2e8c:	e3a04000 	mov	r4, #0
    2e90:	e3a05000 	mov	r5, #0
    2e94:	eafffff2 	b	2e64 <__kernel_rem_pio2+0x4b4>
    2e98:	e1a02006 	mov	r2, r6
    2e9c:	e1a03007 	mov	r3, r7
    2ea0:	e3a00000 	mov	r0, #0
    2ea4:	e59f1690 	ldr	r1, [pc, #1680]	; 353c <__kernel_rem_pio2+0xb8c>
    2ea8:	eb00035f 	bl	3c2c <__aeabi_dsub>
    2eac:	e3540000 	cmp	r4, #0
    2eb0:	e1a06000 	mov	r6, r0
    2eb4:	e1a07001 	mov	r7, r1
    2eb8:	0affff93 	beq	2d0c <__kernel_rem_pio2+0x35c>
    2ebc:	e59d2018 	ldr	r2, [sp, #24]
    2ec0:	e3a00000 	mov	r0, #0
    2ec4:	e59f1670 	ldr	r1, [pc, #1648]	; 353c <__kernel_rem_pio2+0xb8c>
    2ec8:	eb000294 	bl	3920 <scalbn>
    2ecc:	e1a02000 	mov	r2, r0
    2ed0:	e1a03001 	mov	r3, r1
    2ed4:	e1a00006 	mov	r0, r6
    2ed8:	e1a01007 	mov	r1, r7
    2edc:	eb000352 	bl	3c2c <__aeabi_dsub>
    2ee0:	e1a06000 	mov	r6, r0
    2ee4:	e1a07001 	mov	r7, r1
    2ee8:	eaffff87 	b	2d0c <__kernel_rem_pio2+0x35c>
    2eec:	1a00000e 	bne	2f2c <__kernel_rem_pio2+0x57c>
    2ef0:	e59d4004 	ldr	r4, [sp, #4]
    2ef4:	e28dce26 	add	r12, sp, #608	; 0x260
    2ef8:	e08c3104 	add	r3, r12, r4, lsl #2
    2efc:	e5135234 	ldr	r5, [r3, #-564]	; 0xfffffdcc
    2f00:	e1a05bc5 	asr	r5, r5, #23
    2f04:	eaffff56 	b	2c64 <__kernel_rem_pio2+0x2b4>
    2f08:	e59dc004 	ldr	r12, [sp, #4]
    2f0c:	e28dee26 	add	lr, sp, #608	; 0x260
    2f10:	e24c3001 	sub	r3, r12, #1
    2f14:	e08e3103 	add	r3, lr, r3, lsl #2
    2f18:	e5132230 	ldr	r2, [r3, #-560]	; 0xfffffdd0
    2f1c:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    2f20:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
    2f24:	e5032230 	str	r2, [r3, #-560]	; 0xfffffdd0
    2f28:	eaffff75 	b	2d04 <__kernel_rem_pio2+0x354>
    2f2c:	e3a02000 	mov	r2, #0
    2f30:	e59f3608 	ldr	r3, [pc, #1544]	; 3540 <__kernel_rem_pio2+0xb90>
    2f34:	eb0005ad 	bl	45f0 <__aeabi_dcmpge>
    2f38:	e3500000 	cmp	r0, #0
    2f3c:	03a05000 	moveq	r5, #0
    2f40:	0affff71 	beq	2d0c <__kernel_rem_pio2+0x35c>
    2f44:	e59d4004 	ldr	r4, [sp, #4]
    2f48:	e3540000 	cmp	r4, #0
    2f4c:	e3a05002 	mov	r5, #2
    2f50:	e2888001 	add	r8, r8, #1
    2f54:	caffff48 	bgt	2c7c <__kernel_rem_pio2+0x2cc>
    2f58:	e3a04000 	mov	r4, #0
    2f5c:	eaffff59 	b	2cc8 <__kernel_rem_pio2+0x318>
    2f60:	e3a04000 	mov	r4, #0
    2f64:	e3a05000 	mov	r5, #0
    2f68:	eafffede 	b	2ae8 <__kernel_rem_pio2+0x138>
    2f6c:	e59d4018 	ldr	r4, [sp, #24]
    2f70:	e1a00006 	mov	r0, r6
    2f74:	e2642000 	rsb	r2, r4, #0
    2f78:	e1a01007 	mov	r1, r7
    2f7c:	e58d500c 	str	r5, [sp, #12]
    2f80:	e58d8010 	str	r8, [sp, #16]
    2f84:	eb000265 	bl	3920 <scalbn>
    2f88:	e3a02000 	mov	r2, #0
    2f8c:	e59f35a0 	ldr	r3, [pc, #1440]	; 3534 <__kernel_rem_pio2+0xb84>
    2f90:	e1a04000 	mov	r4, r0
    2f94:	e1a05001 	mov	r5, r1
    2f98:	eb000594 	bl	45f0 <__aeabi_dcmpge>
    2f9c:	e3500000 	cmp	r0, #0
    2fa0:	0a000153 	beq	34f4 <__kernel_rem_pio2+0xb44>
    2fa4:	e3a02000 	mov	r2, #0
    2fa8:	e59f3580 	ldr	r3, [pc, #1408]	; 3530 <__kernel_rem_pio2+0xb80>
    2fac:	e1a00004 	mov	r0, r4
    2fb0:	e1a01005 	mov	r1, r5
    2fb4:	eb000421 	bl	4040 <__aeabi_dmul>
    2fb8:	eb000598 	bl	4620 <__aeabi_d2iz>
    2fbc:	eb0003e8 	bl	3f64 <__aeabi_i2d>
    2fc0:	e3a02000 	mov	r2, #0
    2fc4:	e59f3568 	ldr	r3, [pc, #1384]	; 3534 <__kernel_rem_pio2+0xb84>
    2fc8:	e1a06000 	mov	r6, r0
    2fcc:	e1a07001 	mov	r7, r1
    2fd0:	eb00041a 	bl	4040 <__aeabi_dmul>
    2fd4:	e1a02000 	mov	r2, r0
    2fd8:	e1a03001 	mov	r3, r1
    2fdc:	e1a00004 	mov	r0, r4
    2fe0:	e1a01005 	mov	r1, r5
    2fe4:	eb000310 	bl	3c2c <__aeabi_dsub>
    2fe8:	eb00058c 	bl	4620 <__aeabi_d2iz>
    2fec:	e59d4004 	ldr	r4, [sp, #4]
    2ff0:	e28dce26 	add	r12, sp, #608	; 0x260
    2ff4:	e08c3104 	add	r3, r12, r4, lsl #2
    2ff8:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    2ffc:	e1a01007 	mov	r1, r7
    3000:	e1a00006 	mov	r0, r6
    3004:	eb000585 	bl	4620 <__aeabi_d2iz>
    3008:	e2844001 	add	r4, r4, #1
    300c:	e28dee26 	add	lr, sp, #608	; 0x260
    3010:	e08e3104 	add	r3, lr, r4, lsl #2
    3014:	e58d4004 	str	r4, [sp, #4]
    3018:	e59d4018 	ldr	r4, [sp, #24]
    301c:	e2844018 	add	r4, r4, #24
    3020:	e58d4018 	str	r4, [sp, #24]
    3024:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    3028:	e3a00000 	mov	r0, #0
    302c:	e59f1508 	ldr	r1, [pc, #1288]	; 353c <__kernel_rem_pio2+0xb8c>
    3030:	e59d2018 	ldr	r2, [sp, #24]
    3034:	eb000239 	bl	3920 <scalbn>
    3038:	e59dc004 	ldr	r12, [sp, #4]
    303c:	e35c0000 	cmp	r12, #0
    3040:	e1a04000 	mov	r4, r0
    3044:	e1a05001 	mov	r5, r1
    3048:	ba00003b 	blt	313c <__kernel_rem_pio2+0x78c>
    304c:	e28c6001 	add	r6, r12, #1
    3050:	e28d9d07 	add	r9, sp, #448	; 0x1c0
    3054:	e28de030 	add	lr, sp, #48	; 0x30
    3058:	e08e7106 	add	r7, lr, r6, lsl #2
    305c:	e0896186 	add	r6, r9, r6, lsl #3
    3060:	e5370004 	ldr	r0, [r7, #-4]!
    3064:	eb0003be 	bl	3f64 <__aeabi_i2d>
    3068:	e1a02004 	mov	r2, r4
    306c:	e1a03005 	mov	r3, r5
    3070:	eb0003f2 	bl	4040 <__aeabi_dmul>
    3074:	e3a02000 	mov	r2, #0
    3078:	e9260003 	stmdb	r6!, {r0, r1}
    307c:	e59f34ac 	ldr	r3, [pc, #1196]	; 3530 <__kernel_rem_pio2+0xb80>
    3080:	e1a00004 	mov	r0, r4
    3084:	e1a01005 	mov	r1, r5
    3088:	eb0003ec 	bl	4040 <__aeabi_dmul>
    308c:	e1560009 	cmp	r6, r9
    3090:	e1a04000 	mov	r4, r0
    3094:	e1a05001 	mov	r5, r1
    3098:	1afffff0 	bne	3060 <__kernel_rem_pio2+0x6b0>
    309c:	e59da004 	ldr	r10, [sp, #4]
    30a0:	e59db020 	ldr	r11, [sp, #32]
    30a4:	e58da008 	str	r10, [sp, #8]
    30a8:	e3a08000 	mov	r8, #0
    30ac:	e35b0000 	cmp	r11, #0
    30b0:	b3a04000 	movlt	r4, #0
    30b4:	b3a05000 	movlt	r5, #0
    30b8:	ba000015 	blt	3114 <__kernel_rem_pio2+0x764>
    30bc:	e59d4008 	ldr	r4, [sp, #8]
    30c0:	e59fa47c 	ldr	r10, [pc, #1148]	; 3544 <__kernel_rem_pio2+0xb94>
    30c4:	e0897184 	add	r7, r9, r4, lsl #3
    30c8:	e3a05000 	mov	r5, #0
    30cc:	e3a04000 	mov	r4, #0
    30d0:	e3a06000 	mov	r6, #0
    30d4:	ea000001 	b	30e0 <__kernel_rem_pio2+0x730>
    30d8:	e1560008 	cmp	r6, r8
    30dc:	ca00000c 	bgt	3114 <__kernel_rem_pio2+0x764>
    30e0:	e8b7000c 	ldm	r7!, {r2, r3}
    30e4:	e8ba0003 	ldm	r10!, {r0, r1}
    30e8:	eb0003d4 	bl	4040 <__aeabi_dmul>
    30ec:	e1a02000 	mov	r2, r0
    30f0:	e1a03001 	mov	r3, r1
    30f4:	e1a00004 	mov	r0, r4
    30f8:	e1a01005 	mov	r1, r5
    30fc:	eb0002cb 	bl	3c30 <__adddf3>
    3100:	e2866001 	add	r6, r6, #1
    3104:	e15b0006 	cmp	r11, r6
    3108:	e1a04000 	mov	r4, r0
    310c:	e1a05001 	mov	r5, r1
    3110:	aafffff0 	bge	30d8 <__kernel_rem_pio2+0x728>
    3114:	e59dc008 	ldr	r12, [sp, #8]
    3118:	e28d0e26 	add	r0, sp, #608	; 0x260
    311c:	e24cc001 	sub	r12, r12, #1
    3120:	e0803188 	add	r3, r0, r8, lsl #3
    3124:	e37c0001 	cmn	r12, #1
    3128:	e58dc008 	str	r12, [sp, #8]
    312c:	e5034140 	str	r4, [r3, #-320]	; 0xfffffec0
    3130:	e503513c 	str	r5, [r3, #-316]	; 0xfffffec4
    3134:	e2888001 	add	r8, r8, #1
    3138:	1affffdb 	bne	30ac <__kernel_rem_pio2+0x6fc>
    313c:	e59dc288 	ldr	r12, [sp, #648]	; 0x288
    3140:	e35c0003 	cmp	r12, #3
    3144:	979ff10c 	ldrls	pc, [pc, r12, lsl #2]
    3148:	ea000015 	b	31a4 <__kernel_rem_pio2+0x7f4>
    314c:	0000342c 	.word	0x0000342c
    3150:	00003348 	.word	0x00003348
    3154:	00003348 	.word	0x00003348
    3158:	000031b8 	.word	0x000031b8
    315c:	e59d000c 	ldr	r0, [sp, #12]
    3160:	e3a0c000 	mov	r12, #0
    3164:	e3500000 	cmp	r0, #0
    3168:	e1a0400c 	mov	r4, r12
    316c:	0a000068 	beq	3314 <__kernel_rem_pio2+0x964>
    3170:	e59d2124 	ldr	r2, [sp, #292]	; 0x124
    3174:	e59d001c 	ldr	r0, [sp, #28]
    3178:	e59d1120 	ldr	r1, [sp, #288]	; 0x120
    317c:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
    3180:	e59d312c 	ldr	r3, [sp, #300]	; 0x12c
    3184:	e8800006 	stm	r0, {r1, r2}
    3188:	e59d2128 	ldr	r2, [sp, #296]	; 0x128
    318c:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
    3190:	e2844102 	add	r4, r4, #-2147483648	; 0x80000000
    3194:	e5802008 	str	r2, [r0, #8]
    3198:	e580300c 	str	r3, [r0, #12]
    319c:	e580c010 	str	r12, [r0, #16]
    31a0:	e5804014 	str	r4, [r0, #20]
    31a4:	e59d4010 	ldr	r4, [sp, #16]
    31a8:	e2040007 	and	r0, r4, #7
    31ac:	e28ddf99 	add	sp, sp, #612	; 0x264
    31b0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    31b4:	e12fff1e 	bx	lr
    31b8:	e59d4004 	ldr	r4, [sp, #4]
    31bc:	e3540000 	cmp	r4, #0
    31c0:	daffffe5 	ble	315c <__kernel_rem_pio2+0x7ac>
    31c4:	e59d4004 	ldr	r4, [sp, #4]
    31c8:	e28dbe12 	add	r11, sp, #288	; 0x120
    31cc:	e08ba184 	add	r10, r11, r4, lsl #3
    31d0:	e58da008 	str	r10, [sp, #8]
    31d4:	e58da014 	str	r10, [sp, #20]
    31d8:	e93a0300 	ldmdb	r10!, {r8, r9}
    31dc:	e28a7008 	add	r7, r10, #8
    31e0:	e89700c0 	ldm	r7, {r6, r7}
    31e4:	e1a00008 	mov	r0, r8
    31e8:	e1a02006 	mov	r2, r6
    31ec:	e1a03007 	mov	r3, r7
    31f0:	e1a01009 	mov	r1, r9
    31f4:	eb00028d 	bl	3c30 <__adddf3>
    31f8:	e1a04000 	mov	r4, r0
    31fc:	e1a05001 	mov	r5, r1
    3200:	e1a02004 	mov	r2, r4
    3204:	e1a03005 	mov	r3, r5
    3208:	e1a00008 	mov	r0, r8
    320c:	e1a01009 	mov	r1, r9
    3210:	eb000285 	bl	3c2c <__aeabi_dsub>
    3214:	e1a02000 	mov	r2, r0
    3218:	e1a03001 	mov	r3, r1
    321c:	e1a00006 	mov	r0, r6
    3220:	e1a01007 	mov	r1, r7
    3224:	eb000281 	bl	3c30 <__adddf3>
    3228:	e59dc008 	ldr	r12, [sp, #8]
    322c:	e58a0008 	str	r0, [r10, #8]
    3230:	e58a100c 	str	r1, [r10, #12]
    3234:	e92c0030 	stmdb	r12!, {r4, r5}
    3238:	e15a000b 	cmp	r10, r11
    323c:	e58dc008 	str	r12, [sp, #8]
    3240:	1affffe4 	bne	31d8 <__kernel_rem_pio2+0x828>
    3244:	e59d4004 	ldr	r4, [sp, #4]
    3248:	e3540001 	cmp	r4, #1
    324c:	e59da014 	ldr	r10, [sp, #20]
    3250:	daffffc1 	ble	315c <__kernel_rem_pio2+0x7ac>
    3254:	e28bc008 	add	r12, r11, #8
    3258:	e58dc008 	str	r12, [sp, #8]
    325c:	e1a0c00a 	mov	r12, r10
    3260:	e93a0300 	ldmdb	r10!, {r8, r9}
    3264:	e28a7008 	add	r7, r10, #8
    3268:	e89700c0 	ldm	r7, {r6, r7}
    326c:	e1a00008 	mov	r0, r8
    3270:	e1a02006 	mov	r2, r6
    3274:	e1a03007 	mov	r3, r7
    3278:	e1a01009 	mov	r1, r9
    327c:	e58dc000 	str	r12, [sp]
    3280:	eb00026a 	bl	3c30 <__adddf3>
    3284:	e1a04000 	mov	r4, r0
    3288:	e1a05001 	mov	r5, r1
    328c:	e1a02004 	mov	r2, r4
    3290:	e1a03005 	mov	r3, r5
    3294:	e1a00008 	mov	r0, r8
    3298:	e1a01009 	mov	r1, r9
    329c:	eb000262 	bl	3c2c <__aeabi_dsub>
    32a0:	e1a02000 	mov	r2, r0
    32a4:	e1a03001 	mov	r3, r1
    32a8:	e1a00006 	mov	r0, r6
    32ac:	e1a01007 	mov	r1, r7
    32b0:	eb00025e 	bl	3c30 <__adddf3>
    32b4:	e59de008 	ldr	lr, [sp, #8]
    32b8:	e59dc000 	ldr	r12, [sp]
    32bc:	e15a000e 	cmp	r10, lr
    32c0:	e58a0008 	str	r0, [r10, #8]
    32c4:	e58a100c 	str	r1, [r10, #12]
    32c8:	e92c0030 	stmdb	r12!, {r4, r5}
    32cc:	1affffe3 	bne	3260 <__kernel_rem_pio2+0x8b0>
    32d0:	e59d4004 	ldr	r4, [sp, #4]
    32d4:	e3a0c000 	mov	r12, #0
    32d8:	e2845001 	add	r5, r4, #1
    32dc:	e08b5185 	add	r5, r11, r5, lsl #3
    32e0:	e1a0400c 	mov	r4, r12
    32e4:	e28bb010 	add	r11, r11, #16
    32e8:	e1a0000c 	mov	r0, r12
    32ec:	e1a01004 	mov	r1, r4
    32f0:	e935000c 	ldmdb	r5!, {r2, r3}
    32f4:	eb00024d 	bl	3c30 <__adddf3>
    32f8:	e155000b 	cmp	r5, r11
    32fc:	e1a0c000 	mov	r12, r0
    3300:	e1a04001 	mov	r4, r1
    3304:	1afffff7 	bne	32e8 <__kernel_rem_pio2+0x938>
    3308:	e59d000c 	ldr	r0, [sp, #12]
    330c:	e3500000 	cmp	r0, #0
    3310:	1affff96 	bne	3170 <__kernel_rem_pio2+0x7c0>
    3314:	e1a03004 	mov	r3, r4
    3318:	e28d1e12 	add	r1, sp, #288	; 0x120
    331c:	e8910003 	ldm	r1, {r0, r1}
    3320:	e59d401c 	ldr	r4, [sp, #28]
    3324:	e8840003 	stm	r4, {r0, r1}
    3328:	e28d1f4a 	add	r1, sp, #296	; 0x128
    332c:	e8910003 	ldm	r1, {r0, r1}
    3330:	e1a0200c 	mov	r2, r12
    3334:	e5840008 	str	r0, [r4, #8]
    3338:	e584100c 	str	r1, [r4, #12]
    333c:	e5842010 	str	r2, [r4, #16]
    3340:	e5843014 	str	r3, [r4, #20]
    3344:	eaffff96 	b	31a4 <__kernel_rem_pio2+0x7f4>
    3348:	e59dc004 	ldr	r12, [sp, #4]
    334c:	e35c0000 	cmp	r12, #0
    3350:	b3a0e000 	movlt	lr, #0
    3354:	b1a0c00e 	movlt	r12, lr
    3358:	ba00000d 	blt	3394 <__kernel_rem_pio2+0x9e4>
    335c:	e59dc004 	ldr	r12, [sp, #4]
    3360:	e28d5e12 	add	r5, sp, #288	; 0x120
    3364:	e28c4001 	add	r4, r12, #1
    3368:	e3a0e000 	mov	lr, #0
    336c:	e0854184 	add	r4, r5, r4, lsl #3
    3370:	e1a0c00e 	mov	r12, lr
    3374:	e1a0000e 	mov	r0, lr
    3378:	e1a0100c 	mov	r1, r12
    337c:	e934000c 	ldmdb	r4!, {r2, r3}
    3380:	eb00022a 	bl	3c30 <__adddf3>
    3384:	e1540005 	cmp	r4, r5
    3388:	e1a0e000 	mov	lr, r0
    338c:	e1a0c001 	mov	r12, r1
    3390:	1afffff7 	bne	3374 <__kernel_rem_pio2+0x9c4>
    3394:	e59d400c 	ldr	r4, [sp, #12]
    3398:	e3540000 	cmp	r4, #0
    339c:	128c3102 	addne	r3, r12, #-2147483648	; 0x80000000
    33a0:	01a0300c 	moveq	r3, r12
    33a4:	e1a01003 	mov	r1, r3
    33a8:	e1a0300c 	mov	r3, r12
    33ac:	e59dc01c 	ldr	r12, [sp, #28]
    33b0:	e1a0000e 	mov	r0, lr
    33b4:	e88c0003 	stm	r12, {r0, r1}
    33b8:	e1a0200e 	mov	r2, lr
    33bc:	e28d1e12 	add	r1, sp, #288	; 0x120
    33c0:	e8910003 	ldm	r1, {r0, r1}
    33c4:	eb000218 	bl	3c2c <__aeabi_dsub>
    33c8:	e59d4004 	ldr	r4, [sp, #4]
    33cc:	e3540000 	cmp	r4, #0
    33d0:	e1a05000 	mov	r5, r0
    33d4:	e1a0c001 	mov	r12, r1
    33d8:	da00000a 	ble	3408 <__kernel_rem_pio2+0xa58>
    33dc:	e59de004 	ldr	lr, [sp, #4]
    33e0:	e28d4f4a 	add	r4, sp, #296	; 0x128
    33e4:	e084618e 	add	r6, r4, lr, lsl #3
    33e8:	e1a00005 	mov	r0, r5
    33ec:	e1a0100c 	mov	r1, r12
    33f0:	e8b4000c 	ldm	r4!, {r2, r3}
    33f4:	eb00020d 	bl	3c30 <__adddf3>
    33f8:	e1540006 	cmp	r4, r6
    33fc:	e1a05000 	mov	r5, r0
    3400:	e1a0c001 	mov	r12, r1
    3404:	1afffff7 	bne	33e8 <__kernel_rem_pio2+0xa38>
    3408:	e59d400c 	ldr	r4, [sp, #12]
    340c:	e3540000 	cmp	r4, #0
    3410:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    3414:	e1a0300c 	mov	r3, r12
    3418:	e59dc01c 	ldr	r12, [sp, #28]
    341c:	e1a02005 	mov	r2, r5
    3420:	e58c2008 	str	r2, [r12, #8]
    3424:	e58c300c 	str	r3, [r12, #12]
    3428:	eaffff5d 	b	31a4 <__kernel_rem_pio2+0x7f4>
    342c:	e59d4004 	ldr	r4, [sp, #4]
    3430:	e3540000 	cmp	r4, #0
    3434:	ba000038 	blt	351c <__kernel_rem_pio2+0xb6c>
    3438:	e2846001 	add	r6, r4, #1
    343c:	e28d5e12 	add	r5, sp, #288	; 0x120
    3440:	e3a04000 	mov	r4, #0
    3444:	e0856186 	add	r6, r5, r6, lsl #3
    3448:	e1a0c004 	mov	r12, r4
    344c:	e1a00004 	mov	r0, r4
    3450:	e1a0100c 	mov	r1, r12
    3454:	e936000c 	ldmdb	r6!, {r2, r3}
    3458:	eb0001f4 	bl	3c30 <__adddf3>
    345c:	e1560005 	cmp	r6, r5
    3460:	e1a04000 	mov	r4, r0
    3464:	e1a0c001 	mov	r12, r1
    3468:	1afffff7 	bne	344c <__kernel_rem_pio2+0xa9c>
    346c:	e59d000c 	ldr	r0, [sp, #12]
    3470:	e3500000 	cmp	r0, #0
    3474:	e1a02004 	mov	r2, r4
    3478:	128cc102 	addne	r12, r12, #-2147483648	; 0x80000000
    347c:	e59d401c 	ldr	r4, [sp, #28]
    3480:	e1a0300c 	mov	r3, r12
    3484:	e884000c 	stm	r4, {r2, r3}
    3488:	eaffff45 	b	31a4 <__kernel_rem_pio2+0x7f4>
    348c:	e1a03100 	lsl	r3, r0, #2
    3490:	e28dce26 	add	r12, sp, #608	; 0x260
    3494:	e08c2003 	add	r2, r12, r3
    3498:	e59d4018 	ldr	r4, [sp, #24]
    349c:	e5122230 	ldr	r2, [r2, #-560]	; 0xfffffdd0
    34a0:	e2444018 	sub	r4, r4, #24
    34a4:	e3520000 	cmp	r2, #0
    34a8:	e58d8010 	str	r8, [sp, #16]
    34ac:	e58d500c 	str	r5, [sp, #12]
    34b0:	e58d4018 	str	r4, [sp, #24]
    34b4:	1a000016 	bne	3514 <__kernel_rem_pio2+0xb64>
    34b8:	e28dc030 	add	r12, sp, #48	; 0x30
    34bc:	e58d0004 	str	r0, [sp, #4]
    34c0:	e08c3003 	add	r3, r12, r3
    34c4:	e1a02000 	mov	r2, r0
    34c8:	e1a01004 	mov	r1, r4
    34cc:	e5330004 	ldr	r0, [r3, #-4]!
    34d0:	e3500000 	cmp	r0, #0
    34d4:	e2422001 	sub	r2, r2, #1
    34d8:	e2411018 	sub	r1, r1, #24
    34dc:	0afffffa 	beq	34cc <__kernel_rem_pio2+0xb1c>
    34e0:	e58d2004 	str	r2, [sp, #4]
    34e4:	e58d1018 	str	r1, [sp, #24]
    34e8:	eafffece 	b	3028 <__kernel_rem_pio2+0x678>
    34ec:	e3a03001 	mov	r3, #1
    34f0:	eafffe2a 	b	2da0 <__kernel_rem_pio2+0x3f0>
    34f4:	e1a00004 	mov	r0, r4
    34f8:	e1a01005 	mov	r1, r5
    34fc:	eb000447 	bl	4620 <__aeabi_d2iz>
    3500:	e59dc004 	ldr	r12, [sp, #4]
    3504:	e28dee26 	add	lr, sp, #608	; 0x260
    3508:	e08e310c 	add	r3, lr, r12, lsl #2
    350c:	e5030230 	str	r0, [r3, #-560]	; 0xfffffdd0
    3510:	eafffec4 	b	3028 <__kernel_rem_pio2+0x678>
    3514:	e58d0004 	str	r0, [sp, #4]
    3518:	eafffec2 	b	3028 <__kernel_rem_pio2+0x678>
    351c:	e3a04000 	mov	r4, #0
    3520:	e1a0c004 	mov	r12, r4
    3524:	eaffffd0 	b	346c <__kernel_rem_pio2+0xabc>
    3528:	2aaaaaab 	.word	0x2aaaaaab
    352c:	00005440 	.word	0x00005440
    3530:	3e700000 	.word	0x3e700000
    3534:	41700000 	.word	0x41700000
    3538:	40200000 	.word	0x40200000
    353c:	3ff00000 	.word	0x3ff00000
    3540:	3fe00000 	.word	0x3fe00000
    3544:	00005450 	.word	0x00005450

00003548 <__kernel_sin>:
    3548:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    354c:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    3550:	e35c05f9 	cmp	r12, #1044381696	; 0x3e400000
    3554:	e24dd014 	sub	sp, sp, #20
    3558:	e1a04000 	mov	r4, r0
    355c:	e1a05001 	mov	r5, r1
    3560:	e1a06000 	mov	r6, r0
    3564:	e1a07001 	mov	r7, r1
    3568:	e1a08002 	mov	r8, r2
    356c:	e1a09003 	mov	r9, r3
    3570:	aa000002 	bge	3580 <__kernel_sin+0x38>
    3574:	eb000429 	bl	4620 <__aeabi_d2iz>
    3578:	e3500000 	cmp	r0, #0
    357c:	0a000052 	beq	36cc <__kernel_sin+0x184>
    3580:	e1a02004 	mov	r2, r4
    3584:	e1a03005 	mov	r3, r5
    3588:	e1a00004 	mov	r0, r4
    358c:	e1a01005 	mov	r1, r5
    3590:	eb0002aa 	bl	4040 <__aeabi_dmul>
    3594:	e1a02004 	mov	r2, r4
    3598:	e1a03005 	mov	r3, r5
    359c:	e1a06000 	mov	r6, r0
    35a0:	e1a07001 	mov	r7, r1
    35a4:	eb0002a5 	bl	4040 <__aeabi_dmul>
    35a8:	e28f3d06 	add	r3, pc, #384	; 0x180
    35ac:	e893000c 	ldm	r3, {r2, r3}
    35b0:	e1a0a000 	mov	r10, r0
    35b4:	e1a0b001 	mov	r11, r1
    35b8:	e1a00006 	mov	r0, r6
    35bc:	e1a01007 	mov	r1, r7
    35c0:	eb00029e 	bl	4040 <__aeabi_dmul>
    35c4:	e28f3f5b 	add	r3, pc, #364	; 0x16c
    35c8:	e893000c 	ldm	r3, {r2, r3}
    35cc:	eb000196 	bl	3c2c <__aeabi_dsub>
    35d0:	e1a02006 	mov	r2, r6
    35d4:	e1a03007 	mov	r3, r7
    35d8:	eb000298 	bl	4040 <__aeabi_dmul>
    35dc:	e28f3f57 	add	r3, pc, #348	; 0x15c
    35e0:	e893000c 	ldm	r3, {r2, r3}
    35e4:	eb000191 	bl	3c30 <__adddf3>
    35e8:	e1a02006 	mov	r2, r6
    35ec:	e1a03007 	mov	r3, r7
    35f0:	eb000292 	bl	4040 <__aeabi_dmul>
    35f4:	e28f3f53 	add	r3, pc, #332	; 0x14c
    35f8:	e893000c 	ldm	r3, {r2, r3}
    35fc:	eb00018a 	bl	3c2c <__aeabi_dsub>
    3600:	e1a02006 	mov	r2, r6
    3604:	e1a03007 	mov	r3, r7
    3608:	eb00028c 	bl	4040 <__aeabi_dmul>
    360c:	e28f3f4f 	add	r3, pc, #316	; 0x13c
    3610:	e893000c 	ldm	r3, {r2, r3}
    3614:	eb000185 	bl	3c30 <__adddf3>
    3618:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    361c:	e3530000 	cmp	r3, #0
    3620:	e88d0003 	stm	sp, {r0, r1}
    3624:	0a00002d 	beq	36e0 <__kernel_sin+0x198>
    3628:	e3a02000 	mov	r2, #0
    362c:	e59f312c 	ldr	r3, [pc, #300]	; 3760 <__kernel_sin+0x218>
    3630:	e1a00008 	mov	r0, r8
    3634:	e1a01009 	mov	r1, r9
    3638:	eb000280 	bl	4040 <__aeabi_dmul>
    363c:	e89d000c 	ldm	sp, {r2, r3}
    3640:	e58d0008 	str	r0, [sp, #8]
    3644:	e58d100c 	str	r1, [sp, #12]
    3648:	e1a0000a 	mov	r0, r10
    364c:	e1a0100b 	mov	r1, r11
    3650:	eb00027a 	bl	4040 <__aeabi_dmul>
    3654:	e1a02000 	mov	r2, r0
    3658:	e1a03001 	mov	r3, r1
    365c:	e28d1008 	add	r1, sp, #8
    3660:	e8910003 	ldm	r1, {r0, r1}
    3664:	eb000170 	bl	3c2c <__aeabi_dsub>
    3668:	e1a02006 	mov	r2, r6
    366c:	e1a03007 	mov	r3, r7
    3670:	eb000272 	bl	4040 <__aeabi_dmul>
    3674:	e1a02008 	mov	r2, r8
    3678:	e1a03009 	mov	r3, r9
    367c:	eb00016a 	bl	3c2c <__aeabi_dsub>
    3680:	e28f30d0 	add	r3, pc, #208	; 0xd0
    3684:	e893000c 	ldm	r3, {r2, r3}
    3688:	e1a06000 	mov	r6, r0
    368c:	e1a07001 	mov	r7, r1
    3690:	e1a0000a 	mov	r0, r10
    3694:	e1a0100b 	mov	r1, r11
    3698:	eb000268 	bl	4040 <__aeabi_dmul>
    369c:	e1a02000 	mov	r2, r0
    36a0:	e1a03001 	mov	r3, r1
    36a4:	e1a00006 	mov	r0, r6
    36a8:	e1a01007 	mov	r1, r7
    36ac:	eb00015f 	bl	3c30 <__adddf3>
    36b0:	e1a02000 	mov	r2, r0
    36b4:	e1a03001 	mov	r3, r1
    36b8:	e1a00004 	mov	r0, r4
    36bc:	e1a01005 	mov	r1, r5
    36c0:	eb000159 	bl	3c2c <__aeabi_dsub>
    36c4:	e1a04000 	mov	r4, r0
    36c8:	e1a05001 	mov	r5, r1
    36cc:	e1a00004 	mov	r0, r4
    36d0:	e1a01005 	mov	r1, r5
    36d4:	e28dd014 	add	sp, sp, #20
    36d8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    36dc:	e12fff1e 	bx	lr
    36e0:	e1a02000 	mov	r2, r0
    36e4:	e1a03001 	mov	r3, r1
    36e8:	e1a00006 	mov	r0, r6
    36ec:	e1a01007 	mov	r1, r7
    36f0:	eb000252 	bl	4040 <__aeabi_dmul>
    36f4:	e28f305c 	add	r3, pc, #92	; 0x5c
    36f8:	e893000c 	ldm	r3, {r2, r3}
    36fc:	eb00014a 	bl	3c2c <__aeabi_dsub>
    3700:	e1a0200a 	mov	r2, r10
    3704:	e1a0300b 	mov	r3, r11
    3708:	eb00024c 	bl	4040 <__aeabi_dmul>
    370c:	e1a02000 	mov	r2, r0
    3710:	e1a03001 	mov	r3, r1
    3714:	e1a00004 	mov	r0, r4
    3718:	e1a01005 	mov	r1, r5
    371c:	eb000143 	bl	3c30 <__adddf3>
    3720:	e1a04000 	mov	r4, r0
    3724:	e1a05001 	mov	r5, r1
    3728:	eaffffe7 	b	36cc <__kernel_sin+0x184>
    372c:	e1a00000 	nop			; (mov r0, r0)
    3730:	5acfd57c 	.word	0x5acfd57c
    3734:	3de5d93a 	.word	0x3de5d93a
    3738:	8a2b9ceb 	.word	0x8a2b9ceb
    373c:	3e5ae5e6 	.word	0x3e5ae5e6
    3740:	57b1fe7d 	.word	0x57b1fe7d
    3744:	3ec71de3 	.word	0x3ec71de3
    3748:	19c161d5 	.word	0x19c161d5
    374c:	3f2a01a0 	.word	0x3f2a01a0
    3750:	1110f8a6 	.word	0x1110f8a6
    3754:	3f811111 	.word	0x3f811111
    3758:	55555549 	.word	0x55555549
    375c:	3fc55555 	.word	0x3fc55555
    3760:	3fe00000 	.word	0x3fe00000
    3764:	e1a00000 	nop			; (mov r0, r0)

00003768 <fabs>:
    3768:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    376c:	e12fff1e 	bx	lr

00003770 <finite>:
    3770:	e3811102 	orr	r1, r1, #-2147483648	; 0x80000000
    3774:	e2810601 	add	r0, r1, #1048576	; 0x100000
    3778:	e1a00fa0 	lsr	r0, r0, #31
    377c:	e12fff1e 	bx	lr

00003780 <floor>:
    3780:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
    3784:	e1a08081 	lsl	r8, r1, #1
    3788:	e1a08aa8 	lsr	r8, r8, #21
    378c:	e2486fff 	sub	r6, r8, #1020	; 0x3fc
    3790:	e2466003 	sub	r6, r6, #3
    3794:	e3560013 	cmp	r6, #19
    3798:	e1a02000 	mov	r2, r0
    379c:	e1a03001 	mov	r3, r1
    37a0:	e1a04000 	mov	r4, r0
    37a4:	e1a05001 	mov	r5, r1
    37a8:	e1a07001 	mov	r7, r1
    37ac:	ca000019 	bgt	3818 <floor+0x98>
    37b0:	e3560000 	cmp	r6, #0
    37b4:	ba000034 	blt	388c <floor+0x10c>
    37b8:	e59f8150 	ldr	r8, [pc, #336]	; 3910 <floor+0x190>
    37bc:	e1a08658 	asr	r8, r8, r6
    37c0:	e008c001 	and	r12, r8, r1
    37c4:	e19cc000 	orrs	r12, r12, r0
    37c8:	0a00000e 	beq	3808 <floor+0x88>
    37cc:	e28f3f4d 	add	r3, pc, #308	; 0x134
    37d0:	e893000c 	ldm	r3, {r2, r3}
    37d4:	eb000115 	bl	3c30 <__adddf3>
    37d8:	e3a02000 	mov	r2, #0
    37dc:	e3a03000 	mov	r3, #0
    37e0:	eb000388 	bl	4608 <__aeabi_dcmpgt>
    37e4:	e3500000 	cmp	r0, #0
    37e8:	0a000004 	beq	3800 <floor+0x80>
    37ec:	e3550000 	cmp	r5, #0
    37f0:	b3a03601 	movlt	r3, #1048576	; 0x100000
    37f4:	b0855653 	addlt	r5, r5, r3, asr r6
    37f8:	e3a04000 	mov	r4, #0
    37fc:	e1c57008 	bic	r7, r5, r8
    3800:	e1a03007 	mov	r3, r7
    3804:	e1a02004 	mov	r2, r4
    3808:	e1a00002 	mov	r0, r2
    380c:	e1a01003 	mov	r1, r3
    3810:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, r10, lr}
    3814:	e12fff1e 	bx	lr
    3818:	e3560033 	cmp	r6, #51	; 0x33
    381c:	da000005 	ble	3838 <floor+0xb8>
    3820:	e3560b01 	cmp	r6, #1024	; 0x400
    3824:	1afffff7 	bne	3808 <floor+0x88>
    3828:	eb000100 	bl	3c30 <__adddf3>
    382c:	e1a02000 	mov	r2, r0
    3830:	e1a03001 	mov	r3, r1
    3834:	eafffff3 	b	3808 <floor+0x88>
    3838:	e248ae41 	sub	r10, r8, #1040	; 0x410
    383c:	e24aa003 	sub	r10, r10, #3
    3840:	e3e0c000 	mvn	r12, #0
    3844:	e1a0aa3c 	lsr	r10, r12, r10
    3848:	e11a0000 	tst	r10, r0
    384c:	0affffed 	beq	3808 <floor+0x88>
    3850:	e28f30b0 	add	r3, pc, #176	; 0xb0
    3854:	e893000c 	ldm	r3, {r2, r3}
    3858:	eb0000f4 	bl	3c30 <__adddf3>
    385c:	e3a02000 	mov	r2, #0
    3860:	e3a03000 	mov	r3, #0
    3864:	eb000367 	bl	4608 <__aeabi_dcmpgt>
    3868:	e3500000 	cmp	r0, #0
    386c:	0affffe3 	beq	3800 <floor+0x80>
    3870:	e3550000 	cmp	r5, #0
    3874:	ba000017 	blt	38d8 <floor+0x158>
    3878:	e1c4400a 	bic	r4, r4, r10
    387c:	e1a07005 	mov	r7, r5
    3880:	e1a03007 	mov	r3, r7
    3884:	e1a02004 	mov	r2, r4
    3888:	eaffffde 	b	3808 <floor+0x88>
    388c:	e28f3074 	add	r3, pc, #116	; 0x74
    3890:	e893000c 	ldm	r3, {r2, r3}
    3894:	eb0000e5 	bl	3c30 <__adddf3>
    3898:	e3a02000 	mov	r2, #0
    389c:	e3a03000 	mov	r3, #0
    38a0:	eb000358 	bl	4608 <__aeabi_dcmpgt>
    38a4:	e3500000 	cmp	r0, #0
    38a8:	0affffd4 	beq	3800 <floor+0x80>
    38ac:	e3550000 	cmp	r5, #0
    38b0:	a3a04000 	movge	r4, #0
    38b4:	a1a07004 	movge	r7, r4
    38b8:	aaffffd0 	bge	3800 <floor+0x80>
    38bc:	e3c73102 	bic	r3, r7, #-2147483648	; 0x80000000
    38c0:	e1833004 	orr	r3, r3, r4
    38c4:	e3530000 	cmp	r3, #0
    38c8:	e59f3044 	ldr	r3, [pc, #68]	; 3914 <floor+0x194>
    38cc:	13a04000 	movne	r4, #0
    38d0:	11a07003 	movne	r7, r3
    38d4:	eaffffc9 	b	3800 <floor+0x80>
    38d8:	e3560014 	cmp	r6, #20
    38dc:	02855001 	addeq	r5, r5, #1
    38e0:	0affffe4 	beq	3878 <floor+0xf8>
    38e4:	e2688e43 	rsb	r8, r8, #1072	; 0x430
    38e8:	e2888003 	add	r8, r8, #3
    38ec:	e3a03001 	mov	r3, #1
    38f0:	e0843813 	add	r3, r4, r3, lsl r8
    38f4:	e1540003 	cmp	r4, r3
    38f8:	82855001 	addhi	r5, r5, #1
    38fc:	e1a04003 	mov	r4, r3
    3900:	eaffffdc 	b	3878 <floor+0xf8>
    3904:	e1a00000 	nop			; (mov r0, r0)
    3908:	8800759c 	.word	0x8800759c
    390c:	7e37e43c 	.word	0x7e37e43c
    3910:	000fffff 	.word	0x000fffff
    3914:	bff00000 	.word	0xbff00000

00003918 <matherr>:
    3918:	e3a00000 	mov	r0, #0
    391c:	e12fff1e 	bx	lr

00003920 <scalbn>:
    3920:	e59f3170 	ldr	r3, [pc, #368]	; 3a98 <scalbn+0x178>
    3924:	e0013003 	and	r3, r1, r3
    3928:	e1b03a43 	asrs	r3, r3, #20
    392c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    3930:	e1a04000 	mov	r4, r0
    3934:	e1a05001 	mov	r5, r1
    3938:	e1a06000 	mov	r6, r0
    393c:	e1a07001 	mov	r7, r1
    3940:	e1a08002 	mov	r8, r2
    3944:	1a000011 	bne	3990 <scalbn+0x70>
    3948:	e3c1c102 	bic	r12, r1, #-2147483648	; 0x80000000
    394c:	e19cc000 	orrs	r12, r12, r0
    3950:	0a00001d 	beq	39cc <scalbn+0xac>
    3954:	e59f3140 	ldr	r3, [pc, #320]	; 3a9c <scalbn+0x17c>
    3958:	e3a02000 	mov	r2, #0
    395c:	eb0001b7 	bl	4040 <__aeabi_dmul>
    3960:	e59f3138 	ldr	r3, [pc, #312]	; 3aa0 <scalbn+0x180>
    3964:	e1580003 	cmp	r8, r3
    3968:	e1a04000 	mov	r4, r0
    396c:	e1a05001 	mov	r5, r1
    3970:	e1a06000 	mov	r6, r0
    3974:	e1a07001 	mov	r7, r1
    3978:	ba000021 	blt	3a04 <scalbn+0xe4>
    397c:	e59f3114 	ldr	r3, [pc, #276]	; 3a98 <scalbn+0x178>
    3980:	e0013003 	and	r3, r1, r3
    3984:	e1a03a43 	asr	r3, r3, #20
    3988:	e2433036 	sub	r3, r3, #54	; 0x36
    398c:	ea000003 	b	39a0 <scalbn+0x80>
    3990:	e59f210c 	ldr	r2, [pc, #268]	; 3aa4 <scalbn+0x184>
    3994:	e1530002 	cmp	r3, r2
    3998:	11a01001 	movne	r1, r1
    399c:	0a000027 	beq	3a40 <scalbn+0x120>
    39a0:	e59f2100 	ldr	r2, [pc, #256]	; 3aa8 <scalbn+0x188>
    39a4:	e0833008 	add	r3, r3, r8
    39a8:	e1530002 	cmp	r3, r2
    39ac:	c1a02004 	movgt	r2, r4
    39b0:	c1a03005 	movgt	r3, r5
    39b4:	ca000018 	bgt	3a1c <scalbn+0xfc>
    39b8:	e3530000 	cmp	r3, #0
    39bc:	da000006 	ble	39dc <scalbn+0xbc>
    39c0:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    39c4:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    39c8:	e1815a03 	orr	r5, r1, r3, lsl #20
    39cc:	e1a00004 	mov	r0, r4
    39d0:	e1a01005 	mov	r1, r5
    39d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    39d8:	e12fff1e 	bx	lr
    39dc:	e3730035 	cmn	r3, #53	; 0x35
    39e0:	aa00001c 	bge	3a58 <scalbn+0x138>
    39e4:	e59f30c0 	ldr	r3, [pc, #192]	; 3aac <scalbn+0x18c>
    39e8:	e1580003 	cmp	r8, r3
    39ec:	e1a02004 	mov	r2, r4
    39f0:	e1a03005 	mov	r3, r5
    39f4:	ca000008 	bgt	3a1c <scalbn+0xfc>
    39f8:	e28f1088 	add	r1, pc, #136	; 0x88
    39fc:	e8910003 	ldm	r1, {r0, r1}
    3a00:	eb00002c 	bl	3ab8 <copysign>
    3a04:	e28f307c 	add	r3, pc, #124	; 0x7c
    3a08:	e893000c 	ldm	r3, {r2, r3}
    3a0c:	eb00018b 	bl	4040 <__aeabi_dmul>
    3a10:	e1a04000 	mov	r4, r0
    3a14:	e1a05001 	mov	r5, r1
    3a18:	eaffffeb 	b	39cc <scalbn+0xac>
    3a1c:	e28f106c 	add	r1, pc, #108	; 0x6c
    3a20:	e8910003 	ldm	r1, {r0, r1}
    3a24:	eb000023 	bl	3ab8 <copysign>
    3a28:	e28f3060 	add	r3, pc, #96	; 0x60
    3a2c:	e893000c 	ldm	r3, {r2, r3}
    3a30:	eb000182 	bl	4040 <__aeabi_dmul>
    3a34:	e1a04000 	mov	r4, r0
    3a38:	e1a05001 	mov	r5, r1
    3a3c:	eaffffe2 	b	39cc <scalbn+0xac>
    3a40:	e1a03005 	mov	r3, r5
    3a44:	e1a02000 	mov	r2, r0
    3a48:	eb000078 	bl	3c30 <__adddf3>
    3a4c:	e1a04000 	mov	r4, r0
    3a50:	e1a05001 	mov	r5, r1
    3a54:	eaffffdc 	b	39cc <scalbn+0xac>
    3a58:	e3c1147f 	bic	r1, r1, #2130706432	; 0x7f000000
    3a5c:	e2833036 	add	r3, r3, #54	; 0x36
    3a60:	e3c1160f 	bic	r1, r1, #15728640	; 0xf00000
    3a64:	e1815a03 	orr	r5, r1, r3, lsl #20
    3a68:	e1a00004 	mov	r0, r4
    3a6c:	e1a01005 	mov	r1, r5
    3a70:	e3a02000 	mov	r2, #0
    3a74:	e59f3034 	ldr	r3, [pc, #52]	; 3ab0 <scalbn+0x190>
    3a78:	eb000170 	bl	4040 <__aeabi_dmul>
    3a7c:	e1a04000 	mov	r4, r0
    3a80:	e1a05001 	mov	r5, r1
    3a84:	eaffffd0 	b	39cc <scalbn+0xac>
    3a88:	c2f8f359 	.word	0xc2f8f359
    3a8c:	01a56e1f 	.word	0x01a56e1f
    3a90:	8800759c 	.word	0x8800759c
    3a94:	7e37e43c 	.word	0x7e37e43c
    3a98:	7ff00000 	.word	0x7ff00000
    3a9c:	43500000 	.word	0x43500000
    3aa0:	ffff3cb0 	.word	0xffff3cb0
    3aa4:	000007ff 	.word	0x000007ff
    3aa8:	000007fe 	.word	0x000007fe
    3aac:	0000c350 	.word	0x0000c350
    3ab0:	3c900000 	.word	0x3c900000
    3ab4:	e1a00000 	nop			; (mov r0, r0)

00003ab8 <copysign>:
    3ab8:	e2033102 	and	r3, r3, #-2147483648	; 0x80000000
    3abc:	e3c12102 	bic	r2, r1, #-2147483648	; 0x80000000
    3ac0:	e92d0030 	push	{r4, r5}
    3ac4:	e1a05001 	mov	r5, r1
    3ac8:	e1a04000 	mov	r4, r0
    3acc:	e1831002 	orr	r1, r3, r2
    3ad0:	e8bd0030 	pop	{r4, r5}
    3ad4:	e12fff1e 	bx	lr

00003ad8 <__aeabi_idiv>:
    3ad8:	e3510000 	cmp	r1, #0
    3adc:	0a000043 	beq	3bf0 <.divsi3_skip_div0_test+0x110>

00003ae0 <.divsi3_skip_div0_test>:
    3ae0:	e020c001 	eor	r12, r0, r1
    3ae4:	42611000 	rsbmi	r1, r1, #0
    3ae8:	e2512001 	subs	r2, r1, #1
    3aec:	0a000027 	beq	3b90 <.divsi3_skip_div0_test+0xb0>
    3af0:	e1b03000 	movs	r3, r0
    3af4:	42603000 	rsbmi	r3, r0, #0
    3af8:	e1530001 	cmp	r3, r1
    3afc:	9a000026 	bls	3b9c <.divsi3_skip_div0_test+0xbc>
    3b00:	e1110002 	tst	r1, r2
    3b04:	0a000028 	beq	3bac <.divsi3_skip_div0_test+0xcc>
    3b08:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    3b0c:	01a01181 	lsleq	r1, r1, #3
    3b10:	03a02008 	moveq	r2, #8
    3b14:	13a02001 	movne	r2, #1
    3b18:	e3510201 	cmp	r1, #268435456	; 0x10000000
    3b1c:	31510003 	cmpcc	r1, r3
    3b20:	31a01201 	lslcc	r1, r1, #4
    3b24:	31a02202 	lslcc	r2, r2, #4
    3b28:	3afffffa 	bcc	3b18 <.divsi3_skip_div0_test+0x38>
    3b2c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    3b30:	31510003 	cmpcc	r1, r3
    3b34:	31a01081 	lslcc	r1, r1, #1
    3b38:	31a02082 	lslcc	r2, r2, #1
    3b3c:	3afffffa 	bcc	3b2c <.divsi3_skip_div0_test+0x4c>
    3b40:	e3a00000 	mov	r0, #0
    3b44:	e1530001 	cmp	r3, r1
    3b48:	20433001 	subcs	r3, r3, r1
    3b4c:	21800002 	orrcs	r0, r0, r2
    3b50:	e15300a1 	cmp	r3, r1, lsr #1
    3b54:	204330a1 	subcs	r3, r3, r1, lsr #1
    3b58:	218000a2 	orrcs	r0, r0, r2, lsr #1
    3b5c:	e1530121 	cmp	r3, r1, lsr #2
    3b60:	20433121 	subcs	r3, r3, r1, lsr #2
    3b64:	21800122 	orrcs	r0, r0, r2, lsr #2
    3b68:	e15301a1 	cmp	r3, r1, lsr #3
    3b6c:	204331a1 	subcs	r3, r3, r1, lsr #3
    3b70:	218001a2 	orrcs	r0, r0, r2, lsr #3
    3b74:	e3530000 	cmp	r3, #0
    3b78:	11b02222 	lsrsne	r2, r2, #4
    3b7c:	11a01221 	lsrne	r1, r1, #4
    3b80:	1affffef 	bne	3b44 <.divsi3_skip_div0_test+0x64>
    3b84:	e35c0000 	cmp	r12, #0
    3b88:	42600000 	rsbmi	r0, r0, #0
    3b8c:	e12fff1e 	bx	lr
    3b90:	e13c0000 	teq	r12, r0
    3b94:	42600000 	rsbmi	r0, r0, #0
    3b98:	e12fff1e 	bx	lr
    3b9c:	33a00000 	movcc	r0, #0
    3ba0:	01a00fcc 	asreq	r0, r12, #31
    3ba4:	03800001 	orreq	r0, r0, #1
    3ba8:	e12fff1e 	bx	lr
    3bac:	e3510801 	cmp	r1, #65536	; 0x10000
    3bb0:	21a01821 	lsrcs	r1, r1, #16
    3bb4:	23a02010 	movcs	r2, #16
    3bb8:	33a02000 	movcc	r2, #0
    3bbc:	e3510c01 	cmp	r1, #256	; 0x100
    3bc0:	21a01421 	lsrcs	r1, r1, #8
    3bc4:	22822008 	addcs	r2, r2, #8
    3bc8:	e3510010 	cmp	r1, #16
    3bcc:	21a01221 	lsrcs	r1, r1, #4
    3bd0:	22822004 	addcs	r2, r2, #4
    3bd4:	e3510004 	cmp	r1, #4
    3bd8:	82822003 	addhi	r2, r2, #3
    3bdc:	908220a1 	addls	r2, r2, r1, lsr #1
    3be0:	e35c0000 	cmp	r12, #0
    3be4:	e1a00233 	lsr	r0, r3, r2
    3be8:	42600000 	rsbmi	r0, r0, #0
    3bec:	e12fff1e 	bx	lr
    3bf0:	e3500000 	cmp	r0, #0
    3bf4:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
    3bf8:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
    3bfc:	ea000007 	b	3c20 <__aeabi_idiv0>

00003c00 <__aeabi_idivmod>:
    3c00:	e3510000 	cmp	r1, #0
    3c04:	0afffff9 	beq	3bf0 <.divsi3_skip_div0_test+0x110>
    3c08:	e92d4003 	push	{r0, r1, lr}
    3c0c:	ebffffb3 	bl	3ae0 <.divsi3_skip_div0_test>
    3c10:	e8bd4006 	pop	{r1, r2, lr}
    3c14:	e0030092 	mul	r3, r2, r0
    3c18:	e0411003 	sub	r1, r1, r3
    3c1c:	e12fff1e 	bx	lr

00003c20 <__aeabi_idiv0>:
    3c20:	e12fff1e 	bx	lr

00003c24 <__aeabi_drsub>:
    3c24:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    3c28:	ea000000 	b	3c30 <__adddf3>

00003c2c <__aeabi_dsub>:
    3c2c:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00003c30 <__adddf3>:
    3c30:	e92d4030 	push	{r4, r5, lr}
    3c34:	e1a04081 	lsl	r4, r1, #1
    3c38:	e1a05083 	lsl	r5, r3, #1
    3c3c:	e1340005 	teq	r4, r5
    3c40:	01300002 	teqeq	r0, r2
    3c44:	1194c000 	orrsne	r12, r4, r0
    3c48:	1195c002 	orrsne	r12, r5, r2
    3c4c:	11f0cac4 	mvnsne	r12, r4, asr #21
    3c50:	11f0cac5 	mvnsne	r12, r5, asr #21
    3c54:	0a00008c 	beq	3e8c <__adddf3+0x25c>
    3c58:	e1a04aa4 	lsr	r4, r4, #21
    3c5c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    3c60:	b2655000 	rsblt	r5, r5, #0
    3c64:	da000006 	ble	3c84 <__adddf3+0x54>
    3c68:	e0844005 	add	r4, r4, r5
    3c6c:	e0202002 	eor	r2, r0, r2
    3c70:	e0213003 	eor	r3, r1, r3
    3c74:	e0220000 	eor	r0, r2, r0
    3c78:	e0231001 	eor	r1, r3, r1
    3c7c:	e0202002 	eor	r2, r0, r2
    3c80:	e0213003 	eor	r3, r1, r3
    3c84:	e3550036 	cmp	r5, #54	; 0x36
    3c88:	88bd4030 	pophi	{r4, r5, lr}
    3c8c:	812fff1e 	bxhi	lr
    3c90:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    3c94:	e1a01601 	lsl	r1, r1, #12
    3c98:	e3a0c601 	mov	r12, #1048576	; 0x100000
    3c9c:	e18c1621 	orr	r1, r12, r1, lsr #12
    3ca0:	0a000001 	beq	3cac <__adddf3+0x7c>
    3ca4:	e2700000 	rsbs	r0, r0, #0
    3ca8:	e2e11000 	rsc	r1, r1, #0
    3cac:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    3cb0:	e1a03603 	lsl	r3, r3, #12
    3cb4:	e18c3623 	orr	r3, r12, r3, lsr #12
    3cb8:	0a000001 	beq	3cc4 <__adddf3+0x94>
    3cbc:	e2722000 	rsbs	r2, r2, #0
    3cc0:	e2e33000 	rsc	r3, r3, #0
    3cc4:	e1340005 	teq	r4, r5
    3cc8:	0a000069 	beq	3e74 <__adddf3+0x244>
    3ccc:	e2444001 	sub	r4, r4, #1
    3cd0:	e275e020 	rsbs	lr, r5, #32
    3cd4:	ba000005 	blt	3cf0 <__adddf3+0xc0>
    3cd8:	e1a0ce12 	lsl	r12, r2, lr
    3cdc:	e0900532 	adds	r0, r0, r2, lsr r5
    3ce0:	e2a11000 	adc	r1, r1, #0
    3ce4:	e0900e13 	adds	r0, r0, r3, lsl lr
    3ce8:	e0b11553 	adcs	r1, r1, r3, asr r5
    3cec:	ea000006 	b	3d0c <__adddf3+0xdc>
    3cf0:	e2455020 	sub	r5, r5, #32
    3cf4:	e28ee020 	add	lr, lr, #32
    3cf8:	e3520001 	cmp	r2, #1
    3cfc:	e1a0ce13 	lsl	r12, r3, lr
    3d00:	238cc002 	orrcs	r12, r12, #2
    3d04:	e0900553 	adds	r0, r0, r3, asr r5
    3d08:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    3d0c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3d10:	5a000002 	bpl	3d20 <__adddf3+0xf0>
    3d14:	e27cc000 	rsbs	r12, r12, #0
    3d18:	e2f00000 	rscs	r0, r0, #0
    3d1c:	e2e11000 	rsc	r1, r1, #0
    3d20:	e3510601 	cmp	r1, #1048576	; 0x100000
    3d24:	3a00000f 	bcc	3d68 <__adddf3+0x138>
    3d28:	e3510602 	cmp	r1, #2097152	; 0x200000
    3d2c:	3a000006 	bcc	3d4c <__adddf3+0x11c>
    3d30:	e1b010a1 	lsrs	r1, r1, #1
    3d34:	e1b00060 	rrxs	r0, r0
    3d38:	e1a0c06c 	rrx	r12, r12
    3d3c:	e2844001 	add	r4, r4, #1
    3d40:	e1a02a84 	lsl	r2, r4, #21
    3d44:	e3720501 	cmn	r2, #4194304	; 0x400000
    3d48:	2a00006b 	bcs	3efc <__adddf3+0x2cc>
    3d4c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    3d50:	01b0c0a0 	lsrseq	r12, r0, #1
    3d54:	e2b00000 	adcs	r0, r0, #0
    3d58:	e0a11a04 	adc	r1, r1, r4, lsl #20
    3d5c:	e1811005 	orr	r1, r1, r5
    3d60:	e8bd4030 	pop	{r4, r5, lr}
    3d64:	e12fff1e 	bx	lr
    3d68:	e1b0c08c 	lsls	r12, r12, #1
    3d6c:	e0b00000 	adcs	r0, r0, r0
    3d70:	e0a11001 	adc	r1, r1, r1
    3d74:	e3110601 	tst	r1, #1048576	; 0x100000
    3d78:	e2444001 	sub	r4, r4, #1
    3d7c:	1afffff2 	bne	3d4c <__adddf3+0x11c>
    3d80:	e3310000 	teq	r1, #0
    3d84:	13a03014 	movne	r3, #20
    3d88:	03a03034 	moveq	r3, #52	; 0x34
    3d8c:	01a01000 	moveq	r1, r0
    3d90:	03a00000 	moveq	r0, #0
    3d94:	e1a02001 	mov	r2, r1
    3d98:	e3520801 	cmp	r2, #65536	; 0x10000
    3d9c:	21a02822 	lsrcs	r2, r2, #16
    3da0:	22433010 	subcs	r3, r3, #16
    3da4:	e3520c01 	cmp	r2, #256	; 0x100
    3da8:	21a02422 	lsrcs	r2, r2, #8
    3dac:	22433008 	subcs	r3, r3, #8
    3db0:	e3520010 	cmp	r2, #16
    3db4:	21a02222 	lsrcs	r2, r2, #4
    3db8:	22433004 	subcs	r3, r3, #4
    3dbc:	e3520004 	cmp	r2, #4
    3dc0:	22433002 	subcs	r3, r3, #2
    3dc4:	304330a2 	subcc	r3, r3, r2, lsr #1
    3dc8:	e04331a2 	sub	r3, r3, r2, lsr #3
    3dcc:	e2532020 	subs	r2, r3, #32
    3dd0:	aa000007 	bge	3df4 <__adddf3+0x1c4>
    3dd4:	e292200c 	adds	r2, r2, #12
    3dd8:	da000004 	ble	3df0 <__adddf3+0x1c0>
    3ddc:	e282c014 	add	r12, r2, #20
    3de0:	e262200c 	rsb	r2, r2, #12
    3de4:	e1a00c11 	lsl	r0, r1, r12
    3de8:	e1a01231 	lsr	r1, r1, r2
    3dec:	ea000004 	b	3e04 <__adddf3+0x1d4>
    3df0:	e2822014 	add	r2, r2, #20
    3df4:	d262c020 	rsble	r12, r2, #32
    3df8:	e1a01211 	lsl	r1, r1, r2
    3dfc:	d1811c30 	orrle	r1, r1, r0, lsr r12
    3e00:	d1a00210 	lslle	r0, r0, r2
    3e04:	e0544003 	subs	r4, r4, r3
    3e08:	a0811a04 	addge	r1, r1, r4, lsl #20
    3e0c:	a1811005 	orrge	r1, r1, r5
    3e10:	a8bd4030 	popge	{r4, r5, lr}
    3e14:	a12fff1e 	bxge	lr
    3e18:	e1e04004 	mvn	r4, r4
    3e1c:	e254401f 	subs	r4, r4, #31
    3e20:	aa00000f 	bge	3e64 <__adddf3+0x234>
    3e24:	e294400c 	adds	r4, r4, #12
    3e28:	ca000006 	bgt	3e48 <__adddf3+0x218>
    3e2c:	e2844014 	add	r4, r4, #20
    3e30:	e2642020 	rsb	r2, r4, #32
    3e34:	e1a00430 	lsr	r0, r0, r4
    3e38:	e1800211 	orr	r0, r0, r1, lsl r2
    3e3c:	e1851431 	orr	r1, r5, r1, lsr r4
    3e40:	e8bd4030 	pop	{r4, r5, lr}
    3e44:	e12fff1e 	bx	lr
    3e48:	e264400c 	rsb	r4, r4, #12
    3e4c:	e2642020 	rsb	r2, r4, #32
    3e50:	e1a00230 	lsr	r0, r0, r2
    3e54:	e1800411 	orr	r0, r0, r1, lsl r4
    3e58:	e1a01005 	mov	r1, r5
    3e5c:	e8bd4030 	pop	{r4, r5, lr}
    3e60:	e12fff1e 	bx	lr
    3e64:	e1a00431 	lsr	r0, r1, r4
    3e68:	e1a01005 	mov	r1, r5
    3e6c:	e8bd4030 	pop	{r4, r5, lr}
    3e70:	e12fff1e 	bx	lr
    3e74:	e3340000 	teq	r4, #0
    3e78:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    3e7c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    3e80:	02844001 	addeq	r4, r4, #1
    3e84:	12455001 	subne	r5, r5, #1
    3e88:	eaffff8f 	b	3ccc <__adddf3+0x9c>
    3e8c:	e1f0cac4 	mvns	r12, r4, asr #21
    3e90:	11f0cac5 	mvnsne	r12, r5, asr #21
    3e94:	0a00001d 	beq	3f10 <__adddf3+0x2e0>
    3e98:	e1340005 	teq	r4, r5
    3e9c:	01300002 	teqeq	r0, r2
    3ea0:	0a000004 	beq	3eb8 <__adddf3+0x288>
    3ea4:	e194c000 	orrs	r12, r4, r0
    3ea8:	01a01003 	moveq	r1, r3
    3eac:	01a00002 	moveq	r0, r2
    3eb0:	e8bd4030 	pop	{r4, r5, lr}
    3eb4:	e12fff1e 	bx	lr
    3eb8:	e1310003 	teq	r1, r3
    3ebc:	13a01000 	movne	r1, #0
    3ec0:	13a00000 	movne	r0, #0
    3ec4:	18bd4030 	popne	{r4, r5, lr}
    3ec8:	112fff1e 	bxne	lr
    3ecc:	e1b0caa4 	lsrs	r12, r4, #21
    3ed0:	1a000004 	bne	3ee8 <__adddf3+0x2b8>
    3ed4:	e1b00080 	lsls	r0, r0, #1
    3ed8:	e0b11001 	adcs	r1, r1, r1
    3edc:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    3ee0:	e8bd4030 	pop	{r4, r5, lr}
    3ee4:	e12fff1e 	bx	lr
    3ee8:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    3eec:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    3ef0:	38bd4030 	popcc	{r4, r5, lr}
    3ef4:	312fff1e 	bxcc	lr
    3ef8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3efc:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    3f00:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    3f04:	e3a00000 	mov	r0, #0
    3f08:	e8bd4030 	pop	{r4, r5, lr}
    3f0c:	e12fff1e 	bx	lr
    3f10:	e1f0cac4 	mvns	r12, r4, asr #21
    3f14:	11a01003 	movne	r1, r3
    3f18:	11a00002 	movne	r0, r2
    3f1c:	01f0cac5 	mvnseq	r12, r5, asr #21
    3f20:	11a03001 	movne	r3, r1
    3f24:	11a02000 	movne	r2, r0
    3f28:	e1904601 	orrs	r4, r0, r1, lsl #12
    3f2c:	01925603 	orrseq	r5, r2, r3, lsl #12
    3f30:	01310003 	teqeq	r1, r3
    3f34:	13811702 	orrne	r1, r1, #524288	; 0x80000
    3f38:	e8bd4030 	pop	{r4, r5, lr}
    3f3c:	e12fff1e 	bx	lr

00003f40 <__aeabi_ui2d>:
    3f40:	e3300000 	teq	r0, #0
    3f44:	03a01000 	moveq	r1, #0
    3f48:	012fff1e 	bxeq	lr
    3f4c:	e92d4030 	push	{r4, r5, lr}
    3f50:	e3a04b01 	mov	r4, #1024	; 0x400
    3f54:	e2844032 	add	r4, r4, #50	; 0x32
    3f58:	e3a05000 	mov	r5, #0
    3f5c:	e3a01000 	mov	r1, #0
    3f60:	eaffff86 	b	3d80 <__adddf3+0x150>

00003f64 <__aeabi_i2d>:
    3f64:	e3300000 	teq	r0, #0
    3f68:	03a01000 	moveq	r1, #0
    3f6c:	012fff1e 	bxeq	lr
    3f70:	e92d4030 	push	{r4, r5, lr}
    3f74:	e3a04b01 	mov	r4, #1024	; 0x400
    3f78:	e2844032 	add	r4, r4, #50	; 0x32
    3f7c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    3f80:	42600000 	rsbmi	r0, r0, #0
    3f84:	e3a01000 	mov	r1, #0
    3f88:	eaffff7c 	b	3d80 <__adddf3+0x150>

00003f8c <__aeabi_f2d>:
    3f8c:	e1b02080 	lsls	r2, r0, #1
    3f90:	e1a011c2 	asr	r1, r2, #3
    3f94:	e1a01061 	rrx	r1, r1
    3f98:	e1a00e02 	lsl	r0, r2, #28
    3f9c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    3fa0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    3fa4:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    3fa8:	112fff1e 	bxne	lr
    3fac:	e3320000 	teq	r2, #0
    3fb0:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    3fb4:	012fff1e 	bxeq	lr
    3fb8:	e92d4030 	push	{r4, r5, lr}
    3fbc:	e3a04d0e 	mov	r4, #896	; 0x380
    3fc0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    3fc4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    3fc8:	eaffff6c 	b	3d80 <__adddf3+0x150>

00003fcc <__aeabi_ul2d>:
    3fcc:	e1902001 	orrs	r2, r0, r1
    3fd0:	012fff1e 	bxeq	lr
    3fd4:	e92d4030 	push	{r4, r5, lr}
    3fd8:	e3a05000 	mov	r5, #0
    3fdc:	ea000006 	b	3ffc <__aeabi_l2d+0x1c>

00003fe0 <__aeabi_l2d>:
    3fe0:	e1902001 	orrs	r2, r0, r1
    3fe4:	012fff1e 	bxeq	lr
    3fe8:	e92d4030 	push	{r4, r5, lr}
    3fec:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    3ff0:	5a000001 	bpl	3ffc <__aeabi_l2d+0x1c>
    3ff4:	e2700000 	rsbs	r0, r0, #0
    3ff8:	e2e11000 	rsc	r1, r1, #0
    3ffc:	e3a04b01 	mov	r4, #1024	; 0x400
    4000:	e2844032 	add	r4, r4, #50	; 0x32
    4004:	e1b0cb21 	lsrs	r12, r1, #22
    4008:	0affff44 	beq	3d20 <__adddf3+0xf0>
    400c:	e3a02003 	mov	r2, #3
    4010:	e1b0c1ac 	lsrs	r12, r12, #3
    4014:	12822003 	addne	r2, r2, #3
    4018:	e1b0c1ac 	lsrs	r12, r12, #3
    401c:	12822003 	addne	r2, r2, #3
    4020:	e08221ac 	add	r2, r2, r12, lsr #3
    4024:	e2623020 	rsb	r3, r2, #32
    4028:	e1a0c310 	lsl	r12, r0, r3
    402c:	e1a00230 	lsr	r0, r0, r2
    4030:	e1800311 	orr	r0, r0, r1, lsl r3
    4034:	e1a01231 	lsr	r1, r1, r2
    4038:	e0844002 	add	r4, r4, r2
    403c:	eaffff37 	b	3d20 <__adddf3+0xf0>

00004040 <__aeabi_dmul>:
    4040:	e92d4070 	push	{r4, r5, r6, lr}
    4044:	e3a0c0ff 	mov	r12, #255	; 0xff
    4048:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    404c:	e01c4a21 	ands	r4, r12, r1, lsr #20
    4050:	101c5a23 	andsne	r5, r12, r3, lsr #20
    4054:	1134000c 	teqne	r4, r12
    4058:	1135000c 	teqne	r5, r12
    405c:	0b000075 	bleq	4238 <__aeabi_dmul+0x1f8>
    4060:	e0844005 	add	r4, r4, r5
    4064:	e0216003 	eor	r6, r1, r3
    4068:	e1c11a8c 	bic	r1, r1, r12, lsl #21
    406c:	e1c33a8c 	bic	r3, r3, r12, lsl #21
    4070:	e1905601 	orrs	r5, r0, r1, lsl #12
    4074:	11925603 	orrsne	r5, r2, r3, lsl #12
    4078:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    407c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    4080:	0a00001d 	beq	40fc <__aeabi_dmul+0xbc>
    4084:	e08ec290 	umull	r12, lr, r0, r2
    4088:	e3a05000 	mov	r5, #0
    408c:	e0a5e291 	umlal	lr, r5, r1, r2
    4090:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    4094:	e0a5e390 	umlal	lr, r5, r0, r3
    4098:	e3a06000 	mov	r6, #0
    409c:	e0a65391 	umlal	r5, r6, r1, r3
    40a0:	e33c0000 	teq	r12, #0
    40a4:	138ee001 	orrne	lr, lr, #1
    40a8:	e24440ff 	sub	r4, r4, #255	; 0xff
    40ac:	e3560c02 	cmp	r6, #512	; 0x200
    40b0:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    40b4:	2a000002 	bcs	40c4 <__aeabi_dmul+0x84>
    40b8:	e1b0e08e 	lsls	lr, lr, #1
    40bc:	e0b55005 	adcs	r5, r5, r5
    40c0:	e0a66006 	adc	r6, r6, r6
    40c4:	e1821586 	orr	r1, r2, r6, lsl #11
    40c8:	e1811aa5 	orr	r1, r1, r5, lsr #21
    40cc:	e1a00585 	lsl	r0, r5, #11
    40d0:	e1800aae 	orr	r0, r0, lr, lsr #21
    40d4:	e1a0e58e 	lsl	lr, lr, #11
    40d8:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    40dc:	835c0c07 	cmphi	r12, #1792	; 0x700
    40e0:	8a000011 	bhi	412c <__aeabi_dmul+0xec>
    40e4:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    40e8:	01b0e0a0 	lsrseq	lr, r0, #1
    40ec:	e2b00000 	adcs	r0, r0, #0
    40f0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    40f4:	e8bd4070 	pop	{r4, r5, r6, lr}
    40f8:	e12fff1e 	bx	lr
    40fc:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    4100:	e1861001 	orr	r1, r6, r1
    4104:	e1800002 	orr	r0, r0, r2
    4108:	e0211003 	eor	r1, r1, r3
    410c:	e05440ac 	subs	r4, r4, r12, lsr #1
    4110:	c074500c 	rsbsgt	r5, r4, r12
    4114:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    4118:	c8bd4070 	popgt	{r4, r5, r6, lr}
    411c:	c12fff1e 	bxgt	lr
    4120:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    4124:	e3a0e000 	mov	lr, #0
    4128:	e2544001 	subs	r4, r4, #1
    412c:	ca00005d 	bgt	42a8 <__aeabi_dmul+0x268>
    4130:	e3740036 	cmn	r4, #54	; 0x36
    4134:	d3a00000 	movle	r0, #0
    4138:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    413c:	d8bd4070 	pople	{r4, r5, r6, lr}
    4140:	d12fff1e 	bxle	lr
    4144:	e2644000 	rsb	r4, r4, #0
    4148:	e2544020 	subs	r4, r4, #32
    414c:	aa00001a 	bge	41bc <__aeabi_dmul+0x17c>
    4150:	e294400c 	adds	r4, r4, #12
    4154:	ca00000c 	bgt	418c <__aeabi_dmul+0x14c>
    4158:	e2844014 	add	r4, r4, #20
    415c:	e2645020 	rsb	r5, r4, #32
    4160:	e1a03510 	lsl	r3, r0, r5
    4164:	e1a00430 	lsr	r0, r0, r4
    4168:	e1800511 	orr	r0, r0, r1, lsl r5
    416c:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    4170:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    4174:	e0900fa3 	adds	r0, r0, r3, lsr #31
    4178:	e0a21431 	adc	r1, r2, r1, lsr r4
    417c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    4180:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    4184:	e8bd4070 	pop	{r4, r5, r6, lr}
    4188:	e12fff1e 	bx	lr
    418c:	e264400c 	rsb	r4, r4, #12
    4190:	e2645020 	rsb	r5, r4, #32
    4194:	e1a03410 	lsl	r3, r0, r4
    4198:	e1a00530 	lsr	r0, r0, r5
    419c:	e1800411 	orr	r0, r0, r1, lsl r4
    41a0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    41a4:	e0900fa3 	adds	r0, r0, r3, lsr #31
    41a8:	e2a11000 	adc	r1, r1, #0
    41ac:	e19ee083 	orrs	lr, lr, r3, lsl #1
    41b0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    41b4:	e8bd4070 	pop	{r4, r5, r6, lr}
    41b8:	e12fff1e 	bx	lr
    41bc:	e2645020 	rsb	r5, r4, #32
    41c0:	e18ee510 	orr	lr, lr, r0, lsl r5
    41c4:	e1a03430 	lsr	r3, r0, r4
    41c8:	e1833511 	orr	r3, r3, r1, lsl r5
    41cc:	e1a00431 	lsr	r0, r1, r4
    41d0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    41d4:	e1c00431 	bic	r0, r0, r1, lsr r4
    41d8:	e0800fa3 	add	r0, r0, r3, lsr #31
    41dc:	e19ee083 	orrs	lr, lr, r3, lsl #1
    41e0:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    41e4:	e8bd4070 	pop	{r4, r5, r6, lr}
    41e8:	e12fff1e 	bx	lr
    41ec:	e3340000 	teq	r4, #0
    41f0:	1a000008 	bne	4218 <__aeabi_dmul+0x1d8>
    41f4:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    41f8:	e1b00080 	lsls	r0, r0, #1
    41fc:	e0a11001 	adc	r1, r1, r1
    4200:	e3110601 	tst	r1, #1048576	; 0x100000
    4204:	02444001 	subeq	r4, r4, #1
    4208:	0afffffa 	beq	41f8 <__aeabi_dmul+0x1b8>
    420c:	e1811006 	orr	r1, r1, r6
    4210:	e3350000 	teq	r5, #0
    4214:	112fff1e 	bxne	lr
    4218:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    421c:	e1b02082 	lsls	r2, r2, #1
    4220:	e0a33003 	adc	r3, r3, r3
    4224:	e3130601 	tst	r3, #1048576	; 0x100000
    4228:	02455001 	subeq	r5, r5, #1
    422c:	0afffffa 	beq	421c <__aeabi_dmul+0x1dc>
    4230:	e1833006 	orr	r3, r3, r6
    4234:	e12fff1e 	bx	lr
    4238:	e134000c 	teq	r4, r12
    423c:	e00c5a23 	and	r5, r12, r3, lsr #20
    4240:	1135000c 	teqne	r5, r12
    4244:	0a000007 	beq	4268 <__aeabi_dmul+0x228>
    4248:	e1906081 	orrs	r6, r0, r1, lsl #1
    424c:	11926083 	orrsne	r6, r2, r3, lsl #1
    4250:	1affffe5 	bne	41ec <__aeabi_dmul+0x1ac>
    4254:	e0211003 	eor	r1, r1, r3
    4258:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    425c:	e3a00000 	mov	r0, #0
    4260:	e8bd4070 	pop	{r4, r5, r6, lr}
    4264:	e12fff1e 	bx	lr
    4268:	e1906081 	orrs	r6, r0, r1, lsl #1
    426c:	01a00002 	moveq	r0, r2
    4270:	01a01003 	moveq	r1, r3
    4274:	11926083 	orrsne	r6, r2, r3, lsl #1
    4278:	0a000010 	beq	42c0 <__aeabi_dmul+0x280>
    427c:	e134000c 	teq	r4, r12
    4280:	1a000001 	bne	428c <__aeabi_dmul+0x24c>
    4284:	e1906601 	orrs	r6, r0, r1, lsl #12
    4288:	1a00000c 	bne	42c0 <__aeabi_dmul+0x280>
    428c:	e135000c 	teq	r5, r12
    4290:	1a000003 	bne	42a4 <__aeabi_dmul+0x264>
    4294:	e1926603 	orrs	r6, r2, r3, lsl #12
    4298:	11a00002 	movne	r0, r2
    429c:	11a01003 	movne	r1, r3
    42a0:	1a000006 	bne	42c0 <__aeabi_dmul+0x280>
    42a4:	e0211003 	eor	r1, r1, r3
    42a8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    42ac:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    42b0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    42b4:	e3a00000 	mov	r0, #0
    42b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    42bc:	e12fff1e 	bx	lr
    42c0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    42c4:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    42c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    42cc:	e12fff1e 	bx	lr

000042d0 <__aeabi_ddiv>:
    42d0:	e92d4070 	push	{r4, r5, r6, lr}
    42d4:	e3a0c0ff 	mov	r12, #255	; 0xff
    42d8:	e38ccc07 	orr	r12, r12, #1792	; 0x700
    42dc:	e01c4a21 	ands	r4, r12, r1, lsr #20
    42e0:	101c5a23 	andsne	r5, r12, r3, lsr #20
    42e4:	1134000c 	teqne	r4, r12
    42e8:	1135000c 	teqne	r5, r12
    42ec:	0b00005e 	bleq	446c <__aeabi_ddiv+0x19c>
    42f0:	e0444005 	sub	r4, r4, r5
    42f4:	e021e003 	eor	lr, r1, r3
    42f8:	e1925603 	orrs	r5, r2, r3, lsl #12
    42fc:	e1a01601 	lsl	r1, r1, #12
    4300:	0a00004c 	beq	4438 <__aeabi_ddiv+0x168>
    4304:	e1a03603 	lsl	r3, r3, #12
    4308:	e3a05201 	mov	r5, #268435456	; 0x10000000
    430c:	e1853223 	orr	r3, r5, r3, lsr #4
    4310:	e1833c22 	orr	r3, r3, r2, lsr #24
    4314:	e1a02402 	lsl	r2, r2, #8
    4318:	e1855221 	orr	r5, r5, r1, lsr #4
    431c:	e1855c20 	orr	r5, r5, r0, lsr #24
    4320:	e1a06400 	lsl	r6, r0, #8
    4324:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    4328:	e1550003 	cmp	r5, r3
    432c:	01560002 	cmpeq	r6, r2
    4330:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    4334:	e2844c03 	add	r4, r4, #768	; 0x300
    4338:	2a000001 	bcs	4344 <__aeabi_ddiv+0x74>
    433c:	e1b030a3 	lsrs	r3, r3, #1
    4340:	e1a02062 	rrx	r2, r2
    4344:	e0566002 	subs	r6, r6, r2
    4348:	e0c55003 	sbc	r5, r5, r3
    434c:	e1b030a3 	lsrs	r3, r3, #1
    4350:	e1a02062 	rrx	r2, r2
    4354:	e3a00601 	mov	r0, #1048576	; 0x100000
    4358:	e3a0c702 	mov	r12, #524288	; 0x80000
    435c:	e056e002 	subs	lr, r6, r2
    4360:	e0d5e003 	sbcs	lr, r5, r3
    4364:	20466002 	subcs	r6, r6, r2
    4368:	21a0500e 	movcs	r5, lr
    436c:	2180000c 	orrcs	r0, r0, r12
    4370:	e1b030a3 	lsrs	r3, r3, #1
    4374:	e1a02062 	rrx	r2, r2
    4378:	e056e002 	subs	lr, r6, r2
    437c:	e0d5e003 	sbcs	lr, r5, r3
    4380:	20466002 	subcs	r6, r6, r2
    4384:	21a0500e 	movcs	r5, lr
    4388:	218000ac 	orrcs	r0, r0, r12, lsr #1
    438c:	e1b030a3 	lsrs	r3, r3, #1
    4390:	e1a02062 	rrx	r2, r2
    4394:	e056e002 	subs	lr, r6, r2
    4398:	e0d5e003 	sbcs	lr, r5, r3
    439c:	20466002 	subcs	r6, r6, r2
    43a0:	21a0500e 	movcs	r5, lr
    43a4:	2180012c 	orrcs	r0, r0, r12, lsr #2
    43a8:	e1b030a3 	lsrs	r3, r3, #1
    43ac:	e1a02062 	rrx	r2, r2
    43b0:	e056e002 	subs	lr, r6, r2
    43b4:	e0d5e003 	sbcs	lr, r5, r3
    43b8:	20466002 	subcs	r6, r6, r2
    43bc:	21a0500e 	movcs	r5, lr
    43c0:	218001ac 	orrcs	r0, r0, r12, lsr #3
    43c4:	e195e006 	orrs	lr, r5, r6
    43c8:	0a00000d 	beq	4404 <__aeabi_ddiv+0x134>
    43cc:	e1a05205 	lsl	r5, r5, #4
    43d0:	e1855e26 	orr	r5, r5, r6, lsr #28
    43d4:	e1a06206 	lsl	r6, r6, #4
    43d8:	e1a03183 	lsl	r3, r3, #3
    43dc:	e1833ea2 	orr	r3, r3, r2, lsr #29
    43e0:	e1a02182 	lsl	r2, r2, #3
    43e4:	e1b0c22c 	lsrs	r12, r12, #4
    43e8:	1affffdb 	bne	435c <__aeabi_ddiv+0x8c>
    43ec:	e3110601 	tst	r1, #1048576	; 0x100000
    43f0:	1a000006 	bne	4410 <__aeabi_ddiv+0x140>
    43f4:	e1811000 	orr	r1, r1, r0
    43f8:	e3a00000 	mov	r0, #0
    43fc:	e3a0c102 	mov	r12, #-2147483648	; 0x80000000
    4400:	eaffffd5 	b	435c <__aeabi_ddiv+0x8c>
    4404:	e3110601 	tst	r1, #1048576	; 0x100000
    4408:	01811000 	orreq	r1, r1, r0
    440c:	03a00000 	moveq	r0, #0
    4410:	e254c0fd 	subs	r12, r4, #253	; 0xfd
    4414:	835c0c07 	cmphi	r12, #1792	; 0x700
    4418:	8affff43 	bhi	412c <__aeabi_dmul+0xec>
    441c:	e055c003 	subs	r12, r5, r3
    4420:	0056c002 	subseq	r12, r6, r2
    4424:	01b0c0a0 	lsrseq	r12, r0, #1
    4428:	e2b00000 	adcs	r0, r0, #0
    442c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    4430:	e8bd4070 	pop	{r4, r5, r6, lr}
    4434:	e12fff1e 	bx	lr
    4438:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    443c:	e18e1621 	orr	r1, lr, r1, lsr #12
    4440:	e09440ac 	adds	r4, r4, r12, lsr #1
    4444:	c074500c 	rsbsgt	r5, r4, r12
    4448:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    444c:	c8bd4070 	popgt	{r4, r5, r6, lr}
    4450:	c12fff1e 	bxgt	lr
    4454:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    4458:	e3a0e000 	mov	lr, #0
    445c:	e2544001 	subs	r4, r4, #1
    4460:	eaffff31 	b	412c <__aeabi_dmul+0xec>
    4464:	e185e006 	orr	lr, r5, r6
    4468:	eaffff2f 	b	412c <__aeabi_dmul+0xec>
    446c:	e00c5a23 	and	r5, r12, r3, lsr #20
    4470:	e134000c 	teq	r4, r12
    4474:	0135000c 	teqeq	r5, r12
    4478:	0affff90 	beq	42c0 <__aeabi_dmul+0x280>
    447c:	e134000c 	teq	r4, r12
    4480:	1a000006 	bne	44a0 <__aeabi_ddiv+0x1d0>
    4484:	e1904601 	orrs	r4, r0, r1, lsl #12
    4488:	1affff8c 	bne	42c0 <__aeabi_dmul+0x280>
    448c:	e135000c 	teq	r5, r12
    4490:	1affff83 	bne	42a4 <__aeabi_dmul+0x264>
    4494:	e1a00002 	mov	r0, r2
    4498:	e1a01003 	mov	r1, r3
    449c:	eaffff87 	b	42c0 <__aeabi_dmul+0x280>
    44a0:	e135000c 	teq	r5, r12
    44a4:	1a000004 	bne	44bc <__aeabi_ddiv+0x1ec>
    44a8:	e1925603 	orrs	r5, r2, r3, lsl #12
    44ac:	0affff68 	beq	4254 <__aeabi_dmul+0x214>
    44b0:	e1a00002 	mov	r0, r2
    44b4:	e1a01003 	mov	r1, r3
    44b8:	eaffff80 	b	42c0 <__aeabi_dmul+0x280>
    44bc:	e1906081 	orrs	r6, r0, r1, lsl #1
    44c0:	11926083 	orrsne	r6, r2, r3, lsl #1
    44c4:	1affff48 	bne	41ec <__aeabi_dmul+0x1ac>
    44c8:	e1904081 	orrs	r4, r0, r1, lsl #1
    44cc:	1affff74 	bne	42a4 <__aeabi_dmul+0x264>
    44d0:	e1925083 	orrs	r5, r2, r3, lsl #1
    44d4:	1affff5e 	bne	4254 <__aeabi_dmul+0x214>
    44d8:	eaffff78 	b	42c0 <__aeabi_dmul+0x280>

000044dc <__gedf2>:
    44dc:	e3e0c000 	mvn	r12, #0
    44e0:	ea000002 	b	44f0 <__cmpdf2+0x4>

000044e4 <__ledf2>:
    44e4:	e3a0c001 	mov	r12, #1
    44e8:	ea000000 	b	44f0 <__cmpdf2+0x4>

000044ec <__cmpdf2>:
    44ec:	e3a0c001 	mov	r12, #1
    44f0:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    44f4:	e1a0c081 	lsl	r12, r1, #1
    44f8:	e1f0cacc 	mvns	r12, r12, asr #21
    44fc:	e1a0c083 	lsl	r12, r3, #1
    4500:	11f0cacc 	mvnsne	r12, r12, asr #21
    4504:	0a00000e 	beq	4544 <__cmpdf2+0x58>
    4508:	e28dd004 	add	sp, sp, #4
    450c:	e190c081 	orrs	r12, r0, r1, lsl #1
    4510:	0192c083 	orrseq	r12, r2, r3, lsl #1
    4514:	11310003 	teqne	r1, r3
    4518:	01300002 	teqeq	r0, r2
    451c:	03a00000 	moveq	r0, #0
    4520:	012fff1e 	bxeq	lr
    4524:	e3700000 	cmn	r0, #0
    4528:	e1310003 	teq	r1, r3
    452c:	51510003 	cmppl	r1, r3
    4530:	01500002 	cmpeq	r0, r2
    4534:	21a00fc3 	asrcs	r0, r3, #31
    4538:	31e00fc3 	mvncc	r0, r3, asr #31
    453c:	e3800001 	orr	r0, r0, #1
    4540:	e12fff1e 	bx	lr
    4544:	e1a0c081 	lsl	r12, r1, #1
    4548:	e1f0cacc 	mvns	r12, r12, asr #21
    454c:	1a000001 	bne	4558 <__cmpdf2+0x6c>
    4550:	e190c601 	orrs	r12, r0, r1, lsl #12
    4554:	1a000004 	bne	456c <__cmpdf2+0x80>
    4558:	e1a0c083 	lsl	r12, r3, #1
    455c:	e1f0cacc 	mvns	r12, r12, asr #21
    4560:	1affffe8 	bne	4508 <__cmpdf2+0x1c>
    4564:	e192c603 	orrs	r12, r2, r3, lsl #12
    4568:	0affffe6 	beq	4508 <__cmpdf2+0x1c>
    456c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    4570:	e12fff1e 	bx	lr

00004574 <__aeabi_cdrcmple>:
    4574:	e1a0c000 	mov	r12, r0
    4578:	e1a00002 	mov	r0, r2
    457c:	e1a0200c 	mov	r2, r12
    4580:	e1a0c001 	mov	r12, r1
    4584:	e1a01003 	mov	r1, r3
    4588:	e1a0300c 	mov	r3, r12
    458c:	eaffffff 	b	4590 <__aeabi_cdcmpeq>

00004590 <__aeabi_cdcmpeq>:
    4590:	e92d4001 	push	{r0, lr}
    4594:	ebffffd4 	bl	44ec <__cmpdf2>
    4598:	e3500000 	cmp	r0, #0
    459c:	43700000 	cmnmi	r0, #0
    45a0:	e8bd4001 	pop	{r0, lr}
    45a4:	e12fff1e 	bx	lr

000045a8 <__aeabi_dcmpeq>:
    45a8:	e52de008 	str	lr, [sp, #-8]!
    45ac:	ebfffff7 	bl	4590 <__aeabi_cdcmpeq>
    45b0:	03a00001 	moveq	r0, #1
    45b4:	13a00000 	movne	r0, #0
    45b8:	e49de008 	ldr	lr, [sp], #8
    45bc:	e12fff1e 	bx	lr

000045c0 <__aeabi_dcmplt>:
    45c0:	e52de008 	str	lr, [sp, #-8]!
    45c4:	ebfffff1 	bl	4590 <__aeabi_cdcmpeq>
    45c8:	33a00001 	movcc	r0, #1
    45cc:	23a00000 	movcs	r0, #0
    45d0:	e49de008 	ldr	lr, [sp], #8
    45d4:	e12fff1e 	bx	lr

000045d8 <__aeabi_dcmple>:
    45d8:	e52de008 	str	lr, [sp, #-8]!
    45dc:	ebffffeb 	bl	4590 <__aeabi_cdcmpeq>
    45e0:	93a00001 	movls	r0, #1
    45e4:	83a00000 	movhi	r0, #0
    45e8:	e49de008 	ldr	lr, [sp], #8
    45ec:	e12fff1e 	bx	lr

000045f0 <__aeabi_dcmpge>:
    45f0:	e52de008 	str	lr, [sp, #-8]!
    45f4:	ebffffde 	bl	4574 <__aeabi_cdrcmple>
    45f8:	93a00001 	movls	r0, #1
    45fc:	83a00000 	movhi	r0, #0
    4600:	e49de008 	ldr	lr, [sp], #8
    4604:	e12fff1e 	bx	lr

00004608 <__aeabi_dcmpgt>:
    4608:	e52de008 	str	lr, [sp, #-8]!
    460c:	ebffffd8 	bl	4574 <__aeabi_cdrcmple>
    4610:	33a00001 	movcc	r0, #1
    4614:	23a00000 	movcs	r0, #0
    4618:	e49de008 	ldr	lr, [sp], #8
    461c:	e12fff1e 	bx	lr

00004620 <__aeabi_d2iz>:
    4620:	e1a02081 	lsl	r2, r1, #1
    4624:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    4628:	2a00000c 	bcs	4660 <__aeabi_d2iz+0x40>
    462c:	5a000009 	bpl	4658 <__aeabi_d2iz+0x38>
    4630:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    4634:	e0532ac2 	subs	r2, r3, r2, asr #21
    4638:	9a00000a 	bls	4668 <__aeabi_d2iz+0x48>
    463c:	e1a03581 	lsl	r3, r1, #11
    4640:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    4644:	e1833aa0 	orr	r3, r3, r0, lsr #21
    4648:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    464c:	e1a00233 	lsr	r0, r3, r2
    4650:	12600000 	rsbne	r0, r0, #0
    4654:	e12fff1e 	bx	lr
    4658:	e3a00000 	mov	r0, #0
    465c:	e12fff1e 	bx	lr
    4660:	e1900601 	orrs	r0, r0, r1, lsl #12
    4664:	1a000002 	bne	4674 <__aeabi_d2iz+0x54>
    4668:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    466c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    4670:	e12fff1e 	bx	lr
    4674:	e3a00000 	mov	r0, #0
    4678:	e12fff1e 	bx	lr

0000467c <__aeabi_d2f>:
    467c:	e1a02081 	lsl	r2, r1, #1
    4680:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    4684:	2253c602 	subscs	r12, r3, #2097152	; 0x200000
    4688:	227cc57f 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    468c:	9a000006 	bls	46ac <__aeabi_d2f+0x30>
    4690:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    4694:	e1a02180 	lsl	r2, r0, #3
    4698:	e18c0ea0 	orr	r0, r12, r0, lsr #29
    469c:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    46a0:	e0a00103 	adc	r0, r0, r3, lsl #2
    46a4:	03c00001 	biceq	r0, r0, #1
    46a8:	e12fff1e 	bx	lr
    46ac:	e3110101 	tst	r1, #1073741824	; 0x40000000
    46b0:	1a00000f 	bne	46f4 <__aeabi_d2f+0x78>
    46b4:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    46b8:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    46bc:	b12fff1e 	bxlt	lr
    46c0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    46c4:	e1a02aa2 	lsr	r2, r2, #21
    46c8:	e2622018 	rsb	r2, r2, #24
    46cc:	e262c020 	rsb	r12, r2, #32
    46d0:	e1b03c10 	lsls	r3, r0, r12
    46d4:	e1a00230 	lsr	r0, r0, r2
    46d8:	13800001 	orrne	r0, r0, #1
    46dc:	e1a03581 	lsl	r3, r1, #11
    46e0:	e1a035a3 	lsr	r3, r3, #11
    46e4:	e1800c13 	orr	r0, r0, r3, lsl r12
    46e8:	e1a03233 	lsr	r3, r3, r2
    46ec:	e1a03083 	lsl	r3, r3, #1
    46f0:	eaffffe6 	b	4690 <__aeabi_d2f+0x14>
    46f4:	e1f03ac2 	mvns	r3, r2, asr #21
    46f8:	1a000003 	bne	470c <__aeabi_d2f+0x90>
    46fc:	e1903601 	orrs	r3, r0, r1, lsl #12
    4700:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    4704:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    4708:	112fff1e 	bxne	lr
    470c:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    4710:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    4714:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4718:	e12fff1e 	bx	lr

0000471c <__aeabi_frsub>:
    471c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    4720:	ea000000 	b	4728 <__addsf3>

00004724 <__aeabi_fsub>:
    4724:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00004728 <__addsf3>:
    4728:	e1b02080 	lsls	r2, r0, #1
    472c:	11b03081 	lslsne	r3, r1, #1
    4730:	11320003 	teqne	r2, r3
    4734:	11f0cc42 	mvnsne	r12, r2, asr #24
    4738:	11f0cc43 	mvnsne	r12, r3, asr #24
    473c:	0a000047 	beq	4860 <__addsf3+0x138>
    4740:	e1a02c22 	lsr	r2, r2, #24
    4744:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    4748:	c0822003 	addgt	r2, r2, r3
    474c:	c0201001 	eorgt	r1, r0, r1
    4750:	c0210000 	eorgt	r0, r1, r0
    4754:	c0201001 	eorgt	r1, r0, r1
    4758:	b2633000 	rsblt	r3, r3, #0
    475c:	e3530019 	cmp	r3, #25
    4760:	812fff1e 	bxhi	lr
    4764:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    4768:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    476c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    4770:	12600000 	rsbne	r0, r0, #0
    4774:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    4778:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    477c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    4780:	12611000 	rsbne	r1, r1, #0
    4784:	e1320003 	teq	r2, r3
    4788:	0a00002e 	beq	4848 <__addsf3+0x120>
    478c:	e2422001 	sub	r2, r2, #1
    4790:	e0900351 	adds	r0, r0, r1, asr r3
    4794:	e2633020 	rsb	r3, r3, #32
    4798:	e1a01311 	lsl	r1, r1, r3
    479c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    47a0:	5a000001 	bpl	47ac <__addsf3+0x84>
    47a4:	e2711000 	rsbs	r1, r1, #0
    47a8:	e2e00000 	rsc	r0, r0, #0
    47ac:	e3500502 	cmp	r0, #8388608	; 0x800000
    47b0:	3a00000b 	bcc	47e4 <__addsf3+0xbc>
    47b4:	e3500401 	cmp	r0, #16777216	; 0x1000000
    47b8:	3a000004 	bcc	47d0 <__addsf3+0xa8>
    47bc:	e1b000a0 	lsrs	r0, r0, #1
    47c0:	e1a01061 	rrx	r1, r1
    47c4:	e2822001 	add	r2, r2, #1
    47c8:	e35200fe 	cmp	r2, #254	; 0xfe
    47cc:	2a000038 	bcs	48b4 <__addsf3+0x18c>
    47d0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    47d4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    47d8:	03c00001 	biceq	r0, r0, #1
    47dc:	e1800003 	orr	r0, r0, r3
    47e0:	e12fff1e 	bx	lr
    47e4:	e1b01081 	lsls	r1, r1, #1
    47e8:	e0a00000 	adc	r0, r0, r0
    47ec:	e3100502 	tst	r0, #8388608	; 0x800000
    47f0:	e2422001 	sub	r2, r2, #1
    47f4:	1afffff5 	bne	47d0 <__addsf3+0xa8>
    47f8:	e1b0c620 	lsrs	r12, r0, #12
    47fc:	01a00600 	lsleq	r0, r0, #12
    4800:	0242200c 	subeq	r2, r2, #12
    4804:	e31008ff 	tst	r0, #16711680	; 0xff0000
    4808:	01a00400 	lsleq	r0, r0, #8
    480c:	02422008 	subeq	r2, r2, #8
    4810:	e310060f 	tst	r0, #15728640	; 0xf00000
    4814:	01a00200 	lsleq	r0, r0, #4
    4818:	02422004 	subeq	r2, r2, #4
    481c:	e3100503 	tst	r0, #12582912	; 0xc00000
    4820:	01a00100 	lsleq	r0, r0, #2
    4824:	02422002 	subeq	r2, r2, #2
    4828:	e3500502 	cmp	r0, #8388608	; 0x800000
    482c:	31a00080 	lslcc	r0, r0, #1
    4830:	e2d22000 	sbcs	r2, r2, #0
    4834:	a0800b82 	addge	r0, r0, r2, lsl #23
    4838:	b2622000 	rsblt	r2, r2, #0
    483c:	a1800003 	orrge	r0, r0, r3
    4840:	b1830230 	orrlt	r0, r3, r0, lsr r2
    4844:	e12fff1e 	bx	lr
    4848:	e3320000 	teq	r2, #0
    484c:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    4850:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    4854:	02822001 	addeq	r2, r2, #1
    4858:	12433001 	subne	r3, r3, #1
    485c:	eaffffca 	b	478c <__addsf3+0x64>
    4860:	e1a03081 	lsl	r3, r1, #1
    4864:	e1f0cc42 	mvns	r12, r2, asr #24
    4868:	11f0cc43 	mvnsne	r12, r3, asr #24
    486c:	0a000013 	beq	48c0 <__addsf3+0x198>
    4870:	e1320003 	teq	r2, r3
    4874:	0a000002 	beq	4884 <__addsf3+0x15c>
    4878:	e3320000 	teq	r2, #0
    487c:	01a00001 	moveq	r0, r1
    4880:	e12fff1e 	bx	lr
    4884:	e1300001 	teq	r0, r1
    4888:	13a00000 	movne	r0, #0
    488c:	112fff1e 	bxne	lr
    4890:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    4894:	1a000002 	bne	48a4 <__addsf3+0x17c>
    4898:	e1b00080 	lsls	r0, r0, #1
    489c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    48a0:	e12fff1e 	bx	lr
    48a4:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    48a8:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    48ac:	312fff1e 	bxcc	lr
    48b0:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    48b4:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    48b8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    48bc:	e12fff1e 	bx	lr
    48c0:	e1f02c42 	mvns	r2, r2, asr #24
    48c4:	11a00001 	movne	r0, r1
    48c8:	01f03c43 	mvnseq	r3, r3, asr #24
    48cc:	11a01000 	movne	r1, r0
    48d0:	e1b02480 	lsls	r2, r0, #9
    48d4:	01b03481 	lslseq	r3, r1, #9
    48d8:	01300001 	teqeq	r0, r1
    48dc:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    48e0:	e12fff1e 	bx	lr

000048e4 <__aeabi_ui2f>:
    48e4:	e3a03000 	mov	r3, #0
    48e8:	ea000001 	b	48f4 <__aeabi_i2f+0x8>

000048ec <__aeabi_i2f>:
    48ec:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    48f0:	42600000 	rsbmi	r0, r0, #0
    48f4:	e1b0c000 	movs	r12, r0
    48f8:	012fff1e 	bxeq	lr
    48fc:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    4900:	e1a01000 	mov	r1, r0
    4904:	e3a00000 	mov	r0, #0
    4908:	ea00000f 	b	494c <__aeabi_l2f+0x30>

0000490c <__aeabi_ul2f>:
    490c:	e1902001 	orrs	r2, r0, r1
    4910:	012fff1e 	bxeq	lr
    4914:	e3a03000 	mov	r3, #0
    4918:	ea000005 	b	4934 <__aeabi_l2f+0x18>

0000491c <__aeabi_l2f>:
    491c:	e1902001 	orrs	r2, r0, r1
    4920:	012fff1e 	bxeq	lr
    4924:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    4928:	5a000001 	bpl	4934 <__aeabi_l2f+0x18>
    492c:	e2700000 	rsbs	r0, r0, #0
    4930:	e2e11000 	rsc	r1, r1, #0
    4934:	e1b0c001 	movs	r12, r1
    4938:	01a0c000 	moveq	r12, r0
    493c:	01a01000 	moveq	r1, r0
    4940:	03a00000 	moveq	r0, #0
    4944:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    4948:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    494c:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    4950:	e3a02017 	mov	r2, #23
    4954:	e35c0801 	cmp	r12, #65536	; 0x10000
    4958:	21a0c82c 	lsrcs	r12, r12, #16
    495c:	22422010 	subcs	r2, r2, #16
    4960:	e35c0c01 	cmp	r12, #256	; 0x100
    4964:	21a0c42c 	lsrcs	r12, r12, #8
    4968:	22422008 	subcs	r2, r2, #8
    496c:	e35c0010 	cmp	r12, #16
    4970:	21a0c22c 	lsrcs	r12, r12, #4
    4974:	22422004 	subcs	r2, r2, #4
    4978:	e35c0004 	cmp	r12, #4
    497c:	22422002 	subcs	r2, r2, #2
    4980:	304220ac 	subcc	r2, r2, r12, lsr #1
    4984:	e05221ac 	subs	r2, r2, r12, lsr #3
    4988:	e0433b82 	sub	r3, r3, r2, lsl #23
    498c:	ba000006 	blt	49ac <__aeabi_l2f+0x90>
    4990:	e0833211 	add	r3, r3, r1, lsl r2
    4994:	e1a0c210 	lsl	r12, r0, r2
    4998:	e2622020 	rsb	r2, r2, #32
    499c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    49a0:	e0a30230 	adc	r0, r3, r0, lsr r2
    49a4:	03c00001 	biceq	r0, r0, #1
    49a8:	e12fff1e 	bx	lr
    49ac:	e2822020 	add	r2, r2, #32
    49b0:	e1a0c211 	lsl	r12, r1, r2
    49b4:	e2622020 	rsb	r2, r2, #32
    49b8:	e190008c 	orrs	r0, r0, r12, lsl #1
    49bc:	e0a30231 	adc	r0, r3, r1, lsr r2
    49c0:	01c00fac 	biceq	r0, r0, r12, lsr #31
    49c4:	e12fff1e 	bx	lr

000049c8 <__aeabi_fmul>:
    49c8:	e3a0c0ff 	mov	r12, #255	; 0xff
    49cc:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    49d0:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    49d4:	1132000c 	teqne	r2, r12
    49d8:	1133000c 	teqne	r3, r12
    49dc:	0a00003e 	beq	4adc <__aeabi_fmul+0x114>
    49e0:	e0822003 	add	r2, r2, r3
    49e4:	e020c001 	eor	r12, r0, r1
    49e8:	e1b00480 	lsls	r0, r0, #9
    49ec:	11b01481 	lslsne	r1, r1, #9
    49f0:	0a000010 	beq	4a38 <__aeabi_fmul+0x70>
    49f4:	e3a03302 	mov	r3, #134217728	; 0x8000000
    49f8:	e18302a0 	orr	r0, r3, r0, lsr #5
    49fc:	e18312a1 	orr	r1, r3, r1, lsr #5
    4a00:	e0813190 	umull	r3, r1, r0, r1
    4a04:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    4a08:	e3510502 	cmp	r1, #8388608	; 0x800000
    4a0c:	31a01081 	lslcc	r1, r1, #1
    4a10:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    4a14:	31a03083 	lslcc	r3, r3, #1
    4a18:	e1800001 	orr	r0, r0, r1
    4a1c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    4a20:	e35200fd 	cmp	r2, #253	; 0xfd
    4a24:	8a00000f 	bhi	4a68 <__aeabi_fmul+0xa0>
    4a28:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    4a2c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    4a30:	03c00001 	biceq	r0, r0, #1
    4a34:	e12fff1e 	bx	lr
    4a38:	e3300000 	teq	r0, #0
    4a3c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    4a40:	01a01481 	lsleq	r1, r1, #9
    4a44:	e18c04a0 	orr	r0, r12, r0, lsr #9
    4a48:	e18004a1 	orr	r0, r0, r1, lsr #9
    4a4c:	e252207f 	subs	r2, r2, #127	; 0x7f
    4a50:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    4a54:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    4a58:	c12fff1e 	bxgt	lr
    4a5c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4a60:	e3a03000 	mov	r3, #0
    4a64:	e2522001 	subs	r2, r2, #1
    4a68:	ca000035 	bgt	4b44 <__aeabi_fmul+0x17c>
    4a6c:	e3720019 	cmn	r2, #25
    4a70:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    4a74:	d12fff1e 	bxle	lr
    4a78:	e2622000 	rsb	r2, r2, #0
    4a7c:	e1b01080 	lsls	r1, r0, #1
    4a80:	e1a01231 	lsr	r1, r1, r2
    4a84:	e2622020 	rsb	r2, r2, #32
    4a88:	e1a0c210 	lsl	r12, r0, r2
    4a8c:	e1b00061 	rrxs	r0, r1
    4a90:	e2a00000 	adc	r0, r0, #0
    4a94:	e193308c 	orrs	r3, r3, r12, lsl #1
    4a98:	01c00fac 	biceq	r0, r0, r12, lsr #31
    4a9c:	e12fff1e 	bx	lr
    4aa0:	e3320000 	teq	r2, #0
    4aa4:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    4aa8:	01a00080 	lsleq	r0, r0, #1
    4aac:	03100502 	tsteq	r0, #8388608	; 0x800000
    4ab0:	02422001 	subeq	r2, r2, #1
    4ab4:	0afffffb 	beq	4aa8 <__aeabi_fmul+0xe0>
    4ab8:	e180000c 	orr	r0, r0, r12
    4abc:	e3330000 	teq	r3, #0
    4ac0:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    4ac4:	01a01081 	lsleq	r1, r1, #1
    4ac8:	03110502 	tsteq	r1, #8388608	; 0x800000
    4acc:	02433001 	subeq	r3, r3, #1
    4ad0:	0afffffb 	beq	4ac4 <__aeabi_fmul+0xfc>
    4ad4:	e181100c 	orr	r1, r1, r12
    4ad8:	eaffffc0 	b	49e0 <__aeabi_fmul+0x18>
    4adc:	e00c3ba1 	and	r3, r12, r1, lsr #23
    4ae0:	e132000c 	teq	r2, r12
    4ae4:	1133000c 	teqne	r3, r12
    4ae8:	0a000005 	beq	4b04 <__aeabi_fmul+0x13c>
    4aec:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    4af0:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    4af4:	1affffe9 	bne	4aa0 <__aeabi_fmul+0xd8>
    4af8:	e0200001 	eor	r0, r0, r1
    4afc:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    4b00:	e12fff1e 	bx	lr
    4b04:	e3300000 	teq	r0, #0
    4b08:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    4b0c:	01a00001 	moveq	r0, r1
    4b10:	13310000 	teqne	r1, #0
    4b14:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    4b18:	0a00000d 	beq	4b54 <__aeabi_fmul+0x18c>
    4b1c:	e132000c 	teq	r2, r12
    4b20:	1a000001 	bne	4b2c <__aeabi_fmul+0x164>
    4b24:	e1b02480 	lsls	r2, r0, #9
    4b28:	1a000009 	bne	4b54 <__aeabi_fmul+0x18c>
    4b2c:	e133000c 	teq	r3, r12
    4b30:	1a000002 	bne	4b40 <__aeabi_fmul+0x178>
    4b34:	e1b03481 	lsls	r3, r1, #9
    4b38:	11a00001 	movne	r0, r1
    4b3c:	1a000004 	bne	4b54 <__aeabi_fmul+0x18c>
    4b40:	e0200001 	eor	r0, r0, r1
    4b44:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    4b48:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    4b4c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4b50:	e12fff1e 	bx	lr
    4b54:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    4b58:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    4b5c:	e12fff1e 	bx	lr

00004b60 <__aeabi_fdiv>:
    4b60:	e3a0c0ff 	mov	r12, #255	; 0xff
    4b64:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    4b68:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    4b6c:	1132000c 	teqne	r2, r12
    4b70:	1133000c 	teqne	r3, r12
    4b74:	0a00003a 	beq	4c64 <__aeabi_fdiv+0x104>
    4b78:	e0422003 	sub	r2, r2, r3
    4b7c:	e020c001 	eor	r12, r0, r1
    4b80:	e1b01481 	lsls	r1, r1, #9
    4b84:	e1a00480 	lsl	r0, r0, #9
    4b88:	0a00001c 	beq	4c00 <__aeabi_fdiv+0xa0>
    4b8c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    4b90:	e1831221 	orr	r1, r3, r1, lsr #4
    4b94:	e1833220 	orr	r3, r3, r0, lsr #4
    4b98:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    4b9c:	e1530001 	cmp	r3, r1
    4ba0:	31a03083 	lslcc	r3, r3, #1
    4ba4:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    4ba8:	e3a0c502 	mov	r12, #8388608	; 0x800000
    4bac:	e1530001 	cmp	r3, r1
    4bb0:	20433001 	subcs	r3, r3, r1
    4bb4:	2180000c 	orrcs	r0, r0, r12
    4bb8:	e15300a1 	cmp	r3, r1, lsr #1
    4bbc:	204330a1 	subcs	r3, r3, r1, lsr #1
    4bc0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    4bc4:	e1530121 	cmp	r3, r1, lsr #2
    4bc8:	20433121 	subcs	r3, r3, r1, lsr #2
    4bcc:	2180012c 	orrcs	r0, r0, r12, lsr #2
    4bd0:	e15301a1 	cmp	r3, r1, lsr #3
    4bd4:	204331a1 	subcs	r3, r3, r1, lsr #3
    4bd8:	218001ac 	orrcs	r0, r0, r12, lsr #3
    4bdc:	e1b03203 	lsls	r3, r3, #4
    4be0:	11b0c22c 	lsrsne	r12, r12, #4
    4be4:	1afffff0 	bne	4bac <__aeabi_fdiv+0x4c>
    4be8:	e35200fd 	cmp	r2, #253	; 0xfd
    4bec:	8affff9d 	bhi	4a68 <__aeabi_fmul+0xa0>
    4bf0:	e1530001 	cmp	r3, r1
    4bf4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    4bf8:	03c00001 	biceq	r0, r0, #1
    4bfc:	e12fff1e 	bx	lr
    4c00:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    4c04:	e18c04a0 	orr	r0, r12, r0, lsr #9
    4c08:	e292207f 	adds	r2, r2, #127	; 0x7f
    4c0c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    4c10:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    4c14:	c12fff1e 	bxgt	lr
    4c18:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    4c1c:	e3a03000 	mov	r3, #0
    4c20:	e2522001 	subs	r2, r2, #1
    4c24:	eaffff8f 	b	4a68 <__aeabi_fmul+0xa0>
    4c28:	e3320000 	teq	r2, #0
    4c2c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    4c30:	01a00080 	lsleq	r0, r0, #1
    4c34:	03100502 	tsteq	r0, #8388608	; 0x800000
    4c38:	02422001 	subeq	r2, r2, #1
    4c3c:	0afffffb 	beq	4c30 <__aeabi_fdiv+0xd0>
    4c40:	e180000c 	orr	r0, r0, r12
    4c44:	e3330000 	teq	r3, #0
    4c48:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    4c4c:	01a01081 	lsleq	r1, r1, #1
    4c50:	03110502 	tsteq	r1, #8388608	; 0x800000
    4c54:	02433001 	subeq	r3, r3, #1
    4c58:	0afffffb 	beq	4c4c <__aeabi_fdiv+0xec>
    4c5c:	e181100c 	orr	r1, r1, r12
    4c60:	eaffffc4 	b	4b78 <__aeabi_fdiv+0x18>
    4c64:	e00c3ba1 	and	r3, r12, r1, lsr #23
    4c68:	e132000c 	teq	r2, r12
    4c6c:	1a000005 	bne	4c88 <__aeabi_fdiv+0x128>
    4c70:	e1b02480 	lsls	r2, r0, #9
    4c74:	1affffb6 	bne	4b54 <__aeabi_fmul+0x18c>
    4c78:	e133000c 	teq	r3, r12
    4c7c:	1affffaf 	bne	4b40 <__aeabi_fmul+0x178>
    4c80:	e1a00001 	mov	r0, r1
    4c84:	eaffffb2 	b	4b54 <__aeabi_fmul+0x18c>
    4c88:	e133000c 	teq	r3, r12
    4c8c:	1a000003 	bne	4ca0 <__aeabi_fdiv+0x140>
    4c90:	e1b03481 	lsls	r3, r1, #9
    4c94:	0affff97 	beq	4af8 <__aeabi_fmul+0x130>
    4c98:	e1a00001 	mov	r0, r1
    4c9c:	eaffffac 	b	4b54 <__aeabi_fmul+0x18c>
    4ca0:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    4ca4:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    4ca8:	1affffde 	bne	4c28 <__aeabi_fdiv+0xc8>
    4cac:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    4cb0:	1affffa2 	bne	4b40 <__aeabi_fmul+0x178>
    4cb4:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    4cb8:	1affff8e 	bne	4af8 <__aeabi_fmul+0x130>
    4cbc:	eaffffa4 	b	4b54 <__aeabi_fmul+0x18c>

00004cc0 <__gesf2>:
    4cc0:	e3e0c000 	mvn	r12, #0
    4cc4:	ea000002 	b	4cd4 <__cmpsf2+0x4>

00004cc8 <__lesf2>:
    4cc8:	e3a0c001 	mov	r12, #1
    4ccc:	ea000000 	b	4cd4 <__cmpsf2+0x4>

00004cd0 <__cmpsf2>:
    4cd0:	e3a0c001 	mov	r12, #1
    4cd4:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    4cd8:	e1a02080 	lsl	r2, r0, #1
    4cdc:	e1a03081 	lsl	r3, r1, #1
    4ce0:	e1f0cc42 	mvns	r12, r2, asr #24
    4ce4:	11f0cc43 	mvnsne	r12, r3, asr #24
    4ce8:	0a000007 	beq	4d0c <__cmpsf2+0x3c>
    4cec:	e28dd004 	add	sp, sp, #4
    4cf0:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    4cf4:	11300001 	teqne	r0, r1
    4cf8:	50520003 	subspl	r0, r2, r3
    4cfc:	81a00fc1 	asrhi	r0, r1, #31
    4d00:	31e00fc1 	mvncc	r0, r1, asr #31
    4d04:	13800001 	orrne	r0, r0, #1
    4d08:	e12fff1e 	bx	lr
    4d0c:	e1f0cc42 	mvns	r12, r2, asr #24
    4d10:	1a000001 	bne	4d1c <__cmpsf2+0x4c>
    4d14:	e1b0c480 	lsls	r12, r0, #9
    4d18:	1a000003 	bne	4d2c <__cmpsf2+0x5c>
    4d1c:	e1f0cc43 	mvns	r12, r3, asr #24
    4d20:	1afffff1 	bne	4cec <__cmpsf2+0x1c>
    4d24:	e1b0c481 	lsls	r12, r1, #9
    4d28:	0affffef 	beq	4cec <__cmpsf2+0x1c>
    4d2c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    4d30:	e12fff1e 	bx	lr

00004d34 <__aeabi_cfrcmple>:
    4d34:	e1a0c000 	mov	r12, r0
    4d38:	e1a00001 	mov	r0, r1
    4d3c:	e1a0100c 	mov	r1, r12
    4d40:	eaffffff 	b	4d44 <__aeabi_cfcmpeq>

00004d44 <__aeabi_cfcmpeq>:
    4d44:	e92d400f 	push	{r0, r1, r2, r3, lr}
    4d48:	ebffffe0 	bl	4cd0 <__cmpsf2>
    4d4c:	e3500000 	cmp	r0, #0
    4d50:	43700000 	cmnmi	r0, #0
    4d54:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    4d58:	e12fff1e 	bx	lr

00004d5c <__aeabi_fcmpeq>:
    4d5c:	e52de008 	str	lr, [sp, #-8]!
    4d60:	ebfffff7 	bl	4d44 <__aeabi_cfcmpeq>
    4d64:	03a00001 	moveq	r0, #1
    4d68:	13a00000 	movne	r0, #0
    4d6c:	e49de008 	ldr	lr, [sp], #8
    4d70:	e12fff1e 	bx	lr

00004d74 <__aeabi_fcmplt>:
    4d74:	e52de008 	str	lr, [sp, #-8]!
    4d78:	ebfffff1 	bl	4d44 <__aeabi_cfcmpeq>
    4d7c:	33a00001 	movcc	r0, #1
    4d80:	23a00000 	movcs	r0, #0
    4d84:	e49de008 	ldr	lr, [sp], #8
    4d88:	e12fff1e 	bx	lr

00004d8c <__aeabi_fcmple>:
    4d8c:	e52de008 	str	lr, [sp, #-8]!
    4d90:	ebffffeb 	bl	4d44 <__aeabi_cfcmpeq>
    4d94:	93a00001 	movls	r0, #1
    4d98:	83a00000 	movhi	r0, #0
    4d9c:	e49de008 	ldr	lr, [sp], #8
    4da0:	e12fff1e 	bx	lr

00004da4 <__aeabi_fcmpge>:
    4da4:	e52de008 	str	lr, [sp, #-8]!
    4da8:	ebffffe1 	bl	4d34 <__aeabi_cfrcmple>
    4dac:	93a00001 	movls	r0, #1
    4db0:	83a00000 	movhi	r0, #0
    4db4:	e49de008 	ldr	lr, [sp], #8
    4db8:	e12fff1e 	bx	lr

00004dbc <__aeabi_fcmpgt>:
    4dbc:	e52de008 	str	lr, [sp, #-8]!
    4dc0:	ebffffdb 	bl	4d34 <__aeabi_cfrcmple>
    4dc4:	33a00001 	movcc	r0, #1
    4dc8:	23a00000 	movcs	r0, #0
    4dcc:	e49de008 	ldr	lr, [sp], #8
    4dd0:	e12fff1e 	bx	lr

00004dd4 <__aeabi_f2iz>:
    4dd4:	e1a02080 	lsl	r2, r0, #1
    4dd8:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    4ddc:	3a000008 	bcc	4e04 <__aeabi_f2iz+0x30>
    4de0:	e3a0309e 	mov	r3, #158	; 0x9e
    4de4:	e0532c22 	subs	r2, r3, r2, lsr #24
    4de8:	9a000007 	bls	4e0c <__aeabi_f2iz+0x38>
    4dec:	e1a03400 	lsl	r3, r0, #8
    4df0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    4df4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    4df8:	e1a00233 	lsr	r0, r3, r2
    4dfc:	12600000 	rsbne	r0, r0, #0
    4e00:	e12fff1e 	bx	lr
    4e04:	e3a00000 	mov	r0, #0
    4e08:	e12fff1e 	bx	lr
    4e0c:	e3720061 	cmn	r2, #97	; 0x61
    4e10:	1a000001 	bne	4e1c <__aeabi_f2iz+0x48>
    4e14:	e1b02480 	lsls	r2, r0, #9
    4e18:	1a000002 	bne	4e28 <__aeabi_f2iz+0x54>
    4e1c:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    4e20:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    4e24:	e12fff1e 	bx	lr
    4e28:	e3a00000 	mov	r0, #0
    4e2c:	e12fff1e 	bx	lr

00004e30 <atexit>:
    4e30:	e1a01000 	mov	r1, r0
    4e34:	e3a00000 	mov	r0, #0
    4e38:	e92d4008 	push	{r3, lr}
    4e3c:	e1a02000 	mov	r2, r0
    4e40:	e1a03000 	mov	r3, r0
    4e44:	eb000012 	bl	4e94 <__register_exitproc>
    4e48:	e8bd4008 	pop	{r3, lr}
    4e4c:	e12fff1e 	bx	lr

00004e50 <__errno>:
    4e50:	e59f3004 	ldr	r3, [pc, #4]	; 4e5c <__errno+0xc>
    4e54:	e5930000 	ldr	r0, [r3]
    4e58:	e12fff1e 	bx	lr
    4e5c:	000054f8 	.word	0x000054f8

00004e60 <exit>:
    4e60:	e92d4008 	push	{r3, lr}
    4e64:	e3a01000 	mov	r1, #0
    4e68:	e1a04000 	mov	r4, r0
    4e6c:	eb000045 	bl	4f88 <__call_exitprocs>
    4e70:	e59f3018 	ldr	r3, [pc, #24]	; 4e90 <exit+0x30>
    4e74:	e5930000 	ldr	r0, [r3]
    4e78:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    4e7c:	e3530000 	cmp	r3, #0
    4e80:	11a0e00f 	movne	lr, pc
    4e84:	112fff13 	bxne	r3
    4e88:	e1a00004 	mov	r0, r4
    4e8c:	eb0000c9 	bl	51b8 <_exit>
    4e90:	00005490 	.word	0x00005490

00004e94 <__register_exitproc>:
    4e94:	e59fc0e4 	ldr	r12, [pc, #228]	; 4f80 <__register_exitproc+0xec>
    4e98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    4e9c:	e59c4000 	ldr	r4, [r12]
    4ea0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    4ea4:	e35c0000 	cmp	r12, #0
    4ea8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    4eac:	e59c5004 	ldr	r5, [r12, #4]
    4eb0:	0584c148 	streq	r12, [r4, #328]	; 0x148
    4eb4:	e355001f 	cmp	r5, #31
    4eb8:	e24dd010 	sub	sp, sp, #16
    4ebc:	e1a06000 	mov	r6, r0
    4ec0:	da000015 	ble	4f1c <__register_exitproc+0x88>
    4ec4:	e59f00b8 	ldr	r0, [pc, #184]	; 4f84 <__register_exitproc+0xf0>
    4ec8:	e3500000 	cmp	r0, #0
    4ecc:	1a000001 	bne	4ed8 <__register_exitproc+0x44>
    4ed0:	e3e00000 	mvn	r0, #0
    4ed4:	ea000018 	b	4f3c <__register_exitproc+0xa8>
    4ed8:	e3a00e19 	mov	r0, #400	; 0x190
    4edc:	e58d100c 	str	r1, [sp, #12]
    4ee0:	e58d2008 	str	r2, [sp, #8]
    4ee4:	e58d3004 	str	r3, [sp, #4]
    4ee8:	e320f000 	nop	{0}
    4eec:	e250c000 	subs	r12, r0, #0
    4ef0:	e59d100c 	ldr	r1, [sp, #12]
    4ef4:	e59d2008 	ldr	r2, [sp, #8]
    4ef8:	e59d3004 	ldr	r3, [sp, #4]
    4efc:	0afffff3 	beq	4ed0 <__register_exitproc+0x3c>
    4f00:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    4f04:	e3a00000 	mov	r0, #0
    4f08:	e58c0004 	str	r0, [r12, #4]
    4f0c:	e58c5000 	str	r5, [r12]
    4f10:	e584c148 	str	r12, [r4, #328]	; 0x148
    4f14:	e58c0188 	str	r0, [r12, #392]	; 0x188
    4f18:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    4f1c:	e3560000 	cmp	r6, #0
    4f20:	e59c4004 	ldr	r4, [r12, #4]
    4f24:	1a000007 	bne	4f48 <__register_exitproc+0xb4>
    4f28:	e2843002 	add	r3, r4, #2
    4f2c:	e2844001 	add	r4, r4, #1
    4f30:	e78c1103 	str	r1, [r12, r3, lsl #2]
    4f34:	e58c4004 	str	r4, [r12, #4]
    4f38:	e3a00000 	mov	r0, #0
    4f3c:	e28dd010 	add	sp, sp, #16
    4f40:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    4f44:	e12fff1e 	bx	lr
    4f48:	e3a00001 	mov	r0, #1
    4f4c:	e1a00410 	lsl	r0, r0, r4
    4f50:	e08c8104 	add	r8, r12, r4, lsl #2
    4f54:	e3560002 	cmp	r6, #2
    4f58:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    4f5c:	e5883108 	str	r3, [r8, #264]	; 0x108
    4f60:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    4f64:	e1877000 	orr	r7, r7, r0
    4f68:	01830000 	orreq	r0, r3, r0
    4f6c:	e1a05008 	mov	r5, r8
    4f70:	e5882088 	str	r2, [r8, #136]	; 0x88
    4f74:	e58c7188 	str	r7, [r12, #392]	; 0x188
    4f78:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    4f7c:	eaffffe9 	b	4f28 <__register_exitproc+0x94>
    4f80:	00005490 	.word	0x00005490
    4f84:	00000000 	.word	0x00000000

00004f88 <__call_exitprocs>:
    4f88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    4f8c:	e59f3168 	ldr	r3, [pc, #360]	; 50fc <__call_exitprocs+0x174>
    4f90:	e5933000 	ldr	r3, [r3]
    4f94:	e24dd014 	sub	sp, sp, #20
    4f98:	e58d3004 	str	r3, [sp, #4]
    4f9c:	e2833f52 	add	r3, r3, #328	; 0x148
    4fa0:	e58d0008 	str	r0, [sp, #8]
    4fa4:	e58d300c 	str	r3, [sp, #12]
    4fa8:	e1a07001 	mov	r7, r1
    4fac:	e3a08001 	mov	r8, #1
    4fb0:	e59d3004 	ldr	r3, [sp, #4]
    4fb4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    4fb8:	e3560000 	cmp	r6, #0
    4fbc:	e59db00c 	ldr	r11, [sp, #12]
    4fc0:	0a000033 	beq	5094 <__call_exitprocs+0x10c>
    4fc4:	e5965004 	ldr	r5, [r6, #4]
    4fc8:	e2554001 	subs	r4, r5, #1
    4fcc:	5286a088 	addpl	r10, r6, #136	; 0x88
    4fd0:	5285501f 	addpl	r5, r5, #31
    4fd4:	508a5105 	addpl	r5, r10, r5, lsl #2
    4fd8:	5a000007 	bpl	4ffc <__call_exitprocs+0x74>
    4fdc:	ea000029 	b	5088 <__call_exitprocs+0x100>
    4fe0:	e5953000 	ldr	r3, [r5]
    4fe4:	e1530007 	cmp	r3, r7
    4fe8:	0a000005 	beq	5004 <__call_exitprocs+0x7c>
    4fec:	e2444001 	sub	r4, r4, #1
    4ff0:	e3740001 	cmn	r4, #1
    4ff4:	e2455004 	sub	r5, r5, #4
    4ff8:	0a000022 	beq	5088 <__call_exitprocs+0x100>
    4ffc:	e3570000 	cmp	r7, #0
    5000:	1afffff6 	bne	4fe0 <__call_exitprocs+0x58>
    5004:	e5963004 	ldr	r3, [r6, #4]
    5008:	e06a2005 	rsb	r2, r10, r5
    500c:	e2433001 	sub	r3, r3, #1
    5010:	e0862002 	add	r2, r6, r2
    5014:	e1530004 	cmp	r3, r4
    5018:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    501c:	13a01000 	movne	r1, #0
    5020:	05864004 	streq	r4, [r6, #4]
    5024:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    5028:	e3530000 	cmp	r3, #0
    502c:	0affffee 	beq	4fec <__call_exitprocs+0x64>
    5030:	e1a02418 	lsl	r2, r8, r4
    5034:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    5038:	e1120001 	tst	r2, r1
    503c:	e5969004 	ldr	r9, [r6, #4]
    5040:	0a000016 	beq	50a0 <__call_exitprocs+0x118>
    5044:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    5048:	e1120001 	tst	r2, r1
    504c:	1a000016 	bne	50ac <__call_exitprocs+0x124>
    5050:	e59d0008 	ldr	r0, [sp, #8]
    5054:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    5058:	e1a0e00f 	mov	lr, pc
    505c:	e12fff13 	bx	r3
    5060:	e5963004 	ldr	r3, [r6, #4]
    5064:	e1530009 	cmp	r3, r9
    5068:	1affffd0 	bne	4fb0 <__call_exitprocs+0x28>
    506c:	e59b3000 	ldr	r3, [r11]
    5070:	e1530006 	cmp	r3, r6
    5074:	1affffcd 	bne	4fb0 <__call_exitprocs+0x28>
    5078:	e2444001 	sub	r4, r4, #1
    507c:	e3740001 	cmn	r4, #1
    5080:	e2455004 	sub	r5, r5, #4
    5084:	1affffdc 	bne	4ffc <__call_exitprocs+0x74>
    5088:	e59f1070 	ldr	r1, [pc, #112]	; 5100 <__call_exitprocs+0x178>
    508c:	e3510000 	cmp	r1, #0
    5090:	1a000009 	bne	50bc <__call_exitprocs+0x134>
    5094:	e28dd014 	add	sp, sp, #20
    5098:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    509c:	e12fff1e 	bx	lr
    50a0:	e1a0e00f 	mov	lr, pc
    50a4:	e12fff13 	bx	r3
    50a8:	eaffffec 	b	5060 <__call_exitprocs+0xd8>
    50ac:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    50b0:	e1a0e00f 	mov	lr, pc
    50b4:	e12fff13 	bx	r3
    50b8:	eaffffe8 	b	5060 <__call_exitprocs+0xd8>
    50bc:	e5963004 	ldr	r3, [r6, #4]
    50c0:	e3530000 	cmp	r3, #0
    50c4:	e5963000 	ldr	r3, [r6]
    50c8:	1a000008 	bne	50f0 <__call_exitprocs+0x168>
    50cc:	e3530000 	cmp	r3, #0
    50d0:	0a000006 	beq	50f0 <__call_exitprocs+0x168>
    50d4:	e1a00006 	mov	r0, r6
    50d8:	e58b3000 	str	r3, [r11]
    50dc:	e320f000 	nop	{0}
    50e0:	e59b6000 	ldr	r6, [r11]
    50e4:	e3560000 	cmp	r6, #0
    50e8:	1affffb5 	bne	4fc4 <__call_exitprocs+0x3c>
    50ec:	eaffffe8 	b	5094 <__call_exitprocs+0x10c>
    50f0:	e1a0b006 	mov	r11, r6
    50f4:	e1a06003 	mov	r6, r3
    50f8:	eafffff9 	b	50e4 <__call_exitprocs+0x15c>
    50fc:	00005490 	.word	0x00005490
    5100:	00000000 	.word	0x00000000

00005104 <register_fini>:
    5104:	e92d4008 	push	{r3, lr}
    5108:	e59f3010 	ldr	r3, [pc, #16]	; 5120 <register_fini+0x1c>
    510c:	e3530000 	cmp	r3, #0
    5110:	159f000c 	ldrne	r0, [pc, #12]	; 5124 <register_fini+0x20>
    5114:	1bffff45 	blne	4e30 <atexit>
    5118:	e8bd4008 	pop	{r3, lr}
    511c:	e12fff1e 	bx	lr
    5120:	000054b8 	.word	0x000054b8
    5124:	00005128 	.word	0x00005128

00005128 <__libc_fini_array>:
    5128:	e92d4038 	push	{r3, r4, r5, lr}
    512c:	e59f5030 	ldr	r5, [pc, #48]	; 5164 <__libc_fini_array+0x3c>
    5130:	e59f4030 	ldr	r4, [pc, #48]	; 5168 <__libc_fini_array+0x40>
    5134:	e0654004 	rsb	r4, r5, r4
    5138:	e1b04144 	asrs	r4, r4, #2
    513c:	10855104 	addne	r5, r5, r4, lsl #2
    5140:	0a000004 	beq	5158 <__libc_fini_array+0x30>
    5144:	e5353004 	ldr	r3, [r5, #-4]!
    5148:	e1a0e00f 	mov	lr, pc
    514c:	e12fff13 	bx	r3
    5150:	e2544001 	subs	r4, r4, #1
    5154:	1afffffa 	bne	5144 <__libc_fini_array+0x1c>
    5158:	eb0000d6 	bl	54b8 <__libc_fini>
    515c:	e8bd4038 	pop	{r3, r4, r5, lr}
    5160:	e12fff1e 	bx	lr
    5164:	000054d0 	.word	0x000054d0
    5168:	000054d4 	.word	0x000054d4

0000516c <__cs3_premain>:
    516c:	e92d4008 	push	{r3, lr}
    5170:	eb00001d 	bl	51ec <__libc_init_array>
    5174:	e59f3030 	ldr	r3, [pc, #48]	; 51ac <__cs3_premain+0x40>
    5178:	e3530000 	cmp	r3, #0
    517c:	15930000 	ldrne	r0, [r3]
    5180:	01a00003 	moveq	r0, r3
    5184:	e59f3024 	ldr	r3, [pc, #36]	; 51b0 <__cs3_premain+0x44>
    5188:	e3530000 	cmp	r3, #0
    518c:	15931000 	ldrne	r1, [r3]
    5190:	01a01003 	moveq	r1, r3
    5194:	e3a02000 	mov	r2, #0
    5198:	ebfff116 	bl	15f8 <main>
    519c:	e59f3010 	ldr	r3, [pc, #16]	; 51b4 <__cs3_premain+0x48>
    51a0:	e3530000 	cmp	r3, #0
    51a4:	1bffff2d 	blne	4e60 <exit>
    51a8:	eafffffe 	b	51a8 <__cs3_premain+0x3c>
	...
    51b4:	00004e60 	.word	0x00004e60

000051b8 <_exit>:
    51b8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    51bc:	e3a00018 	mov	r0, #24
    51c0:	e59f1004 	ldr	r1, [pc, #4]	; 51cc <_exit+0x14>
    51c4:	ef123456 	svc	0x00123456
    51c8:	eafffffe 	b	51c8 <_exit+0x10>
    51cc:	00020026 	.word	0x00020026

000051d0 <__cs3_isr_interrupt>:
    51d0:	eafffffe 	b	51d0 <__cs3_isr_interrupt>

000051d4 <__cs3_isr_undef>:
    51d4:	eafffffe 	b	51d4 <__cs3_isr_undef>

000051d8 <__cs3_isr_swi>:
    51d8:	eafffffe 	b	51d8 <__cs3_isr_swi>

000051dc <__cs3_isr_pabort>:
    51dc:	eafffffe 	b	51dc <__cs3_isr_pabort>

000051e0 <__cs3_isr_dabort>:
    51e0:	eafffffe 	b	51e0 <__cs3_isr_dabort>

000051e4 <__cs3_isr_irq>:
    51e4:	eafffffe 	b	51e4 <__cs3_isr_irq>

000051e8 <__cs3_isr_fiq>:
    51e8:	eafffffe 	b	51e8 <__cs3_isr_fiq>

000051ec <__libc_init_array>:
    51ec:	e92d4070 	push	{r4, r5, r6, lr}
    51f0:	e59f506c 	ldr	r5, [pc, #108]	; 5264 <__libc_init_array+0x78>
    51f4:	e59f606c 	ldr	r6, [pc, #108]	; 5268 <__libc_init_array+0x7c>
    51f8:	e0656006 	rsb	r6, r5, r6
    51fc:	e1b06146 	asrs	r6, r6, #2
    5200:	12455004 	subne	r5, r5, #4
    5204:	13a04000 	movne	r4, #0
    5208:	0a000005 	beq	5224 <__libc_init_array+0x38>
    520c:	e5b53004 	ldr	r3, [r5, #4]!
    5210:	e2844001 	add	r4, r4, #1
    5214:	e1a0e00f 	mov	lr, pc
    5218:	e12fff13 	bx	r3
    521c:	e1560004 	cmp	r6, r4
    5220:	1afffff9 	bne	520c <__libc_init_array+0x20>
    5224:	e59f5040 	ldr	r5, [pc, #64]	; 526c <__libc_init_array+0x80>
    5228:	e59f6040 	ldr	r6, [pc, #64]	; 5270 <__libc_init_array+0x84>
    522c:	e0656006 	rsb	r6, r5, r6
    5230:	eb000098 	bl	5498 <_init>
    5234:	e1b06146 	asrs	r6, r6, #2
    5238:	12455004 	subne	r5, r5, #4
    523c:	13a04000 	movne	r4, #0
    5240:	0a000005 	beq	525c <__libc_init_array+0x70>
    5244:	e5b53004 	ldr	r3, [r5, #4]!
    5248:	e2844001 	add	r4, r4, #1
    524c:	e1a0e00f 	mov	lr, pc
    5250:	e12fff13 	bx	r3
    5254:	e1560004 	cmp	r6, r4
    5258:	1afffff9 	bne	5244 <__libc_init_array+0x58>
    525c:	e8bd4070 	pop	{r4, r5, r6, lr}
    5260:	e12fff1e 	bx	lr
    5264:	000054b0 	.word	0x000054b0
    5268:	000054b0 	.word	0x000054b0
    526c:	000054b0 	.word	0x000054b0
    5270:	000054b8 	.word	0x000054b8

Disassembly of section .rodata:

00005278 <ln2HI-0x10>:
    5278:	746c6f56 	.word	0x746c6f56
    527c:	00656761 	.word	0x00656761
    5280:	00707865 	.word	0x00707865
    5284:	00000000 	.word	0x00000000

00005288 <ln2HI>:
    5288:	fee00000 3fe62e42 fee00000 bfe62e42     ....B..?....B...

00005298 <ln2LO>:
    5298:	35793c76 3dea39ef 35793c76 bdea39ef     v<y5.9.=v<y5.9..

000052a8 <halF>:
    52a8:	00000000 3fe00000 00000000 bfe00000     .......?........

000052b8 <npio2_hw>:
    52b8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
    52c8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
    52d8:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
    52e8:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
    52f8:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
    5308:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
    5318:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
    5328:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00005338 <two_over_pi>:
    5338:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
    5348:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
    5358:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
    5368:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
    5378:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
    5388:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
    5398:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
    53a8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
    53b8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
    53c8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
    53d8:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
    53e8:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
    53f8:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
    5408:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
    5418:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
    5428:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
    5438:	0060e27b 00c08c6b                       {.`.k...

00005440 <init_jk>:
    5440:	00000002 00000003 00000004 00000006     ................

00005450 <PIo2>:
    5450:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
    5460:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
    5470:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
    5480:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00005490 <_global_impure_ptr>:
    5490:	00005500 00000043                       .U..C...

00005498 <_init>:
    5498:	e1a0c00d 	mov	r12, sp
    549c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    54a0:	e24cb004 	sub	r11, r12, #4
    54a4:	e24bd028 	sub	sp, r11, #40	; 0x28
    54a8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    54ac:	e12fff1e 	bx	lr

000054b0 <__init_array_start>:
    54b0:	00005104 	.word	0x00005104

000054b4 <__frame_dummy_init_array_entry>:
    54b4:	00000208                                ....

000054b8 <__libc_fini>:
    54b8:	e1a0c00d 	mov	r12, sp
    54bc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    54c0:	e24cb004 	sub	r11, r12, #4
    54c4:	e24bd028 	sub	sp, r11, #40	; 0x28
    54c8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    54cc:	e12fff1e 	bx	lr

000054d0 <__fini_array_start>:
    54d0:	000001c4 	.word	0x000001c4

000054d4 <__cs3_regions>:
    54d4:	00000000 	.word	0x00000000
    54d8:	00000040 	.word	0x00000040
    54dc:	00000040 	.word	0x00000040
    54e0:	000058f0 	.word	0x000058f0
    54e4:	00000020 	.word	0x00000020
